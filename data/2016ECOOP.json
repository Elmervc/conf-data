{
  "DataRevision": -350805790,
  "Description": "The European Conference on Object-Oriented Programming covers all areas of object technology and related software development technologies. Come celebrate the 30th edition in Rome, Italy, on July 17-22, 2016. This year Curry On, the ECOOP Summer School, the PhD Symposium, and 11 workshops will be all co-located with ECOOP! \n   \n \n \n \n \n   \n      \n    We are happy to announce the AITO Dahl-Nygaard Prizes for 2016. The Junior Prize is awarded to Emina Torlak for her great research potential. The Senior Prize is awarded to James Noble for his outstanding career contributions. The awards will be given during the conference.  Check AITO's DN Prizes page to find out more!  \n      \n   \n \n \n\nVisit our Facebook and Google+ pages, and stay tuned by following @ECOOPConf:\n\n \n\n \n \n   \n   Sun, July 17 \n   Mon, July 18 \n   Tue, July 19 \n   Wed, July 20 \n   Thu, July 21 \n   Fri, July 22 \n   \n   \n    PMLDC Distributed Computing  \n    Curry On  \n    ECOOP  \n   \n   \n    LIVE Live Prog. Systems  \n    ICOOOLPS OO Implementation  \n    FTfJP FormalTechniques  \n   \n   \n    STOP Scripts to Programs  \n    IWACO Aliasing &amp; Ownership  \n    GRACE Educational Programming  \n  \n   \n    DoctoralSymposium  \n    VORTEX Runtime Verification  \n    JSTools JavascriptAnalysis  \n    Summer School  \n   \n   \n    PX Programming Experience  \n    COP Context Orientation  \n   \n \n \n\n Latest from @ECOOPconf",
  "Event": "ecoop-2016",
  "Items": [
    {
      "Abstract": "In modern architectures, due to the huge gap between CPU performance and memory bandwidth, an application\u2019s performance highly depends on the speed at which the system is able to deliver data to operate on. The placement of data in memory affects the number of cache misses, and thus the overall speed of the application. To address this, pooling and splitting are two techniques that allow to group or split data in memory, according to whether they are usually accessed together or separately. However, these are either low-level optimisations, or outside the control of the programmer.\nWe propose OHMM, an object-oriented programming language that uses a variation of ownership types to express high-level constraints on how objects should be placed in memory. These annotations will allow the runtime to al- locate objects using pooling and splitting, and thus lead to efficient data accesses. In this short paper, we explain OHMM through an example, show how the objects will be laid out, and informally argue the benefits in terms of cache performance.",
      "Affiliations": [
        "Imperial College London",
        "Uppsala University",
        "Imperial College London"
      ],
      "AffiliationsString": "Imperial College London, Uppsala University",
      "Authors": [
        "julianafranco",
        "tobiaswrigstad",
        "sophiadrossopoulou"
      ],
      "Key": "iwaco-2016-third-paper-towards-enabling-low-level-memory-optimisations-at-the-high-level-with-ownership-annotations",
      "PersonsString": "Juliana Franco, Tobias Wrigstad and Sophia Drossopoulou",
      "Title": "Towards Enabling Low-Level Memory Optimisations at the High-Level with Ownership Annotations",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/iwaco-2016-third-paper-towards-enabling-low-level-memory-optimisations-at-the-high-level-with-ownership-annotations"
    },
    {
      "Abstract": "The distinctions between the two forms of procedural data abstraction \u2014 abstract data types and objects \u2014 are well known. An abstract data type provides an opaque type declaration, and an implementation that manipulates the modules of the abstract type, while an object uses procedural abstraction to hide an individual implementation. The object-capability model has been proposed to enable object-oriented programs to be written securely, and has been adopted by a number of practical languages including JavaScript, E, and Newspeak. This short paper addresses the question: how can we implement abstract data types in an object-capability language?",
      "Affiliations": [
        "Victoria University of Wellington",
        "Imperial College London",
        "Google Inc.",
        "University of Melbourne",
        "Victoria University of Wellington"
      ],
      "AffiliationsString": "Victoria University of Wellington, Imperial College London, Google Inc., University of Melbourne",
      "Authors": [
        "jamesnoble",
        "sophiadrossopoulou",
        "markmiller",
        "tobymurray",
        "alexpotanin"
      ],
      "Key": "iwaco-2016-second-paper-abstract-data-types-in-object-capability-systems",
      "PersonsString": "James Noble, Sophia Drossopoulou, Mark Miller, Toby Murray and Alex Potanin",
      "Title": "Abstract Data Types in Object-Capability Systems",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/iwaco-2016-second-paper-abstract-data-types-in-object-capability-systems"
    },
    {
      "Abstract": "A key idea in object-oriented programming is that objects encapsulate state and interact with each other by message exchange. This perspective suggests a model of computation that is inherently concurrent (to facilitate simultaneous message exchange) and that accounts for the effect of message exchange on an object\u2019s state (to express valid sequences of state transitions). In this paper we show that such a model of computation arises naturally from session-based communication. We introduce an object-oriented programming language that has processes as its only objects and employs linear session types to express the protocols of message exchange and to reason about concurrency and state. Based on various examples we show that our language supports the typical patterns of object-oriented programming (e.g., encapsulation, dynamic dispatch, and subtyping) while guaranteeing session fidelity in a concurrent setting. In addition, we show that our language facilitates new forms of expression (e.g., type-directed reuse, internal choice), which are not available in current object-oriented languages.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["stephaniebalzer"],
      "Key": "iwaco-2016-second-talk",
      "PersonsString": "Stephanie Balzer",
      "Title": " Objects as Session-Typed Processes",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/iwaco-2016-second-talk"
    },
    {
      "Abstract": "",
      "Affiliations": ["Northeastern University"],
      "AffiliationsString": "Northeastern University",
      "Authors": ["paleyli"],
      "Key": "iwaco-2016-closing-remarks",
      "PersonsString": "Paley Li",
      "Title": "Closing Discussions",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/iwaco-2016-closing-remarks"
    },
    {
      "Abstract": "In ECMAScript, a realm consists of a global object and an associated set of primordial objects \u2013 mutable objects like Array.prototype that must exist before any code runs. Objects within a realm implicitly share these primordials and can therefore easily disrupt each other by primordial poisoning \u2013 modifying these objects to behave badly. This disruption may happen accidentally or maliciously. Today, in the browser, realms can be created via same origin iframes. On creation, these realms are separate from each other. However, to achieve this separation, each realm needs its own primordials, making this separation too expensive to be used at fine grain.\nThough initially separate, realms can be brought into intimate contact with each other via host-provided APIs. For example, in current browsers, same-origin iframes bring realms into direct contact with each other\u2019s objects. Once such realms are in contact, the mutability of primordials enables an object in one realm to poison the prototypes of the other realms.\nThis talk discuss support for ultra-fine-grain protection domains in JavaScript. Minimizing standardization, development, explanation, and runtime costs. While at the same time maximizing robustness, security, compatibility, simplicity, and expressiveness benefits.",
      "Affiliations": ["Google Inc."],
      "AffiliationsString": "Google Inc.",
      "Authors": ["markmiller"],
      "Key": "iwaco-2016-keynote",
      "PersonsString": "Mark Miller",
      "Title": "Frozen Realms: Confining effects for safer JavaScript plugins",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/iwaco-2016-keynote"
    },
    {
      "Abstract": "In 2011, Wrigstad and Clarke asked whether ownership types are ready for the world. A key open question about ownership types remains whether they are usable in practice. Recent years have seen a number of new programming languages; Rust is most notable for including an ownership system as a key feature, but other new and revised languages (even C++!) have related features which may provide some of the same benefits. In this talk, I\u2019ll investigate support for ownership and related features in these languages and programmers\u2019 acceptance of these features.",
      "Affiliations": ["University of Waterloo, Canada"],
      "AffiliationsString": "University of Waterloo, Canada",
      "Authors": ["patricklam"],
      "Key": "iwaco-2016-third-talk",
      "PersonsString": "Patrick Lam",
      "Title": "Are Ownership Types Reaching the World Yet?",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/iwaco-2016-third-talk"
    },
    {
      "Abstract": "Kappa is a type system for safe concurrent object-oriented programming using reference capabilities. It uses a combination of static and dynamic techniques to guarantee data-race freedom, and, for a certain subset of the system, non-interference (and thereby deterministic parallelism). It combines many features from previous work on alias management, such as substructural types, regions, ownership types, and fractional permissions, and brings them together using a small set of primitives.\nIn this extended abstract we show how Kappa\u2019s capabilities express variations of the aforementioned concepts, discuss the main insights from working with Kappa, present the current status of the implementation of Kappa in the context of the actor language Encore, and discuss ongoing and future work.",
      "Affiliations": [
        "Uppsala University",
        "Uppsala University"
      ],
      "AffiliationsString": "Uppsala University",
      "Authors": [
        "eliascastegren",
        "tobiaswrigstad"
      ],
      "Key": "iwaco-2016-first-paper-kappa-insights-current-status-and-future-work",
      "PersonsString": "Elias Castegren and Tobias Wrigstad",
      "Title": "Kappa: Insights, Current Status and Future Work",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/iwaco-2016-first-paper-kappa-insights-current-status-and-future-work"
    },
    {
      "Abstract": "A key idea behind context-oriented software development is that software cannot be described by tree structures such as OO designs, nested abstractions or layered virtual machines. Unfortunately, this means that the topologies of the software we build, and the interactions within those topologies, will be more complex than we once hoped. This talk will present a philosophical context for this analysis; show how a range of research fits into in that context, and attempt to outline some future directions.",
      "Affiliations": ["Victoria University of Wellington"],
      "AffiliationsString": "Victoria University of Wellington",
      "Authors": ["jamesnoble"],
      "Key": "cop-2016-keynote",
      "PersonsString": "James Noble",
      "Title": "Keynote: We Demand Rigidly Defined Areas of Doubt and Uncertainty.",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/cop-2016-keynote"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "",
        "",
        "Universidad de los Andes",
        ""
      ],
      "AffiliationsString": ", Universidad de los Andes",
      "Authors": [
        "nguonlytaing",
        "markuswutzler",
        "thomasspringer",
        "nicolascardozo",
        "alexanderschill"
      ],
      "Key": "cop-2016-consistent-unanticipated-adaptation-for-context-dependent-applications",
      "PersonsString": "Nguonly Taing, Markus Wutzler, Thomas Springer, Nicolás Cardozo and Alexander Schill",
      "Title": "Consistent Unanticipated Adaptation for Context-Dependent Applications",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/cop-2016-consistent-unanticipated-adaptation-for-context-dependent-applications"
    },
    {
      "Abstract": "Soloway\u2019s Rainfall problem, a classic benchmark in computing education research, has proven difficult for many CS1 students. Rainfall tests students\u2019 abilities at plan composition, the task of integrating code fragments that implement subparts of a problem into a single program. Nearly all prior studies of Rainfall have involved students who were learning imperative programming with arrays. In our recent multi-university study, students learning functional programming produced atypical profiles of compositions and errors on Rainfall.\nWhat do these different results suggest about the problem of plan composition and programming education? This talk raises various questions about the relationships between programming languages, program design, curricula, and how students perceive code structure.\nPlease come equipped with pen and paper, because the talk will require you to write some programs.\nJoint work primarily with Kathi Fisler.",
      "Affiliations": ["Brown University"],
      "AffiliationsString": "Brown University",
      "Authors": ["shriramkrishnamurthi"],
      "Key": "grace-2016-pyret",
      "PersonsString": "Shriram Krishnamurthi",
      "Title": "The Recurring Rainfall Problem",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/grace-2016-pyret"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Pomona College",
        "Portland State University"
      ],
      "AffiliationsString": "Pomona College, Portland State University",
      "Authors": [
        "kimbruce",
        "andrewblack"
      ],
      "Key": "grace-2016-overview-of-the-grace-project-and-language",
      "PersonsString": "Kim Bruce and Andrew Black",
      "Title": "Overview of the Grace project and language",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/grace-2016-overview-of-the-grace-project-and-language"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "TU Delft",
        "TU Delft",
        "Delft University of Technology"
      ],
      "AffiliationsString": "TU Delft, Delft University of Technology",
      "Authors": [
        "michielhaisma",
        "vladvergu",
        "eelcovisser"
      ],
      "Key": "grace-2016-spoofax-grace",
      "PersonsString": "Michiel Haisma, Vlad Vergu and Eelco Visser",
      "Title": "Grace in Spoofax: Readable Specification and Implementation in One",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/grace-2016-spoofax-grace"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Tokyo Institute of Technology",
        "Tokyo Institute of Technology",
        "HPI"
      ],
      "AffiliationsString": "Tokyo Institute of Technology, HPI",
      "Authors": [
        "matthiasspringer",
        "hidehikomasuhara",
        "roberthirschfeld"
      ],
      "Key": "cop-2016-classes-as-layers-rewriting-design-patterns-with-cop-alternative-implementations-of-decorator-observer-and-visitor",
      "PersonsString": "Matthias Springer, Hidehiko Masuhara and Robert Hirschfeld",
      "Title": "Classes as Layers: Rewriting Design Patterns with COP - Alternative Implementations of Decorator, Observer and Visitor",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/cop-2016-classes-as-layers-rewriting-design-patterns-with-cop-alternative-implementations-of-decorator-observer-and-visitor"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "HPI, Germany",
        "HPI, Germany",
        "HPI"
      ],
      "AffiliationsString": "HPI, Germany, HPI",
      "Authors": [
        "tobiaspape",
        "timfelgentreff",
        "roberthirschfeld"
      ],
      "Key": "cop-2016-optimizing-sideways-composition-fast-context-oriented-programming-in-contextpypy",
      "PersonsString": "Tobias Pape, Tim Felgentreff and Robert Hirschfeld",
      "Title": "Optimizing Sideways Composition: Fast Context-Oriented Programming in ContextPyPy",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/cop-2016-optimizing-sideways-composition-fast-context-oriented-programming-in-contextpypy"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Université Catholique de Louvain, Belgium",
        "Universidad de los Andes",
        ""
      ],
      "AffiliationsString": "Université Catholique de Louvain, Belgium, Universidad de los Andes, ",
      "Authors": [
        "kimmens",
        "nicolascardozo",
        "benoitduhoux"
      ],
      "Key": "cop-2016-a-context-oriented-software-architecture",
      "PersonsString": "Kim Mens, Nicolás Cardozo and Benoît Duhoux",
      "Title": "A Context-Oriented Software Architecture",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/cop-2016-a-context-oriented-software-architecture"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Portland State University",
        "Pomona College"
      ],
      "AffiliationsString": "Portland State University, Pomona College",
      "Authors": [
        "andrewblack",
        "kimbruce"
      ],
      "Key": "grace-2016-experience-teaching-with-grace",
      "PersonsString": "Andrew Black and Kim Bruce",
      "Title": "Experience teaching with Grace",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/grace-2016-experience-teaching-with-grace"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "grace-2016-discussion-next-steps-with-grace",
      "PersonsString": "",
      "Title": "Next steps with Grace",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/grace-2016-discussion-next-steps-with-grace"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Portland State University",
        "Pomona College",
        "Victoria University of Wellington"
      ],
      "AffiliationsString": "Portland State University, Pomona College, Victoria University of Wellington",
      "Authors": [
        "andrewblack",
        "kimbruce",
        "jamesnoble"
      ],
      "Key": "grace-2016-recent-changes-and-language-design-issues-in-grace",
      "PersonsString": "Andrew Black, Kim Bruce and James Noble",
      "Title": "Recent changes and language design issues in Grace",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/grace-2016-recent-changes-and-language-design-issues-in-grace"
    },
    {
      "Abstract": "Grace traits are intended to be stateless, immutable, free of fields, and without side effects when used, so that it does not matter how many times a trait is repeatedly included into an object, in what order, or by what chain of parents. We show constructions of traits recovering each of these excluded properties.",
      "Affiliations": [
        "Victoria University of Wellington",
        "Victoria University of Wellington"
      ],
      "AffiliationsString": "Victoria University of Wellington",
      "Authors": [
        "michaelhomer",
        "timothyjones"
      ],
      "Key": "grace-2016-traitorous-traits",
      "PersonsString": "Michael Homer and Timothy Jones",
      "Title": "Traitorous Traits",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/grace-2016-traitorous-traits"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Ritsumeikan University",
        "",
        ""
      ],
      "AffiliationsString": "Ritsumeikan University, ",
      "Authors": [
        "tetsuokamina",
        "noriyukisuzuki",
        "katsuhisamaruyama"
      ],
      "Key": "cop-2016-detecting-invalid-layer-combinations-using-control-flow-analysis-for-android",
      "PersonsString": "Tetsuo Kamina, Noriyuki Suzuki and Katsuhisa Maruyama",
      "Title": "Detecting Invalid Layer Combinations Using Control-Flow Analysis for Android",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/cop-2016-detecting-invalid-layer-combinations-using-control-flow-analysis-for-android"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "cop-2016-opening",
      "PersonsString": "",
      "Title": "Opening",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/cop-2016-opening"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Hasso Plattner Institute",
        "Hasso Plattner Institute",
        "HPI"
      ],
      "AffiliationsString": "Hasso Plattner Institute, HPI",
      "Authors": [
        "tonimattis",
        "patrickrein",
        "roberthirschfeld"
      ],
      "Key": "cop-2016-transaction-layers-controlling-granularity-of-change-in-live-programming-environments-using-cop",
      "PersonsString": "Toni Mattis, Patrick Rein and Robert Hirschfeld",
      "Title": "Transaction Layers: Controlling Granularity of Change in Live Programming Environments using COP",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/cop-2016-transaction-layers-controlling-granularity-of-change-in-live-programming-environments-using-cop"
    },
    {
      "Abstract": "",
      "Affiliations": ["University of Kent"],
      "AffiliationsString": "University of Kent",
      "Authors": ["michaelkolling"],
      "Key": "grace-2016-tooling-matters-why-grace-needs-a-good-ide",
      "PersonsString": "Michael Kölling",
      "Title": "Tooling matters \u2013 Why Grace needs a good IDE ",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/grace-2016-tooling-matters-why-grace-needs-a-good-ide"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "University of Genova",
        "Victoria University of Wellington"
      ],
      "AffiliationsString": ", University of Genova, Victoria University of Wellington",
      "Authors": [
        "paolagiannini",
        "elenazucca",
        "marcoservetto"
      ],
      "Key": "vortex-2016-runtime-checks-as-nominal-types",
      "PersonsString": "Paola Giannini, Elena Zucca and Marco Servetto",
      "Title": "Runtime checks as nominal types",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/vortex-2016-runtime-checks-as-nominal-types"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "University of Genova",
        "Centrum Wiskunde & Informatica, Leiden University"
      ],
      "AffiliationsString": "University of Genova, Centrum Wiskunde & Informatica, Leiden University",
      "Authors": [
        "davideancona",
        "franksdeboer"
      ],
      "Key": "vortex-2016-closing-remarks",
      "PersonsString": "Davide Ancona and Frank S. de Boer",
      "Title": "Closing Remarks",
      "Type": "Day closing",
      "URL": "http://2016.ecoop.org/event/vortex-2016-closing-remarks"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "University of Genova",
        "Centrum Wiskunde & Informatica, Leiden University"
      ],
      "AffiliationsString": "University of Genova, Centrum Wiskunde & Informatica, Leiden University",
      "Authors": [
        "davideancona",
        "franksdeboer"
      ],
      "Key": "vortex-2016-opening-remarks",
      "PersonsString": "Davide Ancona and Frank S. de Boer",
      "Title": "Opening Remarks",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/vortex-2016-opening-remarks"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "",
        "",
        "",
        "",
        "University of Malta"
      ],
      "AffiliationsString": ", University of Malta",
      "Authors": [
        "abigailcauchi",
        "lukechircop",
        "christiancolombo",
        "adrianfrancalanza",
        "markmicallef",
        "gordonpace"
      ],
      "Key": "vortex-2016-extracting-runtime-monitors-from-tests-an-overview-and-a-way-forward",
      "PersonsString": "Abigail Cauchi, Luke Chircop, Christian Colombo, Adrian Francalanza, Mark Micallef and Gordon Pace",
      "Title": "Extracting Runtime Monitors from Tests: An Overview and a way forward",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/vortex-2016-extracting-runtime-monitors-from-tests-an-overview-and-a-way-forward"
    },
    {
      "Abstract": "",
      "Affiliations": ["University of Lübeck"],
      "AffiliationsString": "University of Lübeck",
      "Authors": ["martinleucker"],
      "Key": "vortex-2016-runtime-verification-with-data",
      "PersonsString": "Martin Leucker",
      "Title": "Runtime Verification with Data",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/vortex-2016-runtime-verification-with-data"
    },
    {
      "Abstract": "",
      "Affiliations": ["Carnegie Mellon University\t"],
      "AffiliationsString": "Carnegie Mellon University\t",
      "Authors": ["jeanbaptistejeannin"],
      "Key": "vortex-2016-runtime-verification-of-safe-advisories-in-the-next-generation-airborne-collision-avoidance-system",
      "PersonsString": "Jean-Baptiste Jeannin",
      "Title": "Runtime Verification of Safe Advisories in the Next-Generation Airborne Collision Avoidance System",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/vortex-2016-runtime-verification-of-safe-advisories-in-the-next-generation-airborne-collision-avoidance-system"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["angeloferrando"],
      "Key": "vortex-2016-the-early-bird-catches-the-worm-first-verify-then-monitor-",
      "PersonsString": "Angelo Ferrando",
      "Title": "The Early Bird Catches the Worm: first Verify, then Monitor!",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/vortex-2016-the-early-bird-catches-the-worm-first-verify-then-monitor-"
    },
    {
      "Abstract": "",
      "Affiliations": ["University of California, Berkeley"],
      "AffiliationsString": "University of California, Berkeley",
      "Authors": ["koushiksen"],
      "Key": "vortex-2016-monitoring-javascript-programs-with-jalangi",
      "PersonsString": "Koushik Sen",
      "Title": " Monitoring JavaScript Programs with Jalangi",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/vortex-2016-monitoring-javascript-programs-with-jalangi"
    },
    {
      "Abstract": "",
      "Affiliations": ["University of Gothenburg"],
      "AffiliationsString": "University of Gothenburg",
      "Authors": ["gerardoschneider"],
      "Key": "vortex-2016-starvoors-a-framework-for-static-and-runtime-verification-of-data-and-control-properties-",
      "PersonsString": "Gerardo Schneider",
      "Title": "StaRVOOrS: A framework for static and runtime verification of data and control properties.",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/vortex-2016-starvoors-a-framework-for-static-and-runtime-verification-of-data-and-control-properties-"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Hasso Plattner Institute",
        "Hasso-Plattner-Institute, Potsdam",
        "Hasso Plattner Institute",
        "HPI"
      ],
      "AffiliationsString": "Hasso Plattner Institute, Hasso-Plattner-Institute, Potsdam, HPI",
      "Authors": [
        "patrickrein",
        "stefanlehmann",
        "tonimattis",
        "roberthirschfeld"
      ],
      "Key": "px-2016-how-live-are-live-programming-systems-benchmarking-the-response-times-of-live-programming-environments-",
      "PersonsString": "Patrick Rein, Stefan Lehmann, Toni Mattis and Robert Hirschfeld",
      "Title": "How Live are Live Programming Systems? \u2013 Benchmarking the Response Times of Live Programming Environments.",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/px-2016-how-live-are-live-programming-systems-benchmarking-the-response-times-of-live-programming-environments-"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "px-2016-introduction",
      "PersonsString": "",
      "Title": "Introduction",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/px-2016-introduction"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "ETH Zurich"
      ],
      "AffiliationsString": ", ETH Zurich",
      "Authors": [
        "dimitarasenov",
        "petermller"
      ],
      "Key": "px-2016-reinventing-the-ide-",
      "PersonsString": "Dimitar Asenov and Peter Müller",
      "Title": "Reinventing the IDE.",
      "Type": "Demonstration",
      "URL": "http://2016.ecoop.org/event/px-2016-reinventing-the-ide-"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "amirkirsh",
        "irisgaber"
      ],
      "Key": "px-2016-satisfaction-time-investment-and-success-in-students-programming-exercise-",
      "PersonsString": "Amir Kirsh and Iris Gaber",
      "Title": "Satisfaction, Time Investment and Success in Students' Programming Exercise.",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/px-2016-satisfaction-time-investment-and-success-in-students-programming-exercise-"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Viewpoints Research Institute",
        "HARC / Y Combinator Research",
        "",
        "",
        "University of California at Los Angeles, USA"
      ],
      "AffiliationsString": "Viewpoints Research Institute, HARC / Y Combinator Research, , University of California at Los Angeles, USA",
      "Authors": [
        "yoshikiohshima",
        "alessandrowarth",
        "bertfreudenberg",
        "aranlunzer",
        "alankay"
      ],
      "Key": "px-2016-towards-making-a-computer-tutor-for-children-of-all-ages-a-memo-",
      "PersonsString": "Yoshiki Ohshima, Alessandro Warth, Bert Freudenberg, Aran Lunzer and Alan Kay",
      "Title": "Towards Making a Computer Tutor for Children of All Ages - A Memo.",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/px-2016-towards-making-a-computer-tutor-for-children-of-all-ages-a-memo-"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["matthewhuebert"],
      "Key": "px-2016-i-sit-down-at-my-editor-and-feel-relaxed-",
      "PersonsString": "Matthew Huebert",
      "Title": "I sit down at my editor, and feel relaxed.",
      "Type": "Demonstration",
      "URL": "http://2016.ecoop.org/event/px-2016-i-sit-down-at-my-editor-and-feel-relaxed-"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "",
        "Hasso Plattner Institute",
        "HPI"
      ],
      "AffiliationsString": ", Hasso Plattner Institute, HPI",
      "Authors": [
        "astridthomschke",
        "danielstolpe",
        "marceltaeumel",
        "roberthirschfeld"
      ],
      "Key": "px-2016-towards-gaze-control-in-programming-environments-",
      "PersonsString": "Astrid Thomschke, Daniel Stolpe, Marcel Taeumel and Robert Hirschfeld",
      "Title": "Towards Gaze Control in Programming Environments.",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/px-2016-towards-gaze-control-in-programming-environments-"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Hasso Plattner Institute",
        "HPI"
      ],
      "AffiliationsString": "Hasso Plattner Institute, HPI",
      "Authors": [
        "marceltaeumel",
        "roberthirschfeld"
      ],
      "Key": "px-2016-evolving-user-interfaces-within-self-sustaining-programming-environments-exploring-the-project-concept-of-squeak-smalltalk-to-bootstrap-uis-",
      "PersonsString": "Marcel Taeumel and Robert Hirschfeld",
      "Title": "Evolving User Interfaces Within Self-sustaining Programming Environments: Exploring the Project Concept of Squeak/Smalltalk to Bootstrap UIs.",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/px-2016-evolving-user-interfaces-within-self-sustaining-programming-environments-exploring-the-project-concept-of-squeak-smalltalk-to-bootstrap-uis-"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "University of Bern, Switzerland",
        "CompuGroup Medical Schweiz AG",
        "University of Chile",
        "University of Bern, Switzerland",
        "",
        "University of Bern"
      ],
      "AffiliationsString": "University of Bern, Switzerland, CompuGroup Medical Schweiz AG, University of Chile, , University of Bern",
      "Authors": [
        "andreichis",
        "tudorgirba",
        "jurajkubelka",
        "oscarnierstrasz",
        "stefanreichhart",
        "aliakseisyrel"
      ],
      "Key": "px-2016-exemplifying-moldable-development-",
      "PersonsString": "Andrei Chiş, Tudor Gîrba, Juraj Kubelka, Oscar Nierstrasz, Stefan Reichhart and Aliaksei Syrel",
      "Title": "Exemplifying Moldable Development.",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/px-2016-exemplifying-moldable-development-"
    },
    {
      "Abstract": "",
      "Affiliations": ["University of California, Berkeley"],
      "AffiliationsString": "University of California, Berkeley",
      "Authors": ["koushiksen"],
      "Key": "jstools-2016-monitoring-javascript-programs-with-jalangi",
      "PersonsString": "Koushik Sen",
      "Title": "Invited Talk - Monitoring JavaScript Programs with Jalangi",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/jstools-2016-monitoring-javascript-programs-with-jalangi"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Indiana University",
        "Indiana University",
        "Indiana University"
      ],
      "AffiliationsString": "Indiana University",
      "Authors": [
        "andrekuhlenschmidt",
        "deyaaeldeenalmahallawi",
        "jeremysiek"
      ],
      "Key": "stop-2016-a-systematic-performance-evaluation-of-gradually-typed-functions-and-references",
      "PersonsString": "Andre Kuhlenschmidt, Deyaaeldeen Almahallawi and Jeremy Siek",
      "Title": "A Systematic Performance Evaluation of Gradually Typed Functions and References",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/stop-2016-a-systematic-performance-evaluation-of-gradually-typed-functions-and-references"
    },
    {
      "Abstract": "Dart provides experience with an optionally typed language used in a demanding industrial setting. I\u2019ll discuss our experiences with Dart\u2019s version of optional/gradual typing and what design insights one might gain from them.",
      "Affiliations": ["Google"],
      "AffiliationsString": "Google",
      "Authors": ["giladbracha"],
      "Key": "stop-2016-invite-speaker-gilad-bracha",
      "PersonsString": "Gilad Bracha",
      "Title": "Optional Typing in Dart: Purity and Practice",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/stop-2016-invite-speaker-gilad-bracha"
    },
    {
      "Abstract": "",
      "Affiliations": ["Imperial College London"],
      "AffiliationsString": "Imperial College London",
      "Authors": ["philippagardner"],
      "Key": "jstools-2016-javascript-verification",
      "PersonsString": "Philippa Gardner",
      "Title": "JavaScript Verification",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/jstools-2016-javascript-verification"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "stop-2016-closing-remarks",
      "PersonsString": "",
      "Title": "Closing remarks",
      "Type": "Day closing",
      "URL": "http://2016.ecoop.org/event/stop-2016-closing-remarks"
    },
    {
      "Abstract": "",
      "Affiliations": ["Carnegie Mellon University\t"],
      "AffiliationsString": "Carnegie Mellon University\t",
      "Authors": ["jeanbaptistejeannin"],
      "Key": "jstools-2016-sound-type-inference-for-javascript",
      "PersonsString": "Jean-Baptiste Jeannin",
      "Title": "Sound Type Inference for JavaScript",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/jstools-2016-sound-type-inference-for-javascript"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "Indiana University"
      ],
      "AffiliationsString": ", Indiana University",
      "Authors": [
        "michaelvitousek",
        "jeremysiek"
      ],
      "Key": "stop-2016-from-optional-to-gradual-typing-via-transient-checks",
      "PersonsString": "Michael Vitousek and Jeremy Siek",
      "Title": "From Optional to Gradual Typing via Transient Checks",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/stop-2016-from-optional-to-gradual-typing-via-transient-checks"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["nickfitzgerald"],
      "Key": "jstools-2016-so-you-want-to-build-memory-tooling-for-javascript-",
      "PersonsString": "Nick Fitzgerald",
      "Title": "So You Want to Build Memory Tooling For JavaScript?",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/jstools-2016-so-you-want-to-build-memory-tooling-for-javascript-"
    },
    {
      "Abstract": "",
      "Affiliations": ["Semmle"],
      "AffiliationsString": "Semmle",
      "Authors": ["maxschaefer"],
      "Key": "jstools-2016-fishing-for-javascript-bugs-at-the-shallow-end",
      "PersonsString": "Max Schaefer",
      "Title": "Fishing for JavaScript Bugs at the Shallow End",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/jstools-2016-fishing-for-javascript-bugs-at-the-shallow-end"
    },
    {
      "Abstract": "Gradual typing has become a standard mechanism for both progressively adding types to dynamically typed languages and liberalising existing type systems, and recent developments have produced the Gradualizer and Abstracting Gradual Typing (AGT) for systematically lifting a typed language to a corresponding gradual language. AGT applies the principles of abstract interpretation to a language\u2019s underlying predicates and functions: we have used this technique to build a library in the dependently typed language Agda for automatically generating different type systems over the same language of terms. Our mechanisation takes an abstract description of a type system indexed by a functor and then generates a variety of different type systems, including gradual typing.",
      "Affiliations": ["Victoria University of Wellington"],
      "AffiliationsString": "Victoria University of Wellington",
      "Authors": ["timothyjones"],
      "Key": "stop-2016-automating-gradual-typing",
      "PersonsString": "Timothy Jones",
      "Title": "Automating Gradual Typing",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/stop-2016-automating-gradual-typing"
    },
    {
      "Abstract": "We report our ongoing work on gradual typing for a language with delimited-control operators, shift and reset, which are known to be very powerful constructs. We base our gradual type system on the simple type system with so-called answer-type modification proposed by Danvy and Filinski. We introduce the type dynamic (written *), define the type consistency relation, modify the typing rules by using the type consistency relation, and give translation to insert explicit casts. The way we modify the typing rules is very similar to the Gradualizer but it turns out that the Gradualizer is not directly applicable for generation of rules of cast insertion translation. We also discuss the properties of the obtained gradually typed language according to Siek et al.\u2019s criteria for gradually typed languages.",
      "Affiliations": [
        "Kyoto University",
        "",
        "Kyoto University"
      ],
      "AffiliationsString": "Kyoto University, ",
      "Authors": [
        "yusukemiyazaki",
        "tarosekiyama",
        "atsushiigarashi"
      ],
      "Key": "stop-2016-gradual-typing-for-delimited-continuations",
      "PersonsString": "Yusuke Miyazaki, Taro Sekiyama and Atsushi Igarashi",
      "Title": "Gradual Typing for Delimited Continuations",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/stop-2016-gradual-typing-for-delimited-continuations"
    },
    {
      "Abstract": "Ruby is a popular, object-oriented, dynamic scripting language. Over the last several years, we have been working to bring some of the benefits of static typing to Ruby. In this talk, I will discuss how our approach has evolved from pure static analysis to pure dynamic analysis and finally to what we think is the right mixture of both. I will also discuss some of the challenges of working with a complex and evolving language as well as future plans.",
      "Affiliations": ["University of Maryland, College Park"],
      "AffiliationsString": "University of Maryland, College Park",
      "Authors": ["jeffreysfoster"],
      "Key": "stop-2016-invited-speaker-jeff-foster",
      "PersonsString": "Jeffrey S. Foster",
      "Title": "Types for Ruby",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/stop-2016-invited-speaker-jeff-foster"
    },
    {
      "Abstract": "",
      "Affiliations": ["IBM Thomas J. Watson Research Center"],
      "AffiliationsString": "IBM Thomas J. Watson Research Center",
      "Authors": ["juliandolby"],
      "Key": "jstools-2016-morning-remarks",
      "PersonsString": "Julian Dolby",
      "Title": "Opening Remarks",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/jstools-2016-morning-remarks"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "stop-2016-opening-remarks",
      "PersonsString": "",
      "Title": "Opening remarks",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/stop-2016-opening-remarks"
    },
    {
      "Abstract": "",
      "Affiliations": ["IBM Thomas J. Watson Research Center"],
      "AffiliationsString": "IBM Thomas J. Watson Research Center",
      "Authors": ["juliandolby"],
      "Key": "jstools-2016-closing",
      "PersonsString": "Julian Dolby",
      "Title": "Closing Remarks",
      "Type": "Day closing",
      "URL": "http://2016.ecoop.org/event/jstools-2016-closing"
    },
    {
      "Abstract": "",
      "Affiliations": ["Northeastern University"],
      "AffiliationsString": "Northeastern University",
      "Authors": ["janvitek"],
      "Key": "stop-2016-invite-speaker-jan-vitek",
      "PersonsString": "Jan Vitek",
      "Title": "Gradual types for real-world objects",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/stop-2016-invite-speaker-jan-vitek"
    },
    {
      "Abstract": "The gradual guarantee lets us understand gradual typing: a system is gradually typed if removing a type annotation cannot change the semantics of a correct program. We extend the gradual guarantee beyond types: privacy annotations or inheritance restrictions, for example, may be gradual if changing them does not change the semantics of a correct program.",
      "Affiliations": [
        "Victoria University of Wellington",
        "Victoria University of Wellington",
        "Victoria University of Wellington",
        "Imperial College London",
        "Portland State University",
        "Pomona College"
      ],
      "AffiliationsString": "Victoria University of Wellington, Imperial College London, Portland State University, Pomona College",
      "Authors": [
        "jamesnoble",
        "michaelhomer",
        "timothyjones",
        "sophiadrossopoulou",
        "andrewblack",
        "kimbruce"
      ],
      "Key": "stop-2016-beyond-types-extending-the-gradual-guarantee",
      "PersonsString": "James Noble, Michael Homer, Timothy Jones, Sophia Drossopoulou, Andrew Black and Kim Bruce",
      "Title": "Beyond Types: Extending the Gradual Guarantee",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/stop-2016-beyond-types-extending-the-gradual-guarantee"
    },
    {
      "Abstract": "",
      "Affiliations": ["Oracle Labs, Australia"],
      "AffiliationsString": "Oracle Labs, Australia",
      "Authors": ["alexanderjordan"],
      "Key": "jstools-2016-what-went-wrong-automatic-triage-of-precision-loss-during-static-analysis-of-javascript",
      "PersonsString": "Alexander Jordan",
      "Title": "What Went Wrong? Automatic Triage of Precision Loss During Static Analysis of JavaScript",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/jstools-2016-what-went-wrong-automatic-triage-of-precision-loss-during-static-analysis-of-javascript"
    },
    {
      "Abstract": "",
      "Affiliations": ["Google Inc."],
      "AffiliationsString": "Google Inc.",
      "Authors": ["markmiller"],
      "Key": "jstools-2016-frozen-realms-confining-effects-for-safer-javascript-plugins",
      "PersonsString": "Mark Miller",
      "Title": "Invited Talk - Frozen Realms: Confining effects for safer JavaScript plugins",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/jstools-2016-frozen-realms-confining-effects-for-safer-javascript-plugins"
    },
    {
      "Abstract": "",
      "Affiliations": ["Vrije Universiteit Brussel"],
      "AffiliationsString": "Vrije Universiteit Brussel",
      "Authors": ["nathalieoostvogels"],
      "Key": "jstools-2016-verification-of-communication-in-web-applications",
      "PersonsString": "Nathalie Oostvogels",
      "Title": "Verification of Communication in Web Applications",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/jstools-2016-verification-of-communication-in-web-applications"
    },
    {
      "Abstract": "",
      "Affiliations": ["Independent Consultant"],
      "AffiliationsString": "Independent Consultant",
      "Authors": ["carllerche"],
      "Key": "pmldc-2016-we-are-all-distributed-system-engineers",
      "PersonsString": "Carl Lerche",
      "Title": " We Are All Distributed System Engineers",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-we-are-all-distributed-system-engineers"
    },
    {
      "Abstract": "VeriFast is a verification tool for single- and multi-threaded C and Java programs annotated with preconditions and postconditions written in separation logic. To enable rich specifications, the programmer may define inductive datatypes, primitive recursive pure functions over these datatypes, and abstract separation logic predicates. To enable verification of these rich specifications, the programmer may write lemma functions, i.e., functions that serve only as proofs that their precondition implies their postcondition. The verifier checks that lemma functions terminate and do not have side-effects. Since neither VeriFast itself nor the underlying SMT solver need to do any significant search, verification time is predictable and low. VeriFast comes with an IDE that enables interactive annotation insertion and symbolic debugging.\nSo far, we have used VeriFast to experiment with novel approaches for modular specification and verification of functional correctness of fine-grained concurrent algorithms [POPL 2011], memory-safety of programs that dynamically load and unload modules [FM 2011], the interactive behavior of programs that use APIs like stdio.h or java.io [ESOP 2015], termination of programs involving dynamically bound method calls [ECOOP 2015], and deadlock-freedom of programs where threads wait for other threads in the presence of exceptions [FTfJP 2015]. Furthermore, we have used VeriFast to verify crash-freedom of Java Card software for the Belgian eID card, a Linux device driver, a C program routing packets in a home gateway, and functional correctness of the complex Multiple-Compare-and-Swap lock-free concurrent algorithm, and to participate in verification competitions, winning at VerifyThis 2012 and 2016.\nVeriFast is available for download at https://people.cs.kuleuven.be/~bart.jacobs/verifast/.",
      "Affiliations": ["iMinds - Distrinet, KU Leuven"],
      "AffiliationsString": "iMinds - Distrinet, KU Leuven",
      "Authors": ["bartjacobs"],
      "Key": "ftfjp-2016-tool-demonstration-the-verifast-verification-system-for-java-and-c",
      "PersonsString": "Bart Jacobs",
      "Title": "Tool Demonstration: The VeriFast Verification System for Java and C",
      "Type": "Demonstration",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-tool-demonstration-the-verifast-verification-system-for-java-and-c"
    },
    {
      "Abstract": "This article introduces ATAB, a tool that automatically generates pairwise reachability checks for action trees. Ac- tion trees can be used to study the behaviour of real-world concurrent programs. ATAB encodes pairwise reachability checks into alternating tree automata (ATA) that determine whether an action tree has a schedule where any pair of given points in the program are simultaneously reachable. Because the pairwise reachability problem is undecidable in general ATAB operates under a restricted form of lock-based concurrency. ATAB produces ATA that are more compact and more efficiently checkable than those that have been previously used. The process is entirely automated, which simplifies the process of encoding checks for more complex action trees. The ATA produced are easier to scale to large numbers of locks than previous constructions.",
      "Affiliations": [
        "Royal Holloway University of London",
        "Royal Holloway University of London"
      ],
      "AffiliationsString": "Royal Holloway University of London",
      "Authors": [
        "jonathanhoyland",
        "matthewhague"
      ],
      "Key": "ftfjp-2016-generating-concurrency-checks-automatically",
      "PersonsString": "Jonathan Hoyland and Matthew Hague",
      "Title": "Generating Concurrency Checks Automatically",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-generating-concurrency-checks-automatically"
    },
    {
      "Abstract": "",
      "Affiliations": ["Karlsruhe Institute of Technology"],
      "AffiliationsString": "Karlsruhe Institute of Technology",
      "Authors": ["vladimirklebanov"],
      "Key": "ftfjp-2016-opening",
      "PersonsString": "Vladimir Klebanov",
      "Title": "Opening",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-opening"
    },
    {
      "Abstract": "",
      "Affiliations": ["Instituto Superior Técnico, University of Lisboa & INESC-ID"],
      "AffiliationsString": "Instituto Superior Técnico, University of Lisboa & INESC-ID",
      "Authors": ["rodrigorodrigues"],
      "Key": "pmldc-2016-the-consistency-babel",
      "PersonsString": "Rodrigo Rodrigues",
      "Title": " The Consistency Babel",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-the-consistency-babel"
    },
    {
      "Abstract": "Context-oriented programming (COP) is an approach to modularity for applications whose behavior may vary depending on the status of the environment in which they execute and the software\u2019s own state. Languages supporting COP provide partial methods to modularly define behavioral variations of methods specific to a context, layers to group the partial methods and layer activation mechanisms to dynamically compose layers. Because the behavior of these partial methods often differs from that of the base methods they override, reasoning about context-oriented programs seems to require a case analysis based on partial methods and context information from the entire program, which is not scalable. In this paper we explain a new language feature, layer interfaces, which allows modular specification and verification of context-oriented programs. We demonstrate these techniques by using examples.",
      "Affiliations": [
        "Tokyo Institute of Technology, Japan",
        "Central Florida University"
      ],
      "AffiliationsString": "Tokyo Institute of Technology, Japan, Central Florida University",
      "Authors": [
        "tomoyukiaotani",
        "garyleavens"
      ],
      "Key": "ftfjp-2016-towards-modular-reasoning-for-context-oriented-programs",
      "PersonsString": "Tomoyuki Aotani and Gary Leavens",
      "Title": "Towards Modular Reasoning for Context-Oriented Programs",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-towards-modular-reasoning-for-context-oriented-programs"
    },
    {
      "Abstract": "Updating running programs is a well-researched and increasingly popular feature of programming language implementations. While there are solutions targeting specific languages and platforms, implementing dynamic update for new languages can require significant effort. We have built TruffleReloader, a reusable dynamic updating solution, on top of the Truffle language implementation framework, and adapted the Truffle implementations of Python, Ruby and JavaScript to use this feature. We show how TruffleReloader adds reloading capabilities to these implementations requiring limited language-specific modifications. With Truffle\u2019s just-in-time compiler enabled, our solution incurs close to zero overhead on steady-state performance. This approach reduces the effort required to add dynamic update support for existing and future languages.",
      "Affiliations": [
        "ZeroTurnaround / University of Tartu",
        "ZeroTurnaround",
        "University of Tartu"
      ],
      "AffiliationsString": "ZeroTurnaround / University of Tartu, ZeroTurnaround, University of Tartu",
      "Authors": [
        "tonispool",
        "allanraundahlgregersen",
        "vesalvojdani"
      ],
      "Key": "icooolps-2016-trufflereloader-a-low-overhead-language-neutral-reloader",
      "PersonsString": "Tõnis Pool, Allan Raundahl Gregersen and Vesal Vojdani",
      "Title": "TruffleReloader: A Low-Overhead Language-Neutral Reloader",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-trufflereloader-a-low-overhead-language-neutral-reloader"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Indiana University",
        "Indiana University"
      ],
      "AffiliationsString": "Indiana University",
      "Authors": [
        "matteocimini",
        "jeremysiek"
      ],
      "Key": "pmldc-2016-fractional-permissions-for-race-free-mutable-references-in-a-dataflow-intermediate-language",
      "PersonsString": "Matteo Cimini and Jeremy Siek",
      "Title": "Fractional Permissions for Race-Free Mutable References in a Dataflow Intermediate Language",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-fractional-permissions-for-race-free-mutable-references-in-a-dataflow-intermediate-language"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "robertocasadei",
        "mirkoviroli"
      ],
      "Key": "pmldc-2016-towards-aggregate-programming-in-scala",
      "PersonsString": "Roberto Casadei and Mirko Viroli",
      "Title": " Towards Aggregate Programming in Scala",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-towards-aggregate-programming-in-scala"
    },
    {
      "Abstract": "We investigate how to represent objects when JavaScript is used as a compilation target.This is an interesting question because JavaScript is the object language of choice for compiler writers who wish to \u201dthe Internet\u201c, and because JavaScript offers many ways to say the same thing. \nWe looked at three axes of variability: whether an object\u2019s methods are stored in the object itself, or in a prototype; whether the object uses Javascript\u2019s closures or builds its own, and whether an object\u2019s fields are accessed directly or via accessor methods.The results reveal that certain variations are more than a hundred times faster than others. We conclude that the particular choices we make may be critical.",
      "Affiliations": [
        "Portland State University",
        "Portland State University"
      ],
      "AffiliationsString": "Portland State University",
      "Authors": [
        "forrestalexander",
        "andrewblack"
      ],
      "Key": "icooolps-2016-the-performance-of-object-encodings-in-javascript",
      "PersonsString": "Forrest Alexander and Andrew Black",
      "Title": "The Performance of Object Encodings in JavaScript",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-the-performance-of-object-encodings-in-javascript"
    },
    {
      "Abstract": "A method handle (MH) is a reference to an underlying Java method with potential method type transformations. Multiple interconnected method handles form a method handle graph (MHG). Together with the Java Virtual Machine (JVM) instruction, invokedynamic, the implementation of MHGs is significant to dynamically typed language implementations on the JVM. Addressing the abundance of equivalent MHGs during program runtime, this paper presents an MHG equivalence model and an online Method Handle Deduplication System (MHDeS). The equivalence model determines the equivalence of two MHGs in terms of two kinds of keys, i.e., MH key and MHG key, which uniquely identify the transformation of an MH and an MHG, respectively. MHDeS is an implementation of the equivalence model. Instead of creating equivalent MHGs and then detecting their equivalency, MHDeS employs a light-weight structure, the MHG index key, which wraps constructor parameters of an MH. MHDeS uses a transformation index, fast-path comparison, and filters, to speed up the equivalency detection of an MHG index key. Our experimental results with the Computer Language Benchmark Game (CLBG) JRuby micro-indy show that 1) MHDeS with filter off can speed up the benchmark by 4.67% and reduces memory usage by 7.19% on average; 2) the deduplication result can be affected by the choice of MH transformations for filtering; 3) MHDeS can have the MH JIT compilation performed earlier; and 4) as much as 32% of MHG index keys are detected as non-unique and eliminated by MHDeS, and the expense for a single detection is trivial.",
      "Affiliations": [
        "University of New Brunswick",
        "University of New Brunswick",
        "IBM"
      ],
      "AffiliationsString": "University of New Brunswick, IBM",
      "Authors": [
        "shijiexu",
        "davidbremner",
        "danielheidinga"
      ],
      "Key": "icooolps-2016-mhdes-deduplicate-method-handle-graph-for-efficient-dynamic-jvm-language-implementations",
      "PersonsString": "Shijie Xu, David Bremner and Daniel Heidinga",
      "Title": "MHDeS: Deduplicate Method Handle Graph for Efficient Dynamic JVM Language Implementations",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-mhdes-deduplicate-method-handle-graph-for-efficient-dynamic-jvm-language-implementations"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "The University of Texas at Austin",
        "University of Texas, Austin",
        "UT Austin"
      ],
      "AffiliationsString": "The University of Texas at Austin, University of Texas, Austin, UT Austin",
      "Authors": [
        "johnthywissen",
        "arthurpeters",
        "williamcook"
      ],
      "Key": "pmldc-2016-implicitly-distributing-pervasively-concurrent-programs",
      "PersonsString": "John A. Thywissen, Arthur Peters and William Cook",
      "Title": " Implicitly Distributing Pervasively Concurrent Programs",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-implicitly-distributing-pervasively-concurrent-programs"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Ulm University, Germany ",
        "",
        ""
      ],
      "AffiliationsString": "Ulm University, Germany , ",
      "Authors": [
        "benjaminerb",
        "gerhardhabiger",
        "franzjhauck"
      ],
      "Key": "pmldc-2016-on-the-potential-of-event-sourcing-for-retroactive-actor-based-programming",
      "PersonsString": "Benjamin Erb, Gerhard Habiger and Franz J. Hauck",
      "Title": " On the Potential of Event Sourcing for Retroactive Actor-based Programming",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-on-the-potential-of-event-sourcing-for-retroactive-actor-based-programming"
    },
    {
      "Abstract": "This paper presents a technique for assembling Smalltalk programs out of pieces using propositional Horn clauses. The technique allows the dependencies and restrictions of a piece to be stated inside the piece or outside, allowing components from other dialects to be used. The technique is applicable to any OO language allowing class extensions.",
      "Affiliations": ["Computer Science, University of Otago"],
      "AffiliationsString": "Computer Science, University of Otago",
      "Authors": ["richardokeefe"],
      "Key": "icooolps-2016-building-object-oriented-programs-out-of-pieces",
      "PersonsString": "Richard O'Keefe",
      "Title": "Building Object-Oriented Programs out of Pieces",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-building-object-oriented-programs-out-of-pieces"
    },
    {
      "Abstract": "Many dynamic program analysis (DPA) tools for profiling, debugging, and monitoring programs executing on managed platforms such as the Java Virtual Machine (JVM) rely on bytecode instrumentation (sometimes combined with agents utilizing the JVM Tool Interface and native code libraries) to observe the base program behavior. While this is both the recommended and preferred technique for implementing DPA tools, it has certain noticeable drawbacks.\nOne, the analysis runs in the same process as the base program, and often shares the Java Class Library (JCL) and other resources with the base program. This creates potential for interference that may result in deadlocks, or state corruption in code that does not expect reentrancy. Two, certain parts of the JCL are typically off-limits for instrumentation, because they either play a vital role during the JVM bootstrap, or the JVM implementation makes certain assumptions about properties of specific classes, or both. These two issues are typically solved by reducing the scope of the instrumentation, leading to under-approximation of the program\u2019s behavior.\nAnd three, bytecode instrumentation only allows observig base program events at the bytecode level. The instrumentation code remains oblivious to optimizations performed by the dynamic compiler, and conversely, the compiler is completely unaware of the presence of the instrumentation code. Because the instrumentation code may significantly inflate the base program code and create additional data dependencies as a result of observing the program\u2019s behavior, various optimizations performed by the dynamic compiler (e.g., inlining, partial escape analysis, code motion) will be perturbed by the presence of the instrumentation code. As a result, the dynamic analysis may observe events that would not have happened in the base program had it been left alone, thus over-approximating the actual behavior.\nIn this talk, we will discuss some of the challenges in making the JVM more observable for instrumentation-based DPA tools, with specific focus on getting accurate profiling information in presence of an optimizing dynamic compiler.",
      "Affiliations": ["Charles University"],
      "AffiliationsString": "Charles University",
      "Authors": ["lubomirbulej"],
      "Key": "icooolps-2016-invited-talk-1-tba-",
      "PersonsString": "Lubomír Bulej",
      "Title": "Beneath the Bytecode: Observing the JVM at Work Using Bytecode Instrumentation",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-invited-talk-1-tba-"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "KTH Royal Institute of Technology, Sweden",
        "",
        ""
      ],
      "AffiliationsString": "KTH Royal Institute of Technology, Sweden, ",
      "Authors": [
        "larskroll",
        "jimdowling",
        "seifharidi"
      ],
      "Key": "pmldc-2016-static-type-checking-for-the-kompics-component-model-kola-the-kompics-language",
      "PersonsString": "Lars Kroll, Jim Dowling and Seif Haridi",
      "Title": "Static Type Checking for the Kompics Component Model -- Kola - The Kompics Language",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-static-type-checking-for-the-kompics-component-model-kola-the-kompics-language"
    },
    {
      "Abstract": "Static Single Assignment (SSA) intermediate representation is widely used to optimize and compile code in imperative and object-oriented languages, but it can also be useful for static type analysis. We introduce FJSSA , a Java-like imperative calculus supporting programs in SSA form; we define its big-step operational semantics, and a judgment to statically check whether a program is in SSA form, and prove its soundness. FJSSA provides a formal basis for type analysis of programs in SSA form in object-oriented languages.",
      "Affiliations": [
        "University of Genova",
        ""
      ],
      "AffiliationsString": "University of Genova, ",
      "Authors": [
        "davideancona",
        "andreacorradi"
      ],
      "Key": "ftfjp-2016-a-formal-account-of-ssa-in-java-like-languages",
      "PersonsString": "Davide Ancona and Andrea Corradi",
      "Title": "A formal account of SSA in Java-like languages",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-a-formal-account-of-ssa-in-java-like-languages"
    },
    {
      "Abstract": "Miller\u2019s notions of permissions and authority are foundational to the analysis of object-capability programming. Informal definitions of these concepts were given in Miller\u2019s thesis. In this paper we propose precise definitions for permissions and authority, based on a small object-oriented calculus. We quantify their bounds (current, eventual, behavioural, topological), and delineate the relationships between these definitions.",
      "Affiliations": [
        "Imperial College London",
        "Victoria University of Wellington",
        "Google Inc.",
        "University of Melbourne"
      ],
      "AffiliationsString": "Imperial College London, Victoria University of Wellington, Google Inc., University of Melbourne",
      "Authors": [
        "sophiadrossopoulou",
        "jamesnoble",
        "markmiller",
        "tobymurray"
      ],
      "Key": "ftfjp-2016-permission-and-authority-revisited-towards-a-formalization",
      "PersonsString": "Sophia Drossopoulou, James Noble, Mark Miller and Toby Murray",
      "Title": "Permission and Authority Revisited: Towards a Formalization",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-permission-and-authority-revisited-towards-a-formalization"
    },
    {
      "Abstract": "Modern multicore processor architectures and compilers of shared-memory concurrent programming languages provide only weak memory consistency guarantees. A memory model specifies which write action can be seen by a read action between concurrent threads. The most well known memory model is the sequentially consistent (SC) model but, to improve performance, modern architectures and languages employ relaxed memory models where a read may not see the most recent write that has been performed by other threads. These models come in different formalization styles (axiomatic, operational) and have their own advantages and disadvantages.\nIn a POPL\u201913 paper, Demange et al [12], proposed an alternative style that is fully characterized in terms of the reorderings it allows. This Buffered Memory Model (BMM) targets the Java programming language. It is strictly less relaxed than the Java Memory Model. It is shown equivalent to an operational model but is restricted to TSO relaxations.\nThis paper extends the BMM in order to allows more reorderings. We present the new set of memory event reorderings rules that fully characterize the model and an alternative operational model that is again shown equivalent.",
      "Affiliations": [
        "",
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "gurvancabon",
        "davidcachera",
        "davidpichardie"
      ],
      "Key": "ftfjp-2016-an-extended-buffered-memory-model-with-full-reorderings",
      "PersonsString": "Gurvan Cabon, David Cachera and David Pichardie",
      "Title": "An Extended Buffered Memory Model With Full Reorderings",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-an-extended-buffered-memory-model-with-full-reorderings"
    },
    {
      "Abstract": "We describe our partial solutions, using our VeriFast separation-logic based tool for modular formal verification of C and Java programs, to Challenges 2 and 3 of the VerifyThis 2016 Verification Competition, involving the verification of crash-freedom and certain correctness properties of code fragments implementing constant-space tree traversal and a tree barrier.",
      "Affiliations": ["iMinds - Distrinet, KU Leuven"],
      "AffiliationsString": "iMinds - Distrinet, KU Leuven",
      "Authors": ["bartjacobs"],
      "Key": "ftfjp-2016-partial-solutions-to-verifythis-2016-challenges-2-and-3-using-verifast",
      "PersonsString": "Bart Jacobs",
      "Title": "Partial Solutions to VerifyThis 2016 Challenges 2 and 3 Using VeriFast",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-partial-solutions-to-verifythis-2016-challenges-2-and-3-using-verifast"
    },
    {
      "Abstract": "Difference propagation is an algorithm widely used in points-to and alias analysis. To the best of our knowledge, the soundness of the version of the algorithm used for the static analysis of Java programs has not yet been proven. An attempt to do this yields a surprise: when the algorithm is used to compute field sensitive points-to for Java programs, soundness cannot be guaranteed when self-loads (statements of the kind x=x.f) are present. We discuss such a scenario and suggest a modification of the algorithm that is sufficient to prove soundness.",
      "Affiliations": [
        "Massey University, New Zealand",
        "The University of Sydney",
        "University of Sydney, Australia"
      ],
      "AffiliationsString": "Massey University, New Zealand, The University of Sydney, University of Sydney, Australia",
      "Authors": [
        "jensdietrich",
        "nicholashollingum",
        "bernhardscholz1"
      ],
      "Key": "ftfjp-2016-a-note-on-the-soundness-of-difference-propagation",
      "PersonsString": "Jens Dietrich, Nicholas Hollingum and Bernhard Scholz",
      "Title": "A Note on the Soundness of Difference Propagation",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-a-note-on-the-soundness-of-difference-propagation"
    },
    {
      "Abstract": "Although not the most popular feature of Java\u2019s generics, bounded wildcards have their uses. On the negative side, bounded wildcards render type checking undecidable. On the positive side, bounded wildcards let us encode any computation at compile time; so, Java\u2019s type checker can recognize any recursive language.\nThe first part of the talk will review how bounded wildcards are used in the implementation of Java\u2019s standard library. The second part of the talk will review the proof that bounded wildcards render subtype checking undecidable. The third part of the talk will discuss a parser generator for fluent interfaces, which employs Java\u2019s type checker as an interpreter for CYK parsers.",
      "Affiliations": ["University of Oxford"],
      "AffiliationsString": "University of Oxford",
      "Authors": ["radugrigore"],
      "Key": "ftfjp-2016-java-generics-are-turing-complete",
      "PersonsString": "Radu Grigore",
      "Title": "Java Generics are Turing Complete",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-java-generics-are-turing-complete"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["zachtellman"],
      "Key": "pmldc-2016-tracking-the-elephants-in-the-system",
      "PersonsString": "Zach Tellman",
      "Title": " Tracking the Elephants in the System",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-tracking-the-elephants-in-the-system"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "pmldc-2016-opening-remark",
      "PersonsString": "",
      "Title": "Opening Remarks",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-opening-remark"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "University of California, Irvine",
        "",
        ""
      ],
      "AffiliationsString": "University of California, Irvine, ",
      "Authors": [
        "cristalopes",
        "rohanachar",
        "arthurvaladares"
      ],
      "Key": "pmldc-2016-building-distributed-applications-with-data-and-time-frames",
      "PersonsString": "Crista Lopes, Rohan Achar and Arthur Valadares",
      "Title": " Building Distributed Applications with Data and Time Frames",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-building-distributed-applications-with-data-and-time-frames"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "",
        "",
        "HASLab/INESC TEC & University of Minho"
      ],
      "AffiliationsString": ", HASLab/INESC TEC & University of Minho",
      "Authors": [
        "vitorenes",
        "carlosbaquero",
        "paulosergioalmeida",
        "alishoker"
      ],
      "Key": "pmldc-2016-join-decompositions-for-efficient-synchronization-of-crdts-after-a-network-partition",
      "PersonsString": "Vitor Enes, Carlos Baquero, Paulo Sérgio Almeida and Ali Shoker",
      "Title": "Join Decompositions for Efficient Synchronization of CRDTs after a Network Partition",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-join-decompositions-for-efficient-synchronization-of-crdts-after-a-network-partition"
    },
    {
      "Abstract": "Structural type systems provide an interesting alternative to the more common nominal typing scheme. Several existing languages employ structural types in some form, including Modula-3, Scala and various extensions proposed for Java. However, formalising a recursive structural type system is challenging. In particular, the need to use structural coinduction remains a hindrance for many. We formalise in Agda a simple recursive and structural type system with products and unions. Agda proves useful here because it has explicit support for coinduction and will raise an error if this is misused. The implementation distinguishes between inductively and coinductively defined types: the former corresponds to a finite representation, such as found in source code or the internals of a compiler, while the latter corresponds to a mathematical ideal with which we can coinductively define relations and proofs that are easily applied back to the inductive interpretation. As an application of this, we provide a mechanised proof of subtyping soundness against a semantic embedding of the types into Agda.",
      "Affiliations": [
        "Victoria University of Wellington",
        "Victoria University of Wellington"
      ],
      "AffiliationsString": "Victoria University of Wellington",
      "Authors": [
        "timothyjones",
        "davidpearce"
      ],
      "Key": "ftfjp-2016-a-mechanical-soundness-proof-for-subtyping-over-recursive-types",
      "PersonsString": "Timothy Jones and David Pearce",
      "Title": "A Mechanical Soundness Proof for Subtyping Over Recursive Types",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-a-mechanical-soundness-proof-for-subtyping-over-recursive-types"
    },
    {
      "Abstract": "For the last decade, the Java Virtual Machine (JVM) has been a popular platform to host languages other than Java. Language implementation frameworks like Truffle allow the implementation of dynamic languages such as JavaScript or Ruby with competitive performance and completeness. However, statically typed languages are still rare under Truffle. We present Sulong, an LLVM IR interpreter that brings all LLVM-based languages including C, C++, and Fortran in one stroke to the JVM. Executing these languages on the JVM enables a wide area of future research, including high- performance interoperability between high-level and low- level languages, combination of static and dynamic optimizations, and a memory-safe execution of otherwise unsafe and unmanaged languages.",
      "Affiliations": [
        "Johannes Kepler University, Linz, Austria",
        "Johannes Kepler University Linz",
        "Johannes Kepler University Linz"
      ],
      "AffiliationsString": "Johannes Kepler University, Linz, Austria, Johannes Kepler University Linz",
      "Authors": [
        "manuelrigger",
        "matthiasgrimmer",
        "hanspetermossenbock"
      ],
      "Key": "icooolps-2016-sulong-execution-of-llvm-based-languages-on-the-jvm",
      "PersonsString": "Manuel Rigger, Matthias Grimmer and Hanspeter Mössenböck",
      "Title": "Sulong - Execution of LLVM-Based Languages on the JVM",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-sulong-execution-of-llvm-based-languages-on-the-jvm"
    },
    {
      "Abstract": "Applications employing the actor model of concurrent computation are becoming popular nowadays. On the one hand, the foundational characteristics of the actor model make it attractive in parallel and distributed settings. On the other hand, effective investigation of poor performance in actor-based applications requires dedicated metrics and profiling methods. Unfortunately, little research has been conducted on this topic to date, and developers are forced to investigate suboptimal performance with general-purpose profilers that fall short in locating scalability bottlenecks and performance inefficiencies. This position paper advocates the need for dedicated profiling techniques and tools for actor-based applications, focusing specifically on inter-actor communication and actor utilization. Our preliminary results support the importance of dedicated actor profiling and motivate further research on this topic.",
      "Affiliations": [
        "Università della Svizzera italiana",
        "IBM Research Lab Zurich",
        "University of Lugano"
      ],
      "AffiliationsString": "Università della Svizzera italiana, IBM Research Lab Zurich, University of Lugano",
      "Authors": [
        "andrearosa",
        "lydiaychen",
        "walterbinder"
      ],
      "Key": "icooolps-2016-efficient-profiling-of-actor-based-applications-in-parallel-and-distributed-systems",
      "PersonsString": "Andrea Rosà, Lydia Y. Chen and Walter Binder",
      "Title": "Efficient Profiling of Actor-based Applications in Parallel and Distributed Systems",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-efficient-profiling-of-actor-based-applications-in-parallel-and-distributed-systems"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Università della Svizzera italiana",
        "Universita della Svizzera italiana (USI)"
      ],
      "AffiliationsString": "Università della Svizzera italiana, Universita della Svizzera italiana (USI)",
      "Authors": [
        "nosheenzaza",
        "nathanielnystrom"
      ],
      "Key": "pmldc-2016-data-centric-consistency-policies-a-programming-model-for-distributed-applications-with-tunable-consistency",
      "PersonsString": "Nosheen Zaza and Nathaniel Nystrom",
      "Title": "Data-centric Consistency Policies: A Programming Model for Distributed Applications with Tunable Consistency",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-data-centric-consistency-policies-a-programming-model-for-distributed-applications-with-tunable-consistency"
    },
    {
      "Abstract": "We propose an alternative to the usual try-catch construct, where catch clauses are coupled with the declaration of a local variable, rather than with an arbitrary expression. That is, in case initialization of the local variable fails, they provide an alternative computation which does not depend on such variable. This alternative mechanism subsumes the standard one and allows a more natural and functional programming style. We illustrate such advantages by some paradigmatic examples. The proposal is formalized as an extension of Featherweight Java (FJ) with a type system which can be proved to be sound.",
      "Affiliations": [
        "",
        "Victoria University of Wellington",
        "University of Genova"
      ],
      "AffiliationsString": ", Victoria University of Wellington, University of Genova",
      "Authors": [
        "paolagiannini",
        "marcoservetto",
        "elenazucca"
      ],
      "Key": "ftfjp-2016-coupling-catch-clauses-with-local-declarations",
      "PersonsString": "Paola Giannini, Marco Servetto and Elena Zucca",
      "Title": "Coupling Catch Clauses with Local Declarations",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-coupling-catch-clauses-with-local-declarations"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "HASLab/INESC TEC & University of Minho",
        "",
        ""
      ],
      "AffiliationsString": ", HASLab/INESC TEC & University of Minho",
      "Authors": [
        "georgesyounes",
        "alishoker",
        "paulosergioalmeida",
        "carlosbaquero"
      ],
      "Key": "pmldc-2016-integration-challenges-of-pure-operation-based-crdts-in-redis",
      "PersonsString": "Georges Younes, Ali Shoker, Paulo Sérgio Almeida and Carlos Baquero",
      "Title": " Integration Challenges of Pure Operation-based CRDTs in Redis",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/pmldc-2016-integration-challenges-of-pure-operation-based-crdts-in-redis"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icooolps-2016-discussions-and-wrap-up",
      "PersonsString": "",
      "Title": "Discussions and Wrap Up",
      "Type": "Day closing",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-discussions-and-wrap-up"
    },
    {
      "Abstract": "Static analysis is a popular method to find bugs. In context-sensitive static analysis the analyzer considers the calling context when evaluating a function call. This approach makes it possible to find bugs that span across multiple functions. In order to find those issues the analyzer engine requires information about both the calling context and the callee. Unfortunately the implementation of the callee might only be available in a separate translation unit or module. In these scenarios the analyzer either makes some assumptions about the behavior of the callee (which may be unsound) or conservatively creates a program state that marks every value that might be affected by this function call. In this case the marked value becomes unknown which implies significant loss of precision.\nIn order to mitigate this overapproximation a common approach is to assign a summary to some of the functions, and each time the implementation is not available, use the summary to analyze the effect of the function call. These summaries are in fact approximations of the function implementations that can be used to model some behavior of the called functions in a given context. The most proper way to represent summaries, however, remains an open question.\nThis paper describes a method of representing C/C++ functions\u2019 summaries in the same language. We evaluate the advantages and disadvantages of this approach. It is challenging to use source language representation efficiently due to the compilation model of C/C++. We propose an efficient solution. The emphasis of the paper is on using static analysis to find errors in the programs, however the same approach can be used to optimize programs or any other tasks that static analysis is capable of. Our proof of concept implementation is available in the upstream version of the Clang compiler.",
      "Affiliations": [
        "Eötvös Loránd University, Faculty of Informatics, Department of Programming Languages and Compilers",
        "Eötvös Loránd University, Faculty of Informatics, Department of Programming Languages and Compilers"
      ],
      "AffiliationsString": "Eötvös Loránd University, Faculty of Informatics, Department of Programming Languages and Compilers",
      "Authors": [
        "gaborhorvath",
        "norbertpataki"
      ],
      "Key": "icooolps-2016-source-language-representation-of-function-summaries-in-static-analysis",
      "PersonsString": "Gábor Horváth and Norbert Pataki",
      "Title": "Source Language Representation of Function Summaries in Static Analysis",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-source-language-representation-of-function-summaries-in-static-analysis"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icooolps-2016-discussions",
      "PersonsString": "",
      "Title": "Discussions",
      "Type": "Other",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-discussions"
    },
    {
      "Abstract": "In many object-oriented languages, for two objects to communicate at least one of them must have a reference to the other object, or transitively, a reference to an object that has a reference to the other object. In graph terms, if objects are nodes and an object reference is a directed edge then two object can communicate if and only if at least one of them can reach the other via a directed path in the object graph. Thus two objects that are NOT in the same connected subset of the graph can never communicate because they cannot obtain a reference to one another. In the Internet of Things, IoT, this can be a problem because we may want objects to communicate merely because they are physically close to one another, for example, when a user walks into a building, apps on the user\u2019s mobile phone may want to communicate with local services. In the object oriented world, objects in the app and in the local services cannot communicate\u2014there is no way for them to get to know each other.\nWe have proposed and implemented a mechanism that enables objects to get to know each other, e.g., if they both are interested, a reference from one to another can be created. We call our new mechanism docking. With this docking connection, objects in disjunct subsets of the object graph can obtain reference to one another.\nOur mechanism is that a thread executing in an object, A, can state that it wants to know new objects of a particular type. If another object, B, that conforms to this type arrives at the node where A resides, our docking mechanism allows a reference to be created from one to the other.\nThis demo will show an implementation in the object oriented language Emerald running on Android-based mobile phones.",
      "Affiliations": [
        "University of Oslo",
        "Alcatel-Lucent Bell Labs"
      ],
      "AffiliationsString": "University of Oslo, Alcatel-Lucent Bell Labs",
      "Authors": [
        "magnushaugomchristensen",
        "ericjul"
      ],
      "Key": "icooolps-2016-demo-of-docking-enabling-language-based-dynamic-coupling",
      "PersonsString": "Magnus Haugom Christensen and Eric Jul",
      "Title": "Demo of Docking: Enabling Language Based Dynamic Coupling",
      "Type": "Demonstration",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-demo-of-docking-enabling-language-based-dynamic-coupling"
    },
    {
      "Abstract": "Abstract grammars are neglected resources in language processor implementations. In the most favourable case they are used to format first-class program representations. In the worst case they serve as a temporary interface between compiler phases. But they can enable so much more \u2026 certainly in teaching.\nIn this presentation we report on a long-running experiment (&gt;5 y.) to develop a language interpreter that is maximally supported by an extensible (abstract) grammar. The context of the experiment is an advanced course on Programming Language Engineering. The reference language is a simplified variation on Scheme, so: no objects in this story.\nIn this course abstract grammars serve as backbone for material ranging from formal language specifications to low-level implementation with an eye for optimisation. In order to do so, we require that an instance of an abstract grammar be first class, and that all of its attributes should be setable and getable from within any program that is associated with this instance. Depending on the level of detail at which its semantics are captured in the abstract grammar, this regulates the depth at which the program can reflect over its specification. Nothing new here, this is lisp and s-expressions, only more so.\nA central idea to this notion of a rich abstract grammar, is a unified memory model. At a basic level no distinction is made between stacks, heaps, frames &amp;c. concerning their residence in memory. This of course raises potential performance issues about memory management \u2014 but a sufficiently powerful garbage collector and various caching and inlining tactics go a long way in mitigating this concern. We will consider what it takes to explain memory models and garbage collection at a sufficient level of detail to investigate performance issues. We proceed with s-expressions and grow this in successive steps to describe the various structures employed by a language interpreter. Considering that the eval operation should ultimately map the grammar onto itself, the obvious ones are computational values that do not correspond with literals, such as closures and continuations. But with the introduction of lexical addressing, we should also include frames and environments; and if the interpretation strategy is based on a transformation into continuation passing style (as is the case here), structures resulting from lambda-lifting should be considered. However, the most interesting extensions to the abstract grammar are related to optimisations: tail call optimisation, inlining, prevalent function call patterns, &amp;c.\nThis approach proved to be an interesting setting to expose graduate students to the vagaries low level language processor implementations. But it has also been suitable as a platform for sophisticated experiments with optimisations for language interpreters.",
      "Affiliations": ["Vrije Universiteit Brussel"],
      "AffiliationsString": "Vrije Universiteit Brussel",
      "Authors": ["theodhondt"],
      "Key": "icooolps-2016-invited-talk-2-tba-",
      "PersonsString": "Theo D'Hondt",
      "Title": "Growing an Abstract Grammar: Teaching Language Engineering",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-invited-talk-2-tba-"
    },
    {
      "Abstract": "We face the problem of providing a denotational semantics for corecursive methods with default, a programming feature for manipulating cyclic structures without ad-hoc machinery. To this aim, we study new lattices for which the theorem of Kleene is applicable so that the semantics of a corecursive method with default corresponds to the greatest fixed point computed as the greatest lower bound of a descending chain. The proposed definition allows us to prove correctness of some kinds of corecursive methods. This solution is only partly satisfactory, and a different and more general approach is currently under development.",
      "Affiliations": [
        "University of Genova",
        "",
        "University of Genova"
      ],
      "AffiliationsString": "University of Genova, ",
      "Authors": [
        "davideancona",
        "francescodagnino",
        "elenazucca"
      ],
      "Key": "ftfjp-2016-towards-a-model-of-corecursion-with-default",
      "PersonsString": "Davide Ancona, Francesco Dagnino and Elena Zucca",
      "Title": "Towards a Model of Corecursion with Default",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ftfjp-2016-towards-a-model-of-corecursion-with-default"
    },
    {
      "Abstract": "Virtual Machines (VMs) with Just-In-Time (JIT) compilers are traditionally thought to execute programs in two phases: first the \\emph{warmup} phase determines which parts of a program would most benefit from dynamic compilation; after compilation has occurred the program is said to be at \\emph{peak performance}. When measuring the performance of JIT compiling VMs, data collected during the warmup phase is generally discarded, placing the focus on peak performance. In this paper we run a number of small, deterministic benchmarks on a variety of well known VMs. In our experiment, less than one quarter of the benchmark/VM pairs conform to the traditional notion of warmup, and none of the VMs we tested consistently warms up in the traditional notion. This raises a number of questions about VM benchmarking, which are of interest to both VM authors and end users.",
      "Affiliations": [
        "King's College London",
        "King's College London ",
        "Department of Mathematics and Statistics, University of Lancaster",
        "School of Mathematics, Cardiff University",
        "King's College London",
        "King's College London"
      ],
      "AffiliationsString": "King's College London, King's College London , Department of Mathematics and Statistics, University of Lancaster, School of Mathematics, Cardiff University",
      "Authors": [
        "eddbarrett",
        "carlfriedrichbolz",
        "rebeccakillick",
        "vincentknight",
        "sarahmount",
        "laurietratt"
      ],
      "Key": "icooolps-2016-virtual-machine-warm-up-blows-hot-and-cold",
      "PersonsString": "Edd Barrett, Carl Friedrich Bolz, Rebecca Killick, Vincent Knight, Sarah Mount and Laurence Tratt",
      "Title": "Virtual Machine Warm-up Blows Hot and Cold",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/icooolps-2016-virtual-machine-warm-up-blows-hot-and-cold"
    },
    {
      "Abstract": "We would like to see live programming applied to language development, to get live language development. With live language development, a language developer gets fast feedback when they change their language, enabling experimentation with language design and development.\nIn this paper, we describe what live language development is and why it is useful, and we analyze what is needed to achieve live language development. Moreover, we describe our work in progress in supporting live language development in the Spoofax language workbench.",
      "Affiliations": [
        "TU Delft",
        "TU Delft",
        "Delft University of Technology"
      ],
      "AffiliationsString": "TU Delft, Delft University of Technology",
      "Authors": [
        "gabrielkonat",
        "sebastianerdweg",
        "eelcovisser"
      ],
      "Key": "live-2016-paper-4-title-live-language-development",
      "PersonsString": "Gabriël Konat, Sebastian Erdweg and Eelco Visser",
      "Title": "Towards Live Language Development",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-paper-4-title-live-language-development"
    },
    {
      "Abstract": "We are interested in improving the experience of prototyping and implementing programming languages. In this paper, we outline some ways in which principles from live programming could make the life of the \u201clanguage hacker\u201d easier, and introduce novel visualizations that manifest the normally opaque semantics of parsing and semantic actions. We demonstrate the application of these ideas in the Ohm Editor, a tool we are building to support our new language implementation framework, but we believe they are equally applicable to other language-hacking tools.",
      "Affiliations": [
        "HARC / Y Combinator Research",
        "Communications Design Group / UCLA",
        "Communications Design Group / Y Combinator Research",
        "HARC / Y Combinator Research",
        "HARC / Y Combinator Research"
      ],
      "AffiliationsString": "HARC / Y Combinator Research, Communications Design Group / UCLA, Communications Design Group / Y Combinator Research",
      "Authors": [
        "patrickdubroy",
        "sakethkasibatla",
        "meixianli",
        "markoroder",
        "alessandrowarth"
      ],
      "Key": "live-2016-the-talk",
      "PersonsString": "Patrick Dubroy, Saketh Kasibatla, Meixian Li, Marko Röder and Alessandro Warth",
      "Title": "Language Hacking in a Live Programming Environment",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-the-talk"
    },
    {
      "Abstract": "How will live programming get from our current aspirational demos to use in the real world? Modern professional programming will not change easily: our technology stack is a vast edifice built up over decades to optimize performance and compatibility, not ease of use. It is unlikely we can retrofit live programming into this edifice without substantial redesign and reengineering, which would face immense technical, economic, and cultural challenges. The one way forward we see is to retrace the steps of the original live programming environment: spreadsheets. Spreadsheets help non-programmers solve small-scale problems. If we do likewise, we can offer a fully live and radically simplified programming experience that is actually useful in practice, albeit to non-programmers. Perhaps that could be a launching pad to subsequently address professional programming. As a case in point we demonstrate the Chorus project (previously named Transcript), which focuses on do-it-yourself mobile social apps. By restricting ourselves to small problems and non-professional programmers we can provide a highly integrated programming experience that for the first time incorporates live database programming. We demonstrate our initial progress in order to spark a discussion in the live-programming community about the tradeoffs of researching professional vs. end-user programming.",
      "Affiliations": [
        "CDG Labs",
        "MIT",
        "HARC / Y Combinator Research"
      ],
      "AffiliationsString": "CDG Labs, MIT, HARC / Y Combinator Research",
      "Authors": [
        "jonathanedwards",
        "jodiechen",
        "alessandrowarth"
      ],
      "Key": "live-2016-live-end-user-programming-a-demo-manifesto",
      "PersonsString": "Jonathan Edwards, Jodie Chen and Alessandro Warth",
      "Title": "Live end-user programming: a demo/manifesto",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-live-end-user-programming-a-demo-manifesto"
    },
    {
      "Abstract": "Liveness provides continuous feedback on the relationship between program and output, with the potential to fundamentally change the way we interact with programs. What are some of the UI implications? Here are some questions we might like to think about: \n \n When does it makes sense to manipulate the output and have changes be reflected back to the program? \n How useful is liveness for discrete (non-continuous) domains? Are there any prospects for \u201cdatatype-generic\u201d visualisation? \n Immediate feedback may be undesirable for performance reasons, ergonomic reasons, or both. Are there mechanisms (e.g. granularity control) that speak to this concern? \n Liveness makes the language implementation an inseparable part of the \u201cexperience\u201d. Do we risk being overly dependent on a particular UI? \n Can liveness scale to large programs and datasets? \n Visualising intermediate values can be as important as visualising output. Such values require an execution context to understand. What can be/has been done here? \n Are there formal principles that might inform UI design, or is it all fundamentally subjective? \n\nThis discussion can draw on both examples from the workshop, and prior work in the field.",
      "Affiliations": ["University of {Glasgow, Edinburgh}"],
      "AffiliationsString": "University of {Glasgow, Edinburgh}",
      "Authors": ["rolyperera"],
      "Key": "live-2016-discussion-a",
      "PersonsString": "Roly Perera",
      "Title": "Discuss: New Interfaces for Programming",
      "Type": "Other",
      "URL": "http://2016.ecoop.org/event/live-2016-discussion-a"
    },
    {
      "Abstract": "Live programming aims to create a more fluid feedback loop between the programmer and programmed. Unfortunately, it is not very clear what this feedback does and how it is useful: does it just lead to better debugging, or to something revolutionary? To answer this question, we clarify the experiential design challenges that must be overcome before live programming can emerge as a serious topic.",
      "Affiliations": ["Microsoft Research"],
      "AffiliationsString": "Microsoft Research",
      "Authors": ["seanmcdirmid"],
      "Key": "live-2016-the-promise-of-live-programming",
      "PersonsString": "Sean McDirmid",
      "Title": "The Promise of Live Programming",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-the-promise-of-live-programming"
    },
    {
      "Abstract": "Despite the high caliber of our students, the recurring Programming Language Design Seminar at UCLA did not consistently generate the kind of output we had hoped for. One issue was that students lacked the PL prototyping chops required to do meaningful work in such a short time \u2014 10 weeks fly by when you\u2019re having fun. Last year we created a new class to address this problem. Thanks in part to a novel framework that leverages live programming to minimize unnecessary friction and give students \u201cinstant gratification\u201d when possible, the new class was a great success and turned out to be much more popular than we anticipated. In this talk, I will introduce our framework and show how it helped make the material in our class more accessible to the students.",
      "Affiliations": ["HARC / Y Combinator Research"],
      "AffiliationsString": "HARC / Y Combinator Research",
      "Authors": ["alessandrowarth"],
      "Key": "live-2016-leveraging-live-programming-in-the-classroom-an-experience-report",
      "PersonsString": "Alessandro Warth",
      "Title": "Leveraging live programming in the classroom \u2014 an experience report",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-leveraging-live-programming-in-the-classroom-an-experience-report"
    },
    {
      "Abstract": "To provide a better programming experience, live programming environments allow changes to the code of running programs. These changes are usually made by editing the source code. In this paper, we introduce live programming by example which enables updates to the code by direct manipulation of the program\u2019s user interface. Besides a formal definition of live programming by example, we also present a concrete prototype implementation for JavaScript that enables the programmer to change string literals in the source code by direct manipulation of the HTML output based on a dynamic string origin analysis. While this prototype only supports light-weight synthesis, future live program synthesis algorithms could support a wider range of program edits.",
      "Affiliations": [
        "University of California, Santa Cruz",
        "University of California, Santa Cruz"
      ],
      "AffiliationsString": "University of California, Santa Cruz",
      "Authors": [
        "christopherschuster",
        "cormacflanagan"
      ],
      "Key": "live-2016-live-programming-by-example-using-direct-manipulation-for-live-program-synthesis",
      "PersonsString": "Christopher Schuster and Cormac Flanagan",
      "Title": "Live Programming by Example: Using Direct Manipulation for Live Program Synthesis",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-live-programming-by-example-using-direct-manipulation-for-live-program-synthesis"
    },
    {
      "Abstract": "5 minute lightning talks will be arranged the day of the workshop using Slack. Interested attendees can submit one sentence proposals, which will be voted on if more than 6 talks are submitted. The talk will consist of one slide.",
      "Affiliations": ["CDG Labs"],
      "AffiliationsString": "CDG Labs",
      "Authors": ["jonathanedwards"],
      "Key": "live-2016-discussion-b",
      "PersonsString": "Jonathan Edwards",
      "Title": "Live Lightning Talks",
      "Type": "Other",
      "URL": "http://2016.ecoop.org/event/live-2016-discussion-b"
    },
    {
      "Abstract": "Programming is often a cycle between programming activities and understanding the results of those activities. Hence, modern development environments support many different tools to increase the speed of development, e.g., for refactoring or to visualize variable values or type information in a running program. However, current development environments provide these different tools in various ways, from wizards for refactorings with special preview pages to tooltips and watch views for showing specific information. In this paper, we present code portals as a generic technical concept to enable showing live and continuously updated information about the program and its state. We illustrate code portals on three different types of programming languages, procedural, functional and homoiconic. A qualitative user study shows that code portals and their applications are seen helpful by users. A video demonstration can be found at: https://goo.gl/PumhQR",
      "Affiliations": [
        "Institute of Software Engineering and Compiler Construction",
        "Chalmers University of Technology"
      ],
      "AffiliationsString": "Institute of Software Engineering and Compiler Construction, Chalmers University of Technology",
      "Authors": [
        "alexanderbreckel",
        "matthiastichy"
      ],
      "Key": "live-2016-live-programming-with-code-portals",
      "PersonsString": "Alexander Breckel and Matthias Tichy",
      "Title": "Live Programming with Code Portals",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-live-programming-with-code-portals"
    },
    {
      "Abstract": "Live programming is an emerging topic that so far lacks a an agreed upon definition. Is it just about editing code while it is running, or with live feedback about edits, or is there more to it? To muddy the waters, there are also live coders who expose and rewire the innards of software while it generates improvised music and/or visuals, creating new artistic live experiences. Although a lot of work exists in these topics, it is often difficult to discern their similarities as well as transfer ideas between them given differing goals, seminal influences, and vocabulary. How can we close these gaps to create a more cohesive community around live programming, live coding, and perhaps even Engelbart-style intelligence amplification?",
      "Affiliations": [
        "Microsoft Research",
        "National Institute of Advanced Industrial Science and Technology, Japan"
      ],
      "AffiliationsString": "Microsoft Research, National Institute of Advanced Industrial Science and Technology, Japan",
      "Authors": [
        "seanmcdirmid",
        "junkato"
      ],
      "Key": "live-2016-discussion-c",
      "PersonsString": "Sean McDirmid and Jun Kato",
      "Title": "Discuss: Live Programming, Live Coding, and Intelligence Amplification",
      "Type": "Other",
      "URL": "http://2016.ecoop.org/event/live-2016-discussion-c"
    },
    {
      "Abstract": "Live programming environments improve programmer experience by providing views of program execution which are continuously, and instantaneously updated. In most existing work on liveness, these views are considered part of the IDE: separate windows, panels, or widgets allow programmers to inspect and interact with live data and program execution. In this paper we present \u201clive literals\u201d where the source code itself is used as vehicle for immediate feedback and direct manipulation. Live literals are like ordinary programming language literals, but they are automatically updated after changes to the code. We illustrate the concept of live literals in Javascript using three applications: embedded spreadsheets, live units tests, and probes.",
      "Affiliations": [
        "CWI",
        "Delft University of Technology"
      ],
      "AffiliationsString": "CWI, Delft University of Technology",
      "Authors": [
        "tijsvanderstorm",
        "feliennehermans"
      ],
      "Key": "live-2016-live-literals",
      "PersonsString": "Tijs van der Storm and Felienne Hermans",
      "Title": "Live Literals",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-live-literals"
    },
    {
      "Abstract": "Live Programming allows programmers to gain information about the program continuously during its development. While it has been implemented in various integrated development environments (IDEs) for programmers, its interaction techniques such as slider widgets for continuous parameter tuning are comprehensible for people without any prior knowledge of programming and have been widely used for a long time. In this paper, we aim to introduce prior work on Live Programming research from the interaction point of view and relate it to Human-Computer Interaction research. We then name the subset of Live Programming interaction that only involves changes in constant values \u201cLive Tuning.\u201d Our example IDEs that implement both Live Programming and Live Tuning interactions are showcased, followed by the discussion on the possible future direction of programming experience (PX) research.",
      "Affiliations": [
        "National Institute of Advanced Industrial Science and Technology, Japan",
        "National Institute of Advanced Industrial Science and Technology, Japan"
      ],
      "AffiliationsString": "National Institute of Advanced Industrial Science and Technology, Japan",
      "Authors": [
        "junkato",
        "masatakagoto"
      ],
      "Key": "live-2016-live-tuning-expanding-live-programming-benefits-to-non-programmers",
      "PersonsString": "Jun Kato and Masataka Goto",
      "Title": "Live Tuning: Expanding Live Programming Benefits to Non-Programmers",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-live-tuning-expanding-live-programming-benefits-to-non-programmers"
    },
    {
      "Abstract": "We describe Sintr, a work in progress system that supports live programming for interactive data-analysis at scale. We explain the existing practices of data analysis, motivate why liveness at scale is important, describe a prototype system and reflect on the lessons learnt so far.",
      "Affiliations": [
        "",
        "University of Cambridge",
        "University of Cambridge"
      ],
      "AffiliationsString": ", University of Cambridge",
      "Authors": [
        "lukechurch",
        "marianamarasoiu",
        "alanblackwell"
      ],
      "Key": "live-2016-sintr-experimenting-with-liveness-at-scale",
      "PersonsString": "Luke Church, Mariana Marasoiu and Alan Blackwell",
      "Title": "Sintr: Experimenting with liveness at scale",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-sintr-experimenting-with-liveness-at-scale"
    },
    {
      "Abstract": "We explore the use of liveness for interactive program verification for a simple concurrent object language. Our experimental IDE integrates two (formally dual) kinds of continuous testing into the development environment: compatibility-checking, which verifies an object\u2019s use of other objects, and compliance-checking, which verifies an object\u2019s claim to refine the behaviour of another object. Source code errors highlighted by the IDE are not static type errors but the reflection back to the source of runtime errors that occur in some execution of the system. We demonstrate our approach, and discuss opportunities and challenges.",
      "Affiliations": [
        "University of {Glasgow, Edinburgh}",
        ""
      ],
      "AffiliationsString": "University of {Glasgow, Edinburgh}, ",
      "Authors": [
        "rolyperera",
        "simonjgay"
      ],
      "Key": "live-2016-liveness-for-verification",
      "PersonsString": "Roly Perera and Simon J. Gay",
      "Title": "Liveness for Verification",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/live-2016-liveness-for-verification"
    },
    {
      "Abstract": "The need to analyze massive scientific data sets on the one hand and the availability of distributed compute resources with an increasing number of CPU cores on the other hand have promoted the development of a variety of languages and systems for parallel, distributed data analysis.\nIn this talk we argue that both integrating existing tools and libraries and expressing complex workflows in a functional programming model is a necessity in contemporary languages for distributed computing.\nWe demonstrate the usefulness of these features by the example of Cuneiform, a minimal functional language for large-scale scientific data analysis running on the Erlang VM. We discuss applications in bioinformatics and machine learning.",
      "Affiliations": ["Humboldt-Universität zu Berlin"],
      "AffiliationsString": "Humboldt-Universität zu Berlin",
      "Authors": ["jorgenbrandt"],
      "Key": "curryon-2016-functional-programming-and-foreign-language-interfaces-essentials-in-distributed-computing",
      "PersonsString": "Jörgen Brandt",
      "Title": "Functional Programming and Foreign Language Interfaces: Essentials in Distributed Computing",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-functional-programming-and-foreign-language-interfaces-essentials-in-distributed-computing"
    },
    {
      "Abstract": "Object algebras have very interesting properties and are yet underused for defining embedded DSLs. Object algebras allow the developer to define embedded DSLs in an extensible and modular way: DSLs can be broken down into independent pieces and can have several independent interpretations. Furthermore, with object algebras it is easy to define families of DSLs, that is, DSLs that specialize other DSLs. Finally, the cost of interpretation is cheap because there is no intermediate representation. This talk shows how to design such DSLs in Scala, and exercises the aforementioned features on a practical example: a DSL describing HTTP APIs in which one can derive clients, servers and documentation.",
      "Affiliations": ["Zengularity"],
      "AffiliationsString": "Zengularity",
      "Authors": ["julienrichardfoy"],
      "Key": "curryon-2016-using-object-algebras-to-design-embedded-domain-specific-languages",
      "PersonsString": "Julien Richard-Foy",
      "Title": "Using Object Algebras To Design Embedded Domain Specific Languages",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-using-object-algebras-to-design-embedded-domain-specific-languages"
    },
    {
      "Abstract": "The creation of a programming language calls for guiding principles that point the developers to goals. I spell out the three basic principles behind the 20-year development of Racket. First, programming is about stating and solving problems, and this activity normally takes place in a context with its own language of discourse; good programmers ought to formulate this language as a programming language. Hence, Racket is a programming language for creating new programming languages. Second, by following this language-oriented approach to programming, systems become multi-lingual collections of interconnected components. Each language and component must be able to protect its specific invariants. In support, we offer protection mechanisms to implement a full language spectrum, from C-level bit manipulation to soundly typed extensions. Third, because Racket considers programming as problem solving in the correct language, Racket must also turn extra-linguistic mechanisms into linguistic constructs, especially mechanisms for managing resources and projects. I explains these principles and how Racket lives up to them, presents the evaluation framework behind the design process, and concludes with a sketch of imperfections and opportunities for improvements.\nhtm: http://www.ccs.neu.edu/home/matthias/manifesto/ pdf: http://www.ccs.neu.edu/racket/pubs/#manifesto",
      "Affiliations": ["Northeastern University"],
      "AffiliationsString": "Northeastern University",
      "Authors": ["matthiasfelleisen"],
      "Key": "curryon-2016-the-racket-manifesto",
      "PersonsString": "Matthias Felleisen",
      "Title": "The Racket Manifesto",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-the-racket-manifesto"
    },
    {
      "Abstract": "Having programmers do data science is terrible, if only everyone else were not even worse. The problem is of course tools. We seem to have settled on either: a bunch of disparate libraries thrown into a more or less agnostic IDE, or some point-and-click wonder which no matter how glossy, never seems to truly fit our domain once we get down to it. The dual lisp tradition of grow-your-own-language and grow-your-own-editor gives me hope there is a third way. \nThis talk is a meditation on the ideal environment for doing data science and how to (almost) get there. I will cover how I approach data problems with Clojure (and why Clojure in the first place), what I believe the process of doing data science should look like and the tools needed to get there. Some already exists (or can at least be bodged together); others can be made with relative ease (and we are already working on some of these); but a few will take a lot more hammock time.",
      "Affiliations": ["GoOpti"],
      "AffiliationsString": "GoOpti",
      "Authors": ["simonbelak"],
      "Key": "curryon-2016-doing-data-science-with-clojure-the-ugly-the-sad-the-joyful",
      "PersonsString": "Simon Belak",
      "Title": "Doing data science with Clojure: the ugly, the sad, the joyful",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-doing-data-science-with-clojure-the-ugly-the-sad-the-joyful"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "curryon-2016-catering-poster-session-workshops-reception",
      "PersonsString": "",
      "Title": "Poster Session & Workshops Reception",
      "Type": "Social Event",
      "URL": "http://2016.ecoop.org/event/curryon-2016-catering-poster-session-workshops-reception"
    },
    {
      "Abstract": "Lunch",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "curryon-2016-catering-lunch",
      "PersonsString": "",
      "Title": "Lunch",
      "Type": "Lunch",
      "URL": "http://2016.ecoop.org/event/curryon-2016-catering-lunch"
    },
    {
      "Abstract": "I spent most of my career in academia, working on such topics as denotational semantics and logics of programs. Now I work for Facebook with a team that deploys a program analyser, Infer, based on recent research in program analysis, which itself applied a relatively recent theoretical development in logics of programs, separation logic. In this talk I will talk about our experience deploying this technology, some the challenges we faced, and lessons learned. Most importantly, adapting to Facebook\u2019s fast-paced engineering culture - illustrated by the \u201cMove Fast and Break Things\u201d and similar posters adorning its office walls - has taught me that if verification technology can move fast, in tune with programmers\u2019 workflow, then they will fix more things. This contrasts sharply with the \u201cMove Slow and Break Almost Nothing\u201d attitude to using verification that I learned as an academic. I will also argue that there are ways in which work in program analysis can focus more on the value that can be brought to programmers; for example, I will discuss the merits of \u201cfix rate\u201d as a measure of analysis value, as compared to the more traditional \u201d false positive rate\u201d concept.",
      "Affiliations": ["Facebook"],
      "AffiliationsString": "Facebook",
      "Authors": ["peterohearn"],
      "Key": "curryon-2016-peter-o-hearn",
      "PersonsString": "Peter O'Hearn",
      "Title": "Move Fast to Fix More Things",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-peter-o-hearn"
    },
    {
      "Abstract": "Scala has transformed in a big way when it got macros in early 2013. Very soon after their introduction, macros spread like wildfire, and now they are used in many major libraries in the Scala community. Why such a sudden success? Can macros be useful to your language? Come join us to learn from our experiences and see what we\u2019re planning for future versions of Scala.",
      "Affiliations": ["EPFL"],
      "AffiliationsString": "EPFL",
      "Authors": ["eugeneburmako"],
      "Key": "curryon-2016-to-macros-and-beyond-how-macros-changed-scala-and-what-s-coming-next",
      "PersonsString": "Eugene Burmako",
      "Title": "To Macros and Beyond!: How macros changed Scala, and what's coming next",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-to-macros-and-beyond-how-macros-changed-scala-and-what-s-coming-next"
    },
    {
      "Abstract": "The scale and continuous growth of commercial code bases are the greatest challenges for adoption of automated analysis tools in Industry. Alas, scale is largely ignored by academic research. We developped a new static analysis tool for security to scale to Facebook scale. It relies on abstract interpretation to focus on the properties that really matter to security engineers and provides fine control on the cost/precision ratio. It was designed from day one for \u201creal world\u201d security and privacy problems at scale. Facebook codebase is huge, and we can analyze it, from scratch in 13 minutes. This talk will give attendees a peek at some of the secret sauce we use to achieve such amazing performance and precision",
      "Affiliations": ["Facebook"],
      "AffiliationsString": "Facebook",
      "Authors": ["francescologozzo"],
      "Key": "curryon-2016-zoncolan-static-analysis-for-security-at-the-facebook-scale",
      "PersonsString": "Francesco Logozzo",
      "Title": "Static analysis for security at the Facebook scale",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-zoncolan-static-analysis-for-security-at-the-facebook-scale"
    },
    {
      "Abstract": "Back in the 1940s, the French writer Raymond Queneau wrote a book titled Exercises in Style featuring 99 renditions of the exact same short story, each in a different style. This talk, based on a book with the same name, shamelessly does the same for a simple program. From monolithic to object-oriented to continuations to relational to publish/subscribe to monadic to aspect-oriented, and much more. You will get a tour through the richness of human computational thought by through the lens of one, simple, program in many different guises.\nMore than an academic exercise; this about freedom of expression. I\u2019ll argue that you are in dangers of getting trapped into a single prescribed style during your professional career, and the understanding all is needed to truly understand how to architect large-scale systems.",
      "Affiliations": ["University of California, Irvine"],
      "AffiliationsString": "University of California, Irvine",
      "Authors": ["cristalopes"],
      "Key": "curryon-2016-exercises-in-programming-style",
      "PersonsString": "Crista Lopes",
      "Title": "Exercises in Programming Style",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-exercises-in-programming-style"
    },
    {
      "Abstract": "In a world running at breakneck speed to embrace JavaScript, it is refreshing to see a project that embraces Java to provides solution that deal with the new world and even improve it. I describe Truffle, a project that aim to build multi-language, multi-tenant, multi-threaded, multi-node, multi-tooling and multi-system environment on top of Java virtual machine with the goal to form the fastest and most flexible execution environment on the planet! Learn about Truffle and its Java API to become real polyglot, use the best language for a task and never ask again: Do I really have to use that crummy language?\nJaroslav Tulach is the founder and initial architect of NetBeans, which is not just a well known IDE, but also the first modular desktop application framework written in Java. I have seen, made and helped to recover from many API design mistakes. Such experiences forced me to write a book titled \u201cPractical API Design\u201d. These days I am helping OracleLabs to design the API of Truffle which is the fastest virtual machine on the planet.",
      "Affiliations": ["Oracle Labs"],
      "AffiliationsString": "Oracle Labs",
      "Authors": ["jaroslavtulach"],
      "Key": "curryon-2016-become-a-polyglot-by-learning-java-",
      "PersonsString": "Jaroslav Tulach",
      "Title": "Become a Polyglot by learning Java!",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-become-a-polyglot-by-learning-java-"
    },
    {
      "Abstract": "This talk will introduce Oden, an experimental, statically typed, functional programming language being built for the Go ecosystem. We will look at how Oden aims to leverage the great features of Go \u2014 static linking, cross-compilation, goroutines, channels and the great set of libraries and tools \u2014 and enable higher-level abstractions, generics and a safer yet more flexible type system.",
      "Affiliations": ["None (this is a free time project)"],
      "AffiliationsString": "None (this is a free time project)",
      "Authors": ["oskarwickstrom"],
      "Key": "curryon-2016-oden-a-functional-programming-language-for-the-go-ecosystem",
      "PersonsString": "Oskar Wickström",
      "Title": "Oden - A Functional Programming Language for the Go Ecosystem",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-oden-a-functional-programming-language-for-the-go-ecosystem"
    },
    {
      "Abstract": "From both an academic and industrial perspective Clojure programmers are living in the computational stone age. Lisp (1957), tries (1965), and Datalog (1977) form the working day conceptual foundation for many professional Clojure engineers. Paradoxically Clojure programmers leverage these cobweb infested ideas to successfully target two of the most pervasive and active industry technology platforms - the Java Virtual Machine and JavaScript. While many mainstream developers continue to bicker over the finer points of MVC, Clojure developers are building complex client user interfaces with functional programming and immutable data structures at the core. While academics forge ahead with ever more sophisticated forms of verification, Clojure programmers build robust and compelling systems with hardly more type safety than the earliest Lisp implementation. Perhaps good ideas never grow old and Clojure can show us that better software is often a matter of looking back to the future.",
      "Affiliations": ["Cognitec"],
      "AffiliationsString": "Cognitec",
      "Authors": ["davidnolen"],
      "Key": "curryon-2016-how-to-win-big-with-old-ideas",
      "PersonsString": "David Nolen",
      "Title": "How To Win Big With Old Ideas",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-how-to-win-big-with-old-ideas"
    },
    {
      "Abstract": "Typestate-oriented programming is an extension of the OO paradigm where objects are modeled not just in terms of interfaces but in terms of their usage protocols, describing legal sequences of method calls, possibly depending on the object\u2019s internal state. We argue that the Actor Model allows typestate-OOP in an inherently distributed setting, whereby objects/actors can be accessed concurrently by several processes, and local entities cooperate to carry out a communication protocol. In this presentation we illustrate the approach by means of a number of examples written in Scala Akka. We show that Scala\u2019s abstractions support clean and natural typestate-oriented actor programming with the usual asynchronous and non-blocking semantics. We also show that the standard type system of Scala and a typed wrapping of usual (untyped) Akka\u2019s ActorRef are enough to provide rich forms of type safety so that well-typed actors respect their intended communication protocols.\nThis approach draws on a solid theoretical background, consisting of a sound behavioral type system for the Join Calculus, that is a foundational calculus of distributed asynchronous processes whose semantics is based on the Chemical Abstract Machine, that unveiled its strong connections with typestate-oriented programming of both concurrent objects and Actors.",
      "Affiliations": ["Università di Padova, Italy"],
      "AffiliationsString": "Università di Padova, Italy",
      "Authors": ["silviacrafa"],
      "Key": "curryon-2016-on-the-chemistry-of-typestate-oriented-actors",
      "PersonsString": "Silvia Crafa",
      "Title": "On the chemistry of typestate-oriented actors",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-on-the-chemistry-of-typestate-oriented-actors"
    },
    {
      "Abstract": "What happens when your app is its own VM, boots in 50ms, and can share the same code across browser/mobile/server components? Let\u2019s find out!\nWith libraries like Mirage, js_of_ocaml, &amp; ARM compiler output OCaml apps can operate at such a low level we don\u2019t even need operating systems on the backend anymore (removing 15 million lines of memory-unsafe code) - while at the same time, writing UI\u2019s is easier &amp; more reliable than ever before, with lightweight type-checked code sharing between server, browser clients, &amp; native mobile apps.\nWe\u2019ll look at a thought experiment of what\u2019s enabled by new tech in OCaml like Unikernels, efficient JS/ARM output, React/Native support, and easy host interop.",
      "Affiliations": ["None"],
      "AffiliationsString": "None",
      "Authors": ["seangrove"],
      "Key": "curryon-2016-from-unikernels-to-databases-to-uis-truly-full-stack-apps-in-ocaml",
      "PersonsString": "Sean Grove",
      "Title": "From Unikernels to Databases to UIs: Truly full-stack apps in OCaml",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-from-unikernels-to-databases-to-uis-truly-full-stack-apps-in-ocaml"
    },
    {
      "Abstract": "Abstract: Developing software for a connected, embedded device often makes you want to throw it out the window. Instead of being able to rely on modern, managed languages, developers are stuck with C/C++. How do we make developers productive even when they are working on low-end devices?",
      "Affiliations": ["Google"],
      "AffiliationsString": "Google",
      "Authors": ["kasperlund"],
      "Key": "curryon-2016-dartino-a-managed-language-on-micro-controllers-",
      "PersonsString": "Kasper Lund",
      "Title": "Dartino - a managed language on micro-controllers?",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-dartino-a-managed-language-on-micro-controllers-"
    },
    {
      "Abstract": "",
      "Affiliations": ["Parallel Universe"],
      "AffiliationsString": "Parallel Universe",
      "Authors": ["ronpressler"],
      "Key": "curryon-2016-why-writing-correct-software-is-hard-and-why-math-alone-won-t-help-us",
      "PersonsString": "Ron Pressler",
      "Title": "Why Writing Correct Software Is Hard and Why Math (Alone) Won\u2019t Help Us",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-why-writing-correct-software-is-hard-and-why-math-alone-won-t-help-us"
    },
    {
      "Abstract": "Functional programmers love to discuss Monads, their metaphors, and their many use cases. Recognizing that monadic design and development patterns have their place, this talk will discuss the price of implementing the Free Monad in your code - spoiler alert - it\u2019s not free.\nThe Free Monad\u2019s basis in Category Theory hails from an academic look at mathematics and functional programming, but this talk will prove you don\u2019t have to have a PhD to understand and apply these concepts. We\u2019ll define the building blocks of the abstraction by discussing the practical use cases, trade-offs, and alternative patterns using real Scala code. Let\u2019s have a conversation about code complexity and the benefits and disadvantages of using theoretical concepts in an industry application.",
      "Affiliations": ["Sharethrough"],
      "AffiliationsString": "Sharethrough",
      "Authors": ["kelleyrobinson"],
      "Key": "curryon-2016-the-line-between-abstract-and-concrete",
      "PersonsString": "Kelley Robinson",
      "Title": "Why The Free Monad isn't Free",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-the-line-between-abstract-and-concrete"
    },
    {
      "Abstract": "One of the biggest changes in the transition from Objective-C to Swift is the new type system. This change is at the heart of Swift\u2019s language design, from optionals over value types to constrained generics, and to truly understand the language, a thorough understanding of its type system is indispensable. In this talk, I will explain the advantages of Swift\u2019s strong commitment to a sophisticated type system. I will illustrate the impact on language and program design through a series of examples, drawn from my experience of developing one of the first Swift-based applications published in the Mac App Store. I will discuss why type-driven design benefits from functional programming principles, and also, how it enables us to write less tests without a loss of confidence in our code.",
      "Affiliations": ["UNSW Australia & Applicative"],
      "AffiliationsString": "UNSW Australia & Applicative",
      "Authors": ["manuelchakravarty"],
      "Key": "curryon-2016-a-type-is-worth-a-thousand-tests",
      "PersonsString": "Manuel Chakravarty",
      "Title": "A Type is Worth a Thousand Tests",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-a-type-is-worth-a-thousand-tests"
    },
    {
      "Abstract": "Programming languages are an interface between people and computers. Many have explored one side or the other. In this talk, I will illustrate the insights that can be gained by exploring both. For example, I will show how understanding human behavior can solve undecidable problems, and how understanding mathematical models can predict human expectations. I will discuss how this work was inspired by and adopted by the Ceylon design team at Red Hat and the Kotlin design team at JetBrains.",
      "Affiliations": ["Cornell University"],
      "AffiliationsString": "Cornell University",
      "Authors": ["rosstate"],
      "Key": "curryon-2016-redesigning-type-systems-for-industry-oo",
      "PersonsString": "Ross Tate",
      "Title": "Redesigning Type Systems for Industry OO",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-redesigning-type-systems-for-industry-oo"
    },
    {
      "Abstract": "For computer software, our security models, policies, mechanisms, and means of assurance were primarily conceived and developed before the end of the 1970\u2018s. However, since that time, software has changed radically: it is thousands of times larger, comprises countless libraries, layers, and services, and is used for more purposes, in far more complex ways. This suggests that we should revisit some of our core computer security concepts. For example, what does the Principle of Least Privilege mean when all software contains libraries that can express arbitrary functionality? And, what security policy should be enforced when software is too complex for either its developers or its users to explain its intended behavior in detail? One possibility is to take an empirical, data-driven approach to modern software, and determine its exact, concrete behavior via comprehensive, online monitoring. Such an approach can be a practical, effective basis for security\u2014as demonstrated by its success in spam and abuse fighting\u2014but its use to constrain software behavior raises many questions. In particular, two questions seem critical. First, is it possible to learn the details of how software is behaving, without intruding on the privacy of its users? Second, are those details a good foundation for deriving security policies that constrain how software should behave? This talk answers both these questions in the affirmative, as part of an overall approach to data-driven security. Specifically, the talk describes techniques for learning detailed software statistics while providing differential privacy for its users, and how deep learning can help derive useful security policies that match users\u2019 expectations with intended software behavior. Those techniques are both practical and easy to adopt, and have already been used at scale for billions of users.",
      "Affiliations": ["Google"],
      "AffiliationsString": "Google",
      "Authors": ["ulfarerlingsson"],
      "Key": "curryon-2016-data-driven-software-security-using-differential-privacy-and-deep-learning",
      "PersonsString": "Úlfar Erlingsson",
      "Title": "Data-driven Software security using Differential Privacy and Deep Learning",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-data-driven-software-security-using-differential-privacy-and-deep-learning"
    },
    {
      "Abstract": "Language designers and developers want better ways to write good code \u2014 languages designed with simpler, more powerful abstractions accessible to a larger community of developers. However, language design does not seem to take into account security, leaving developers with the onerous task of writing attack-proof code. In 20 years, we have gone from 25 reported vulnerabilities to 6,883 vulnerabilities. We see some of the most common vulnerabilities happening in commonly used software \u2014 cross-site scripting, SQL injections, and buffer overflows. Attacks are becoming sophisticated, often exploitation three or four weaknesses; making it harder for developers to reason about the source of the problem.\nI\u2019ll overview some recent attacks and argue our languages must take security seriously. Languages need security-oriented constructs, and compiler must let developers know when there is a problem with their code. We need to empower developers with the concept of \u201csecurity for the masses\u201d by making available languages that do not necessarily require an expert in order to determine whether the code being written is vulnerable to attack or not.",
      "Affiliations": ["Oracle Labs, Australia"],
      "AffiliationsString": "Oracle Labs, Australia",
      "Authors": ["cristinacifuentes"],
      "Key": "curryon-2016-are-we-ready-for-secure-languages-",
      "PersonsString": "Cristina Cifuentes",
      "Title": "Are We Ready for Secure Languages?",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-are-we-ready-for-secure-languages-"
    },
    {
      "Abstract": "Dinner",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "curryon-2016-catering-dinner",
      "PersonsString": "",
      "Title": "Dinner",
      "Type": "Dinner",
      "URL": "http://2016.ecoop.org/event/curryon-2016-catering-dinner"
    },
    {
      "Abstract": "Meta programs are programs that consume other programs as input. There are many tools for solving meta programming tasks, like grep and AWK for the simple stuff, and parser generators or compiler-compilers for more complex tasks. Rascal is a functional programming language that addresses all meta programming concerns in a single, unified language. The use cases for Rascal range from computing source code metrics and automated code smell detection, to implementing refactorings and full-blown compilers. Rascal provides an integrated set of features to simplify such source code analysis and transformation tasks, including built-in context-free grammars for syntax definition, constructs for automated traversal of syntax trees, powerful pattern matching primitives, and domain-specific data types. In this talk I will provide an overview of the language, and illustrate how it can be used as a tool for source code analysis and as a language workbench for developing domain-specific languages (DSLs).",
      "Affiliations": ["CWI"],
      "AffiliationsString": "CWI",
      "Authors": ["tijsvanderstorm"],
      "Key": "curryon-2016-rascal-the-swiss-army-knife-of-meta-programming",
      "PersonsString": "Tijs van der Storm",
      "Title": "Rascal: the Swiss Army Knife of Meta Programming",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-rascal-the-swiss-army-knife-of-meta-programming"
    },
    {
      "Abstract": "Modern web services rob users of low-level control over cloud storage\u2014a user\u2019s single logical data set is scattered across multiple storage silos whose access controls are set by web services, not users. The consequence is that users lack the ultimate authority to determine how their data is shared with other web services. In this talk, we introduce Sieve, a new platform which selectively (and securely) exposes user data to web services. Sieve has a user-centric storage model: each user uploads encrypted data to a single cloud store, and by default, only the user knows the decryption keys. Given this storage model, Sieve defines an infrastructure to support rich, legacy web applications. Using attribute-based encryption, Sieve allows users to define intuitively understandable access policies that are cryptographically enforceable. Using key homomorphism, Sieve can re-encrypt user data on storage providers in situ, revoking decryption keys from web services without revealing new keys to the storage provider. Using secret sharing and two-factor authentication, Sieve protects cryptographic secrets against the loss of user devices like smartphones and laptops. The result is that users can enjoy rich, legacy web applications, while benefiting from cryptographically strong controls over which data a web service can access.",
      "Affiliations": ["MIT CSAIL"],
      "AffiliationsString": "MIT CSAIL",
      "Authors": ["frankwang"],
      "Key": "curryon-2016-sieve-cryptographically-enforced-access-control-for-user-data-in-untrusted-clouds",
      "PersonsString": "Frank Wang",
      "Title": "Sieve: Cryptographically Enforced Access Control for User Data in Untrusted Clouds",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-sieve-cryptographically-enforced-access-control-for-user-data-in-untrusted-clouds"
    },
    {
      "Abstract": "When I joined Mozilla as a full-time employee in 2010, I knew I wanted to combine technology research with Mozilla\u2019s open source culture to serve our mission of advancing the Web platform. I also knew I had no idea how to do it. So I cofounded Mozilla Research to experiment with ways of doing innovation with open source.\nFast forward to 2016, and we have a number of exciting technologies we\u2019ve spearheaded or collaborated on, including asm.js, WebAssembly, Emscripten, AOMedia Video, Rust, and Servo. We\u2019ve also made our share of mistakes, and tried to extract lessons from them.\nIn this talk, I will recount some of my experiences running an open source research lab, and talk about how I\u2019ve come to believe that investing in open source communities is a unique and powerful tactic for advancing the state of our understanding of software.",
      "Affiliations": ["Mozilla Research"],
      "AffiliationsString": "Mozilla Research",
      "Authors": ["daveherman"],
      "Key": "curryon-2016-building-an-open-source-research-lab",
      "PersonsString": "Dave Herman",
      "Title": "Building an Open Source Research Lab",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-building-an-open-source-research-lab"
    },
    {
      "Abstract": "I have used functional programming in industrial projects since 1998; starting with a stage lighting system, which is still in use. I wrote it while still a research assistant. While I have a strong attachment to Scheme - I was project editor for the R6RS standard - I also use Racket, OCaml, Scala, Clojure, Erlang, F#, Haskell, and Star in a wide variety of projects from social pedagogy to semiconductor fab control.\nMy work continually force me to question if I am still on the path to correct, effective, and maintainable software. Time and again, functional approaches won out, and failures hid in the imperative and OO parts of my projects. Consequently, the journey from academic research to industrial applications also ironically marks a journey away from imperative objects towards functional purity. (Static types, not so much, however.) The talk is a tour through my industrial projects, I encourage you mine them for insights on how to write and not to write software.",
      "Affiliations": ["Active Group GmbH"],
      "AffiliationsString": "Active Group GmbH",
      "Authors": ["michaelsperber"],
      "Key": "curryon-2016-the-functional-programming-languages-nomad",
      "PersonsString": "Michael Sperber",
      "Title": "The Functional Programming Languages Nomad",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-the-functional-programming-languages-nomad"
    },
    {
      "Abstract": "Perl can be a first computer language, but we try to think of it more as a last computer language. Our philosophy, based on how natural language works, says that a future-proof language should be flexible enough to evolve while providing a rich cultural lexicon to discourage gratuitous use of that flexibility. Perl 5 has done okay with that approach over the years, but its design is starting to run into its limits, as have the designs of various other popular languages. Perl 6 is a grand experiment to see if we can transcend the limits of existing languages, to create a new general-purpose, multi-paradigm language that could serve not just as the next flavor-of-the-month language, but as a stable, comfortable mother tongue for new generations of programmers. Come and see how we\u2019re doing on that so far.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["larrywall"],
      "Key": "curryon-2016-it-s-the-end-of-the-world-as-we-know-it-and-i-feel-fine",
      "PersonsString": "Larry Wall",
      "Title": "It's the End of the World as We Know It, and I Feel Fine",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-it-s-the-end-of-the-world-as-we-know-it-and-i-feel-fine"
    },
    {
      "Abstract": "As programmers and language designers we have a first-hand account of what this activity consists. But can we define it?",
      "Affiliations": ["Klarna"],
      "AffiliationsString": "Klarna",
      "Authors": ["juanlulkin"],
      "Key": "curryon-2016-philosophical-concepts-in-programming-paradigms",
      "PersonsString": "Juan Lulkin",
      "Title": "What is programming?",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-philosophical-concepts-in-programming-paradigms"
    },
    {
      "Abstract": "The Stateless Service design principle has become ubiquitous in the tech industry for creating horizontally scalable services. However our applications do have state, we just have moved all of it to caches and databases. Today as applications are becoming more data intensive and request latencies are expected to be incredibly low, we\u2019d like the benefits of stateful services, like data locality and sticky consistency. In this talk I will address the benefits of stateful services, how to build them so that they scale, and discuss distributed and scalable services in the real world that implement these techniques successfully.",
      "Affiliations": ["Twitter"],
      "AffiliationsString": "Twitter",
      "Authors": ["caitiemccaffrey"],
      "Key": "curryon-2016-building-scalable-stateful-services",
      "PersonsString": "Caitie McCaffrey",
      "Title": "Building Scalable Stateful Services",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-building-scalable-stateful-services"
    },
    {
      "Abstract": "Break",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "curryon-2016-catering-break",
      "PersonsString": "",
      "Title": "Break",
      "Type": "Coffee break",
      "URL": "http://2016.ecoop.org/event/curryon-2016-catering-break"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "curryon-2016-curry-on-party-",
      "PersonsString": "",
      "Title": "Curry On Party!",
      "Type": "Social Event",
      "URL": "http://2016.ecoop.org/event/curryon-2016-curry-on-party-"
    },
    {
      "Abstract": "Live programming aims to provide programmers with useful continuous feedback from a live executing program. Realizing the \u201cuseful\u201d part is not easy: automatic re-execution and even time travel debugging do not significantly augment the general abstract reasoning that makes programming hard. This talk show how lessons learned from research on direct manipulation; example-centric, conversational, learnable, and visual programming; live coding; and even Hollywood\u2019s fictional interfaces, can help us envision and design amazing new programming experiences.",
      "Affiliations": ["Microsoft Research"],
      "AffiliationsString": "Microsoft Research",
      "Authors": ["seanmcdirmid"],
      "Key": "curryon-2016-he-future-of-programming-will-be-live",
      "PersonsString": "Sean McDirmid",
      "Title": "The Future of Programming will be Live ",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-he-future-of-programming-will-be-live"
    },
    {
      "Abstract": "Configuration is one of those features that almost each application solves in a different way. But the problem is always the same: how can we change the behaviour of a system without (hopefully) restarting it, re-building it, or God forbid, changing the code. At the same time, how can we track and &quot;diff\u201d config changes effectively? Files, DBs, key-value stores: there are many ways to store configuration and each one adds some valuable aspect. In this presentation I want to talk about a solution that groups together all the requirements above in a simple and elegant way. In the process we are going to see what aspects of a functional language like Clojure enables real-time, client/server communication and fail-over capabilities.",
      "Affiliations": ["Mailonline"],
      "AffiliationsString": "Mailonline",
      "Authors": ["renzoborgatti"],
      "Key": "curryon-2016-distributed-configuration-with-clojure",
      "PersonsString": "Renzo Borgatti",
      "Title": "Distributed Configuration with Clojure",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-distributed-configuration-with-clojure"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "curryon-2016-catering-coffee-break",
      "PersonsString": "",
      "Title": "Coffee break",
      "Type": "Coffee break",
      "URL": "http://2016.ecoop.org/event/curryon-2016-catering-coffee-break"
    },
    {
      "Abstract": "In a connected world, synchronising mutable information between different devices with different clock precision can be a difficult problem. A piece of data may have many out-of-sync replicas but all of those should eventually be in a consistent state. For example, TomTom users, having personal navigation devices, smartphones, MyDrive website accounts, expect their navigation information be synchronised properly even in the occasional absence of network connection. Conflict-free Replicated Data Types (CRDTs) provide robust data structures to achieve proper synchronisation in an unreliable network of devices. They enable the conflict resolution being done locally at the data type level while guaranteeing the eventual consistency between replicas. In this talk, in addition to an introduction to common CRDT types, our main focus will be on a special subtype of CRDT Set called OUR-Set (Observed, Updated, Removed), which we created to extend known CRDT sets with update functionality. We will exhibit basic implementations of various CRDTs in Scala and Java, and will enumerate subtle considerations which should be taken into account. We will also explain the advantages of these data structures to solve many synchronisation problems as well as their limitations.",
      "Affiliations": [
        "TomTom",
        "TomTom"
      ],
      "AffiliationsString": "TomTom",
      "Authors": [
        "dmitryivanov",
        "naminasserazad"
      ],
      "Key": "curryon-2016-practical-demystification-of-crdts",
      "PersonsString": "Dmitry Ivanov and Nami Nasserazad",
      "Title": "Practical Demystification of CRDTs",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-practical-demystification-of-crdts"
    },
    {
      "Abstract": "Why do programming languages look the way they do today? How did it all started? In this talk we will go over a brief history of programming languages, from the very early days. We will go over greatest hits from Hilbert, Turing, Church, Hopper and more.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["andreamagnorsky"],
      "Key": "curryon-2016-a-brief-and-incomplete-history-of-programming-languages",
      "PersonsString": "Andrea Magnorsky",
      "Title": "A brief and incomplete history of programming languages",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-a-brief-and-incomplete-history-of-programming-languages"
    },
    {
      "Abstract": "You are Joe, the courier. It is your job, to deliver all the fashion to all the customers. Sometimes, you have to pick up stuff and return it to the warehouse. However, customers keep ordering more and more \u2014 and your bicycle only has room for so many boxes\u2026 In this talk we want to tell you how the Elm Architecture empowered us to put the \u201cElm Street 404\u201d game together. We will give you some insight into the algorithms at play and how we applied functional concepts to the domain of game programming.Some of the challenges we were facing include: implementing a path-finding solution, the random generation of the map and game objects, improving the performance and rendering with WebGL.",
      "Affiliations": [
        "Zalando",
        "Zalando"
      ],
      "AffiliationsString": "Zalando",
      "Authors": [
        "andreykuzmin",
        "koljawilcke"
      ],
      "Key": "curryon-2016-creating-a-fun-game-with-elm",
      "PersonsString": "Andrey Kuzmin and Kolja Wilcke",
      "Title": "Creating a Fun Game with Elm",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-creating-a-fun-game-with-elm"
    },
    {
      "Abstract": "The ultimate goal of all computer science is the program. In the beginning, so our myths and stories tell us, the programmer created the program from the eternal nothingness of the void. These notes have the status of letters written to ourselves: we wrote them down because, without doing so, we found ourselves making up new arguments over and over again. In 2002 at the first OOPSLA Onward track, James Noble and Robert Biddle presented a paper entitled \u201cNotes on Postmodern Programming\u201d. The paper was a both a paean, a homage to the love of programming and its lore, but also a mocking attack. One common question was whether the paper was serious or a joke? It was both, and that was the agenda. In following years, similar papers were presented, with diminishing impact: the shock of the new wears off. In this retrospective, we revisit some of the propositions made in the early papers, and attempt to re-experience the shock. Old men forget: yet all shall be forgot, but we\u2019ll remember with advantages what feats we did that day.",
      "Affiliations": ["Victoria University of Wellington"],
      "AffiliationsString": "Victoria University of Wellington",
      "Authors": ["jamesnoble"],
      "Key": "curryon-2016-james-noble",
      "PersonsString": "James Noble",
      "Title": "Notes on Post-Post-Modern-Modern Programming",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-james-noble"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Northeastern University",
        "Ecole Polytechnique Federale de Lausanne"
      ],
      "AffiliationsString": "Northeastern University, Ecole Polytechnique Federale de Lausanne",
      "Authors": [
        "janvitek",
        "heathermiller"
      ],
      "Key": "curryon-2016-curry-on-opening-remarks",
      "PersonsString": "Jan Vitek and Heather Miller",
      "Title": "Curry On opening remarks",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/curryon-2016-curry-on-opening-remarks"
    },
    {
      "Abstract": "Deep learning is driving significant advances in Artificial Intelligence. In this talk, I will describe the design and implementation of TensorFlow, the Google platform for large-scale training of neural networks. The talk will focus on one important aspect of the system: distributed execution of iterative TensorFlow programs.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["yuanyu"],
      "Key": "curryon-2016-distributed-iterative-computation-in-tensorflow",
      "PersonsString": "Yuan Yu",
      "Title": "Distributed Iterative Computation in TensorFlow",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/curryon-2016-distributed-iterative-computation-in-tensorflow"
    },
    {
      "Abstract": "A programming language design must strike a balance between validatability, expressiveness, and efficiency. Bridging the gap between domain concepts and the encoding of these concepts in a programming language is one of the core challenges of software engineering. The validatability of a language is a measure of the size of this gap. In a language with a high validatability index, one can express intent with relatively little encoding, which makes it straightforward to establish that a program \u2018does the right thing\u2019. Validatability decreases with increasing encoding.\nThe objective of my thesis work is to do a case study to investigate this balance in the domain of information systems. Information systems are systems for the collection, organization, storage, and communication of information. Information systems aim to support operations, management and decision-making. In order to do this, the data in information systems is filtered and processed to create new data.",
      "Affiliations": ["Delft University of Technology"],
      "AffiliationsString": "Delft University of Technology",
      "Authors": ["dacoharkes"],
      "Key": "ecoop-2016-doctoral-symposium-language-design-for-validatable-information-system-specifications",
      "PersonsString": "Daco Harkes",
      "Title": "Language Design for Validatable Information System Specifications",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-language-design-for-validatable-information-system-specifications"
    },
    {
      "Abstract": "ECOOP can change your life! It has changed mine, bringing new ideas and connecting you to peers and mentors. This talk will give you a recipe that will get you through your PhD into a research job at University or Corporation of your choice.",
      "Affiliations": ["Northeastern University"],
      "AffiliationsString": "Northeastern University",
      "Authors": ["janvitek"],
      "Key": "summer-school-my-25-years-of-ecoop",
      "PersonsString": "Jan Vitek",
      "Title": "My Quarter Century of ECOOP",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/summer-school-my-25-years-of-ecoop"
    },
    {
      "Abstract": "Poster associated with an ECOOP research paper.",
      "Affiliations": [
        "Fraunhofer SIT",
        "Fraunhofer IEM",
        "TU Darmstadt",
        "Heinz Nixdorf Institut, Paderborn University and Fraunhofer IEM"
      ],
      "AffiliationsString": "Fraunhofer SIT, Fraunhofer IEM, TU Darmstadt, Heinz Nixdorf Institut, Paderborn University and Fraunhofer IEM",
      "Authors": [
        "johannesspath",
        "lisanguyenquangdo",
        "karimali",
        "ericbodden"
      ],
      "Key": "posters-boomerang-demand-driven-flow-and-context-sensitive-pointer-analysis-for-java",
      "PersonsString": "Johannes Späth, Lisa Nguyen Quang Do, Karim Ali and Eric Bodden",
      "Title": "Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysis for Java",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-boomerang-demand-driven-flow-and-context-sensitive-pointer-analysis-for-java"
    },
    {
      "Abstract": "Many programming languages, such as Clojure, Scala, and Haskell, support different concurrency models. In practice these models are often combined, however the semantics of the combinations are not always well-defined. In this paper, we study the combination of futures and Software Transactional Memory. Currently, futures created within a transaction cannot access the transactional state safely, violating the serializability of the transactions and leading to unexpected behavior. We define transactional tasks: a construct that allows futures to be created in transactions. Transactional tasks allow the parallelism in a transaction to be exploited, while providing safe access to the state of their encapsulating transaction. We show that transactional tasks have several useful properties: they are coordinated, they maintain serializability, and they do not introduce non-determinism. As such, transactional tasks combine futures and Software Transactional Memory, allowing the potential parallelism of a program to be fully exploited, while preserving the properties of the separate models where possible.",
      "Affiliations": [
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel"
      ],
      "AffiliationsString": "Vrije Universiteit Brussel",
      "Authors": [
        "janwillemswalens",
        "joeridekoster",
        "wolfgangdemeuter"
      ],
      "Key": "ecoop-2016-papers-transactional-tasks-parallelism-in-software-transactions",
      "PersonsString": "Janwillem Swalens, Joeri De Koster and Wolfgang De Meuter",
      "Title": "Transactional Tasks: Parallelism in Software Transactions",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-transactional-tasks-parallelism-in-software-transactions"
    },
    {
      "Abstract": "Modular formal specification and verification of complex imperative modules such as fine-grained concurrent algorithms requires the use of a powerful, higher-order program logic. Approaches currently being proposed in the literature, such as Iris [Jung et al., POPL 2015], are based on guarded recursion using the \u201clater\u201d operator. Our VeriFast tool for modular formal verification of C and Java programs uses a somewhat different approach, based on a positivity restriction [Parkinson and Bierman, POPL 2005] and the use of higher-order ghost code combined with a general modular termination verification approach [Jacobs et al., ECOOP 2015] to encode non-positive constructs. In this poster presentation we present a formalization and soundness proof outline, as well as examples of the use (based on Jacobs and Piessens [POPL 2011]) of our approach.",
      "Affiliations": ["iMinds - Distrinet, KU Leuven"],
      "AffiliationsString": "iMinds - Distrinet, KU Leuven",
      "Authors": ["bartjacobs"],
      "Key": "posters-verifast-s-higher-order-separation-logic",
      "PersonsString": "Bart Jacobs",
      "Title": "VeriFast's Higher-Order Separation Logic",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-verifast-s-higher-order-separation-logic"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-catering-social",
      "PersonsString": "",
      "Title": "Social",
      "Type": "Social Event",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-catering-social"
    },
    {
      "Abstract": "The proliferation of shared mutable state in object-oriented programming complicates software development as two seemingly unrelated operations may interact via an alias and produce unexpected results. In concurrent programming this manifests itself as data-races. Concurrent object-oriented programming suffers from the fact that code that warrants synchronisation cannot easily be distinguished from code that does not. The burden is placed solely on the programmer to reason about alias freedom, sharing across threads and side-effects to deduce where and when to apply concurrency control, without inadvertently blocking parallelism. This paper presents a reference capability approach to concurrent and parallel object-oriented programming where all uses of aliases are guaranteed to be data-race free. Locations\u2019 static types describe their possible sharing. Type information can express non-interfering deterministic parallelism without dynamic concurrency control, thread-locality, lock-based schemes, and guarded-by relations giving multi-object atomicity to nested data structures. Unification of capabilities and traits allows trait-reuse across multiple concurrency scenarios with minimal code duplication. The resulting system brings together features from a wide range of prior work in a unified way.",
      "Affiliations": [
        "Uppsala University",
        "Uppsala University"
      ],
      "AffiliationsString": "Uppsala University",
      "Authors": [
        "eliascastegren",
        "tobiaswrigstad"
      ],
      "Key": "ecoop-2016-papers-reference-capabilities-for-concurrency-control",
      "PersonsString": "Elias Castegren and Tobias Wrigstad",
      "Title": "Reference Capabilities for Concurrency Control",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-reference-capabilities-for-concurrency-control"
    },
    {
      "Abstract": "The poster discusses a simulation framework for context-oriented technology based on Colored Petri Nets (CP-nets). We have proposed an idea of context-oriented methodology called RT-COM for multi-purpose service robot developments. In context-oriented technology, the most important issues are how to organize layers and to detect layer-interaction problems. To accomplish these issues, we have focused on states of each layer. Accordingly, our methodology contains an OS-like mechanism for controlling layers. In the simulation framework, we show a CP-nets including the mechanism. The features of CP-nets are colored tokens and hierarchies. We consider that those features are suitable for modeling and simulating context-oriented programs. To illustrate the simulation framework, the CP-nets tool simulates a layer-interaction problem for an automatic cleaner robot.",
      "Affiliations": [
        "Tokai University",
        "Tokyo City University",
        "Shibaura Institute of Technology",
        "Kyushu University"
      ],
      "AffiliationsString": "Tokai University, Tokyo City University, Shibaura Institute of Technology, Kyushu University",
      "Authors": [
        "harumiwatanabe",
        "nobuhikoogura",
        "midorisugaya",
        "kenjihisazumi"
      ],
      "Key": "posters-a-study-of-simulation-framework-based-on-colored-petri-nets-for-context-oriented-technologies",
      "PersonsString": "Harumi Watanabe, Nobuhiko Ogura, Midori Sugaya and Kenji Hisazumi",
      "Title": "A Study of Simulation Framework based on Colored Petri Nets for Context-Oriented Technologies",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-a-study-of-simulation-framework-based-on-colored-petri-nets-for-context-oriented-technologies"
    },
    {
      "Abstract": "We explore a novel approach to higher-order program analysis which brings ideas of on-demand lookup from first-order CFL-reachability program analyses to higher-order programs. The analysis needs to produce only a control-flow graph; it can derive all other information including values of variables directly from the graph. Several challenges had to be overcome, including how to build the control-flow graph on-the-fly and how to deal with nonlocal variables in functions. The resulting analysis is flow- and context-sensitive with a provable polynomial-time bound. The analysis is formalized and proved correct and terminating, and an initial implementation is described.",
      "Affiliations": [
        "Swarthmore College",
        "The Johns Hopkins University"
      ],
      "AffiliationsString": "Swarthmore College, The Johns Hopkins University",
      "Authors": [
        "zacharypalmer",
        "scottfsmith"
      ],
      "Key": "ecoop-2016-papers-higher-order-demand-driven-program-analysis",
      "PersonsString": "Zachary Palmer and Scott F. Smith",
      "Title": "Higher-Order Demand-Driven Program Analysis",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-higher-order-demand-driven-program-analysis"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-doctoral-symposium-coffee-break",
      "PersonsString": "",
      "Title": "Coffee break",
      "Type": "Coffee break",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-coffee-break"
    },
    {
      "Abstract": "Poster associated with a work appearing at COP workshop.",
      "Affiliations": [
        "Tokyo Institute of Technology",
        "Tokyo Institute of Technology",
        "HPI"
      ],
      "AffiliationsString": "Tokyo Institute of Technology, HPI",
      "Authors": [
        "matthiasspringer",
        "hidehikomasuhara",
        "roberthirschfeld"
      ],
      "Key": "posters-classes-as-layers-rewriting-design-patterns-with-cop",
      "PersonsString": "Matthias Springer, Hidehiko Masuhara and Robert Hirschfeld",
      "Title": "Classes as Layers: Rewriting Design Patterns with COP",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-classes-as-layers-rewriting-design-patterns-with-cop"
    },
    {
      "Abstract": "Writing JIT compilers for dynamic languages by hand is an arduous and heroic process, particularly for dynamic languages with \u201cinteresting\u201d semantics. Meta-tracing is an approach for reducing that effort; VM authors only write an interpreter and some hints. In this hands-on session students will implement a small dynamic language from scratch as well as a JITusing the RPython meta-tracing language that underlies the PyPy project.",
      "Affiliations": [
        "King's College London ",
        "King's College London"
      ],
      "AffiliationsString": "King's College London , King's College London",
      "Authors": [
        "carlfriedrichbolz",
        "laurietratt"
      ],
      "Key": "summer-school-a-jit-compiler-almost-for-free",
      "PersonsString": "Carl Friedrich Bolz and Laurence Tratt",
      "Title": "A JIT Compiler (almost) for Free",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/summer-school-a-jit-compiler-almost-for-free"
    },
    {
      "Abstract": "Poster associated with a work appearing at FTfJP workshop.",
      "Affiliations": [
        "Royal Holloway University of London",
        "Royal Holloway University of London"
      ],
      "AffiliationsString": "Royal Holloway University of London",
      "Authors": [
        "jonathanhoyland",
        "matthewhague"
      ],
      "Key": "posters-generating-concurrency-checks-automatically",
      "PersonsString": "Jonathan Hoyland and Matthew Hague",
      "Title": "Generating Concurrency Checks Automatically",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-generating-concurrency-checks-automatically"
    },
    {
      "Abstract": "Semantic specifications do not make a systematic connection between the names and scopes in the static structure of a program and memory layout, and access during its execution. In this paper, we introduce a systematic approach to the alignment of names in static semantics and memory in dynamic semantics, building on the scope graph framework for name resolution. We develop a uniform memory model consisting of frames that instantiate the scopes in the scope graph of a program. This provides a language-independent correspondence between static scopes and run-time memory layout, and between static resolution paths and run-time memory access paths. The approach scales to a range of binding features, supports straightforward type soundness proofs, and provides the basis for a language-independent specification of sound reachability-based garbage collection.",
      "Affiliations": [
        "TU Delft",
        "French Network and Information Security Agency (ANSSI)",
        "Portland State University",
        "Delft University of Technology"
      ],
      "AffiliationsString": "TU Delft, French Network and Information Security Agency (ANSSI), Portland State University, Delft University of Technology",
      "Authors": [
        "casperbachpoulsen",
        "pierreneron",
        "andrewtolmach",
        "eelcovisser"
      ],
      "Key": "ecoop-2016-papers-scopes-describe-frames-a-uniform-model-for-memory-layout-in-dynamic-semantics",
      "PersonsString": "Casper Bach Poulsen, Pierre Neron, Andrew Tolmach and Eelco Visser",
      "Title": "Scopes Describe Frames: A Uniform Model for Memory Layout in Dynamic Semantics",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-scopes-describe-frames-a-uniform-model-for-memory-layout-in-dynamic-semantics"
    },
    {
      "Abstract": "Poster associated with a work appearing at LIVE workshop.",
      "Affiliations": [
        "National Institute of Advanced Industrial Science and Technology, Japan",
        "National Institute of Advanced Industrial Science and Technology, Japan"
      ],
      "AffiliationsString": "National Institute of Advanced Industrial Science and Technology, Japan",
      "Authors": [
        "junkato",
        "masatakagoto"
      ],
      "Key": "posters-live-tuning-expanding-live-programming-benefits-to-non-programmers",
      "PersonsString": "Jun Kato and Masataka Goto",
      "Title": "Live Tuning: Expanding Live Programming Benefits to Non-Programmers",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-live-tuning-expanding-live-programming-benefits-to-non-programmers"
    },
    {
      "Abstract": "The undisciplined use of shared mutable state can be a source of program errors when aliases unsafely interfere with each other. While protocol-based techniques to reason about interference abound, they do not address two practical concerns: the decidability of protocol composition and its integration with protocol abstraction. We show that our composition procedure is decidable and that it ensures safe interference even when composing abstract protocols. To evaluate the expressiveness of our protocol framework for ensuring safe shared memory interference, we show how this same protocol framework can be used to model safe, typeful message-passing concurrency idioms.",
      "Affiliations": [
        "Carnegie Mellon University & Universidade Nova de Lisboa",
        "Carnegie Mellon University",
        "FCT / Universidade Nova de Lisboa"
      ],
      "AffiliationsString": "Carnegie Mellon University & Universidade Nova de Lisboa, Carnegie Mellon University, FCT / Universidade Nova de Lisboa",
      "Authors": [
        "filipemilitao",
        "jonathanaldrich",
        "luiscaires"
      ],
      "Key": "ecoop-2016-papers-composing-interfering-abstract-protocols",
      "PersonsString": "Filipe Militão, Jonathan Aldrich and Luís Caires",
      "Title": "Composing Interfering Abstract Protocols",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-composing-interfering-abstract-protocols"
    },
    {
      "Abstract": "Selecting items from a collection is one of the most common tasks users perform with graphical user interfaces. Practically every application supports this task with a selection feature different from that of any other application. Defects are common, especially in manipulating selections of non-adjacent elements, and flexible selection features are often missing when they would clearly be useful. As a consequence, user effort is wasted. The loss of productivity is experienced in small doses, but all computer users are impacted. The undesirable state of support for multi-element selection prevails because the same selection features are redesigned and reimplemented repeatedly. This article seeks to establish common abstractions for multi-selection. It gives generic but precise meanings to selection operations and makes multi-selection reusable; a JavaScript implementation is described. Application vendors benefit because of reduced development effort. Users benefit because correct and consistent multi-selection becomes available in more contexts.",
      "Affiliations": [
        "Texas A&M University",
        "Adobe Systems, Inc."
      ],
      "AffiliationsString": "Texas A&M University, Adobe Systems, Inc.",
      "Authors": [
        "jaakkojarvi",
        "seanparent"
      ],
      "Key": "ecoop-2016-papers-one-way-to-select-many",
      "PersonsString": "Jaakko Järvi and Sean Parent",
      "Title": "One Way to Select Many",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-one-way-to-select-many"
    },
    {
      "Abstract": "Software developed as part of Software Engineering research typically is intended for use as part of a software development process, such as requirement analysers and code generators. But as is the nature of scientific research, such tools tend to be one-off prototypes developed in isolation which can lead to repeated implementations of common components in subsequent and collaborative development efforts. This extends delivery time of prototypes and hinders the ability to get regular feedback of potential users during development. This is at direct odds with best development practices in the software industry that focusses on maximising reuse (application frameworks, software product lines) and fast delivery (continuous integration and delivery, agile development and DevOps). The D-UEA-ST framework, developed at the University of East Anglia, is a tooling framework that facilitates the coordinated reuse of software components across research software prototypes. D-UEA-ST defines a clear and flexible plugin framework with access to a range of tools and libraries that researchers can use, such as knowledge representation models, parallel code execution etc. In addition researchers can easily add new functionality they develop as part of their own prototypes to facilitate its reuse in future project through the D-UEA-ST framework. Further D-UEA-ST defines communication bridges to externals tools such Astah UML Modeller to aid researchers in easily achieving visual feedback for their tools.\nTo complement this reuse infrastructure D-UEA-ST provides an easy delivery mechanism for prototype tools developed using the framework. D-UEA-ST itself is a plugin for the Eclipse IDE making the prototype easily distributable and usable in evaluation studies. In addition D-UEA-ST is supported by a continuous integration and deployment stack to streamline collaborative development within and across research groups as well facilitate easier updates to users of scientific prototypes. D-UEA-ST is available with full documentation and code examples at http://seg.cmp.uea.ac.uk/software/dueast/\nPoster Presentation and Demonstration The poster and presentation will focus on introducing the capabilities of D-UEA-ST and how it can aid developers of scientific software in achieving reuse and easier delivery of prototypes. If allowed we would like to demonstrate D-UEA-ST as well by running through development scenarios that illustrate its use for development as well as provide a more in-depth explanation of the development process using the continuous integration stack and how that has benefitted the coordination and implementation of research prototypes and student projects at the University of East Anglia.",
      "Affiliations": [
        "University of East Anglia",
        "University of East Anglia",
        "University of East Anglia",
        "University of East Anglia"
      ],
      "AffiliationsString": "University of East Anglia",
      "Authors": [
        "joostnoppen",
        "adamziolkowski",
        "stephenjones",
        "davidcutting"
      ],
      "Key": "posters-coordinated-reuse-and-deployment-for-scientific-software-prototypes-with-d-uea-st",
      "PersonsString": "Joost Noppen, Adam Ziolkowski, Stephen Jones and David Cutting",
      "Title": "Coordinated Reuse and Deployment for Scientific Software Prototypes with D-UEA-ST",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-coordinated-reuse-and-deployment-for-scientific-software-prototypes-with-d-uea-st"
    },
    {
      "Abstract": "What has worked for me during my PhD? What did not work? And how to tell the difference? I will reflect on my experiences and discuss strategies that I found useful.",
      "Affiliations": ["TU Delft"],
      "AffiliationsString": "TU Delft",
      "Authors": ["sebastianerdweg"],
      "Key": "ecoop-2016-doctoral-symposium-phd-reflections",
      "PersonsString": "Sebastian Erdweg",
      "Title": "Invited Talk: PhD Reflections",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-phd-reflections"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-papers-adjourn",
      "PersonsString": "",
      "Title": "Adjourn",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-adjourn"
    },
    {
      "Abstract": "Poster associated with a work appearing at JSTools workshop.",
      "Affiliations": [
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel"
      ],
      "AffiliationsString": "Vrije Universiteit Brussel",
      "Authors": [
        "nathalieoostvogels",
        "joeridekoster",
        "wolfgangdemeuter"
      ],
      "Key": "posters-verification-of-communication-in-web-applications",
      "PersonsString": "Nathalie Oostvogels, Joeri De Koster and Wolfgang De Meuter",
      "Title": "Verification of Communication in Web Applications",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-verification-of-communication-in-web-applications"
    },
    {
      "Abstract": "Automatic programming is the ultimate programmer\u2019s dream: the programmer specifies what he wants (e.g., a sorting procedure), and the computer produces a program (e.g., the merge sort) that captures his intent. Realizing this dream requires the computer to synthesize an implementation and to verify its correctness\u2014two tasks that are unachievable in a world of arbitrary programs and specifications. But in a finite world, which bounds the size of program executions and inputs, both synthesis and verification become search problems, mechanizable by reduction to satisfiability solving. \nYet building practical verification or synthesis tools is no easy task, even with the availability of high-performance solvers. Real applications require the underlying solver to explore astronomically large search spaces while looking for an implementation that satisfies a given specification (synthesis) or a program state that violates it (verification). As a result, straightforward reductions to satisfiability seldom scale in practice, and it takes months or years of expert work to build a practical tool for a new application domain.\nIn this talk, I will describe some of the solver-aided tools I have built over the years, the lessons I learned from these experiences, and their reflection in my current work on solver-aided languages. To successfully navigate massive search spaces, a tool needs to employ clever encodings and efficient code, but above all, it must expose the right abstractions. The right abstraction enables the tool\u2019s client, be it a programmer or another tool, to provide domain-specific knowledge that can exponentially accelerate the underlying search. This acceleration, in turn, makes it possible to synthesize and verify real programs in a wide variety of application domains, from safety-critical software to router configuration to K-12 education. When such abstractions are built into a programming language, these benefits carry over to the task of creating the tools themselves, making it possible for every programmer to realize his own dream of automatic programming.",
      "Affiliations": ["University of Washington"],
      "AffiliationsString": "University of Washington",
      "Authors": ["eminatorlak"],
      "Key": "ecoop-2016-papers-invited-speaker-emina-torlak",
      "PersonsString": "Emina Torlak",
      "Title": "Synthesis and Verification for All (Junior DN Prize Lecture)",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-invited-speaker-emina-torlak"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-catering-coffee-break",
      "PersonsString": "",
      "Title": "Coffee break",
      "Type": "Coffee break",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-catering-coffee-break"
    },
    {
      "Abstract": "Recent trends in user-interface programming move towards reactive programming which restricts data flow and handling of application state to achieve a more declarative and functional programming style. One example is the Model-View-Update (MVU) pattern which is an adaptation of the well-known Model-View-Controller (MVC) pattern. Customized debugging and development tools can leverage this architecture style due to its separation of application state and program code. The goal of this research is to show that omniscient debugging, live programming and programming-by-example can be integrated in a specifically designed programming environment for MVU applications with considerably less overhead and complexity compared to generic imperative applications. Omniscient debugging, live programming and programming-by-example all complement each other to support understanding of program behavior, quick experimentation and intuitive ways of specifying intended behavior.",
      "Affiliations": ["University of California, Santa Cruz"],
      "AffiliationsString": "University of California, Santa Cruz",
      "Authors": ["christopherschuster"],
      "Key": "ecoop-2016-doctoral-symposium-research-proposal-live-programming-environments-for-reactive-mvu-applications",
      "PersonsString": "Christopher Schuster",
      "Title": "Live Programming Environments for Reactive MVU Applications",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-research-proposal-live-programming-environments-for-reactive-mvu-applications"
    },
    {
      "Abstract": "Previous work proposed lazy basic block versioning, a technique for just-in-time compilation of dynamic languages which we believe represents an interesting point in the design space. Basic block versioning is simple to implement, simple enough that a single developer can build a complete just-in-time compiler for JavaScript in a year, yet it performs surprisingly well as it propagates context-sensitive type information to generate type-specialized code on-the-fly. In this paper, we demonstrate that lazy basic block versioning can be extended in simple ways to propagate type information across function call boundaries. This gives some of the benefits of whole-program analysis, or a tracing compiler, without having to implement the machinery for either. We have implemented this proposal in the Higgs JavaScript virtual machine and report on the empirical evaluation of this system on a set of industry standard benchmarks. We are able to eliminate 94.3% of dynamic type tests on average, which we show is more than what is achievable with any static whole-program type analysis.",
      "Affiliations": [
        "University of Montreal",
        "Université de Montréal"
      ],
      "AffiliationsString": "University of Montreal, Université de Montréal",
      "Authors": [
        "maximechevalierboisvert",
        "marcfeeley"
      ],
      "Key": "ecoop-2016-papers-interprocedural-type-specialization-of-javascript-programs-without-type-analysis",
      "PersonsString": "Maxime Chevalier-Boisvert and Marc Feeley",
      "Title": "Interprocedural Type Specialization of JavaScript Programs Without Type Analysis",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-interprocedural-type-specialization-of-javascript-programs-without-type-analysis"
    },
    {
      "Abstract": "This paper describes QL, a language for querying complex, potentially recursive data structures. QL compiles to Datalog and runs on a standard relational database, yet it provides familiar-looking object-oriented features such as classes and methods, reinterpreted in logical terms: classes are logical properties describing sets of values, subclassing is implication, and virtual calls are dispatched dynamically by considering the most specific classes containing the receiver. Furthermore, types in QL are prescriptive and actively influence program evaluation rather than just describing it. In combination, these features enable the development of concise queries based on reusable libraries, which are written in a purely declarative style, yet can be efficiently executed even on very large data sets. In particular, we have used QL to implement static analyses for various programming languages, which scale to millions of lines of code.",
      "Affiliations": [
        "Semmle",
        "Semmle",
        "Semmle",
        "Semmle"
      ],
      "AffiliationsString": "Semmle",
      "Authors": [
        "pavelavgustinov",
        "oegedemoor",
        "michaelpeytonjones",
        "maxschaefer"
      ],
      "Key": "ecoop-2016-papers-ql-object-oriented-queries-on-relational-data",
      "PersonsString": "Pavel Avgustinov, Oege de Moor, Michael Peyton Jones and Max Schaefer",
      "Title": "QL: Object-oriented Queries on Relational Data",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-ql-object-oriented-queries-on-relational-data"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-artifacts-t-b-a-",
      "PersonsString": "",
      "Title": "T.B.A.",
      "Type": "Other",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-t-b-a-"
    },
    {
      "Abstract": "Derived values are values calculated from base values. They can be expressed in object-oriented languages by means of getters calculating the derived value, and in relational or logic databases by means of (materialized) views. However, switching to a different calculation strategy (for example caching) in object-oriented programming requires invasive code changes, and the databases limit expressiveness by disallowing recursive aggregation.\nIn this paper, we present IceDust, a data modeling language for expressing derived attribute values without committing to a calculation strategy. IceDust provides three strategies for calculating derived values in persistent object graphs: Calculate-on-Read, Calculate-on-Write, and Calculate-Eventually. We have developed a path-based abstract interpretation that provides static dependency analysis to generate code for these strategies. Benchmarks show that different strategies perform better in different scenarios. In addition we have conducted a case study that suggests that derived value calculations of systems used in practice can be expressed in IceDust.",
      "Affiliations": [
        "Delft University of Technology",
        "Delft University of Technology",
        "Delft University of Technology"
      ],
      "AffiliationsString": "Delft University of Technology",
      "Authors": [
        "dacoharkes",
        "dannymgroenewegen",
        "eelcovisser"
      ],
      "Key": "ecoop-2016-papers-icedust-incremental-and-eventually-consistent-computation-of-derived-values-in-persisted-object-graphs",
      "PersonsString": "Daco Harkes, Danny M. Groenewegen and Eelco Visser",
      "Title": "IceDust: Incremental and Eventual Computation of Derived Values in Persistent Object Graphs",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-icedust-incremental-and-eventually-consistent-computation-of-derived-values-in-persisted-object-graphs"
    },
    {
      "Abstract": "While DataBase Management Systems (DBMSs) are highly optimized, interactions across the Programming Language (PL) / DBMS boundary are costly, even for in-process embedded DBMSs. In this paper we show that programs that interact with the widely-used embedded DBMS SQLite can be significantly optimized \u2013 by a factor of 3.4 in our benchmarks \u2013 by inlining across the PL / DBMS boundary. We achieved this speed-up by replacing parts of SQLite\u2019s C interpreter with RPython code and composing the resulting meta-tracing VM \u2013 called SQPyte \u2013 with the PyPy VM. SQPyte does not compromise stand-alone SQL performance: it is 2.2% faster than SQLite on the widely used TPC-H benchmark suite.",
      "Affiliations": [
        "King's College London ",
        "Carnegie Mellon University",
        "King's College London"
      ],
      "AffiliationsString": "King's College London , Carnegie Mellon University, King's College London",
      "Authors": [
        "carlfriedrichbolz",
        "daryakurilova",
        "laurietratt"
      ],
      "Key": "ecoop-2016-papers-making-an-embedded-dbms-jit-friendly",
      "PersonsString": "Carl Friedrich Bolz, Darya Kurilova and Laurence Tratt",
      "Title": "Making an Embedded DBMS JIT-friendly",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-making-an-embedded-dbms-jit-friendly"
    },
    {
      "Abstract": "Designing, developing and maintaining concurrent applications is an error-prone and time-consuming task; most difficulties arise because compilers are usually unable to check whether the inputs/outputs performed by a program at runtime will adhere to a given protocol specification. To address this problem, we propose lightweight session programming in Scala: we leverage the native features of the Scala type system and standard library, to introduce (1) a representation of session types as Scala types, and (2) a library, called lchannels, with a convenient API for session-based programming, supporting local and distributed communication. We generalise the idea of Continuation-Passing Style (CPS) protocols, studying their formal relationship with session types. We illustrate how session programming can be carried over in Scala: how to formalise a communication protocol, and represent it using Scala classes and lchannels, letting the compiler help spotting protocol violations. We attest the practicality of our approach with a complex use case, and evaluate the performance of lchannels with a series of benchmarks.",
      "Affiliations": [
        "Imperial College London",
        "Imperial College London, UK"
      ],
      "AffiliationsString": "Imperial College London, Imperial College London, UK",
      "Authors": [
        "alcestescalas",
        "nobukoyoshida"
      ],
      "Key": "ecoop-2016-papers-lightweight-session-programming-in-scala",
      "PersonsString": "Alceste Scalas and Nobuko Yoshida",
      "Title": "Lightweight session programming in Scala",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-lightweight-session-programming-in-scala"
    },
    {
      "Abstract": "This artifact is a PLT Redex implementation of the operational semantics presented in Object Inheritance Without Classes. It defines the core syntax and runtime semantics of the Graceless language, and then extends it in multiple different ways to produce the various implementations of object inheritance, including single and multiple inheritance. The implementation makes the semantics runnable, and precisely defines some behaviour which is defined informally in the paper.",
      "Affiliations": [
        "Victoria University of Wellington",
        "Victoria University of Wellington"
      ],
      "AffiliationsString": "Victoria University of Wellington",
      "Authors": [
        "timothyjones",
        "michaelhomer"
      ],
      "Key": "ecoop-2016-artifacts-object-inheritance-without-classes",
      "PersonsString": "Timothy Jones and Michael Homer",
      "Title": "Object Inheritance Without Classes",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-object-inheritance-without-classes"
    },
    {
      "Abstract": "Security-typed languages provide effective ways to statically enforce security policies, such as confidentiality. Downsides that make a security typing discipline hard to adopt are the annotation overhead and the rigidity of the typing discipline itself. Those problems can be approached using both optional typing and gradual typing. Prior work have focused on the gradual security typing approach. In this work we start to explore the design space of optional security typing since there are different interpretations of what optional security typing means. We describe two interpretations that produce type systems with different levels of strictness regarding the security analysis. This suggests that programmers may benefit from being given the possibility to choose depending on the desired flexibility.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["raimilcruz"],
      "Key": "ecoop-2016-doctoral-symposium-exploring-optional-security-typing",
      "PersonsString": "Raimil Cruz",
      "Title": "Exploring optional security typing",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-exploring-optional-security-typing"
    },
    {
      "Abstract": "LJGS is a lightweight Java core calculus with a gradual security type system. The calculus guarantees secure information flow for sequential, class-based, object-oriented programming with mutable objects and virtual method calls. An LJGS program is composed of fragments that are checked either statically or dynamically. Statically checked fragments adhere to a security type system so that they incur no run-time penalty whereas dynamically checked fragments rely on run-time security labels. The programmer marks the boundaries between static and dynamic checking with casts so that it is always clear whether a program fragment requires run-time checks. LJGS requires security annotations on fields and methods. A field annotation either specifies a fixed static security level or it prescribes dynamic checking. A method annotation specifies a constrained polymorphic security signature. The types of local variables in method bodies are analyzed flow-sensitively and require no annotation. The dynamic checking of fields relies on a static points-to analysis to approximate implicit flows. We prove type soundness and non-interference for LJGS.",
      "Affiliations": [
        "University of Freiburg, Germany",
        "University of Freiburg"
      ],
      "AffiliationsString": "University of Freiburg, Germany, University of Freiburg",
      "Authors": [
        "luminousfennell",
        "peterthiemann"
      ],
      "Key": "ecoop-2016-papers-ljgs-gradual-security-types-for-object-oriented-languages",
      "PersonsString": "Luminous Fennell and Peter Thiemann",
      "Title": "LJGS: Gradual Security Types for Object-Oriented Languages",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-ljgs-gradual-security-types-for-object-oriented-languages"
    },
    {
      "Abstract": "Gradual typing is an approach for designing programming languages that integrate static and dynamic type checking. Gradual typing gives the programmer control over which regions of a program are statically checked and which regions are dynamically checked. Over the last decade, there has been renewed interest in such an integration partly due to the rise in popularity of dynamic languages. They have been used to create large programs, which exposed the need for the early error detection and modularity provided by static type checking. Gradual typing provides a practical migration path for dynamically typed programs to become more statically typed. This lecture will give a comprehensive review of the state of the art in gradual typing. It will describe a) the major challenges in the design and implementation of gradually typed languages, b) the research that has addressed many of of these challenges, and c) the open problems that need to be solved. The challenges facing gradual typing include both theoretical questions and system design problems. On the theoretical side, there are challenges like characterizing what gradual typing is, what type soundness should mean, and whether relational parametricity can be preserved. On the system design side, there are challenges such as creating language runtimes that implement gradual typing in a time and space-efficient manner.",
      "Affiliations": ["Indiana University"],
      "AffiliationsString": "Indiana University",
      "Authors": ["jeremysiek"],
      "Key": "summer-school-gradual-type-system",
      "PersonsString": "Jeremy Siek",
      "Title": "Gradual Type Systems",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/summer-school-gradual-type-system"
    },
    {
      "Abstract": "Modern software applications are highly configurable, allowing configuration options to be changed even during program execution. When dynamic configuration updating is implemented incorrectly, program errors can result. These program errors occur primarily when stale data\u2014computed from old configurations\u2014or inconsistent data\u2014computed from different configurations\u2014are used. We introduce Staccato, the first tool designed to detect these errors. Staccato uses a dynamic analysis in the style of taint analysis to find the use of stale configuration data in Java programs. It supports concurrent programs running on commodity JVMs. In some cases, Staccato can provide automatic bug avoidance and semi-automatic repair when errors occur.\nWe evaluated Staccato on 3 open-source applications that support complex reconfigurability. Staccato found multiple errors in all of them. Staccato requires only modest annotation overhead and has moderate performance overhead.",
      "Affiliations": [
        "University of Washington",
        "University of Washington, USA"
      ],
      "AffiliationsString": "University of Washington, University of Washington, USA",
      "Authors": [
        "johntoman",
        "dangrossman"
      ],
      "Key": "ecoop-2016-papers-staccato-a-bug-finder-for-dynamic-configuration-updates",
      "PersonsString": "John Toman and Dan Grossman",
      "Title": "Staccato: A Bug Finder for Dynamic Configuration Updates",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-staccato-a-bug-finder-for-dynamic-configuration-updates"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-catering-ecoop-banquet",
      "PersonsString": "",
      "Title": "ECOOP Banquet",
      "Type": "Dinner",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-catering-ecoop-banquet"
    },
    {
      "Abstract": "Application-level energy management is emerging in the form of frameworks and languages that treat energy management as a first-class concern. One major advantage to this approach is that it helps programmers reason about the energy behaviors of their programs instead of viewing said behaviors as merely a side-effect of computation. We introduce Ent, a novel programming language that encourages proactive and adaptive mode-based energy management at the application level. The proactive model allows programmers to leverage knowledge of their application by characterizing the energy behaviors of different program fragments with modes. The adaptive model allows such characterization to be delayed until run time, useful for capturing dynamic program behaviors dependent on program states, configuration settings, and external battery levels or CPU temperatures. Our key insight is both models can be unified under a hybrid type system with static and dynamic typing. We have implemented Ent as an extension of Java; in addition, Ent ships with an auxiliary library for querying battery and temperature information, abstracting away tedious hardware communication for Ent programmers. Ent has been ported to two mobile-platforms: an Intel CPU laptop and the Raspberry Pi. Empirical studies show Ent may improve the programmability, debuggability, energy efficiency, and productivity of battery-aware and temperature-aware programs. Future work will focus on porting Ent to the Android platform.",
      "Affiliations": ["SUNY Binghamton"],
      "AffiliationsString": "SUNY Binghamton",
      "Authors": ["anthonycanino"],
      "Key": "posters-energy-aware-programming-with-ent",
      "PersonsString": "Anthony Canino",
      "Title": "Energy-Aware Programming with Ent",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-energy-aware-programming-with-ent"
    },
    {
      "Abstract": "Evaluating pointer analyses with respect to soundness and precision has been a tedious task. Within the artifact we present PointerBench, the benchmark suite used in the paper to evaluate the pointer analysis Boomerang with two other demand-driven pointer analyses. We show PointerBench can be used to test different pointer analyses.\nIn addition to that, there are usage examples for Boomerang on simple test programs. The test programs and the input on these programs to Boomerang can be changed to experiment with the algorithm and its features.\nAs a third part the artifact contains the integration of Boomerang and the other two analyses into FlowDroid which can then be executed on arbitrary Android applications.",
      "Affiliations": [
        "Fraunhofer SIT",
        "Fraunhofer IEM",
        "TU Darmstadt",
        "Heinz Nixdorf Institut, Paderborn University and Fraunhofer IEM"
      ],
      "AffiliationsString": "Fraunhofer SIT, Fraunhofer IEM, TU Darmstadt, Heinz Nixdorf Institut, Paderborn University and Fraunhofer IEM",
      "Authors": [
        "johannesspath",
        "lisanguyenquangdo",
        "karimali",
        "ericbodden"
      ],
      "Key": "ecoop-2016-artifacts-boomerang-demand-driven-flow-and-context-sensitive-pointer-analysis-for-java",
      "PersonsString": "Johannes Späth, Lisa Nguyen Quang Do, Karim Ali and Eric Bodden",
      "Title": "Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysis for Java",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-boomerang-demand-driven-flow-and-context-sensitive-pointer-analysis-for-java"
    },
    {
      "Abstract": "This paper is a theoretical study of practical problem: the automatic generation of Java Fluent APIs from their specification. We explain why the problem\u2019s core lies with the expressive power of Java generics. Our main result is that automatic generation is possible whenever the specification is an instance of the set of deterministic context-free languages, a set which contains most practical languages. Other contributions include a collection of techniques and idioms o the limited meta-programming possible with Java generics, and an empirical measurement demonstrating that the runtime of the ``javac\u2019\u2019 compiler of Java the may be exponential in the program\u2019s length, even for programs composed of a handful of lines and which do not rely on overly complex use of generics.",
      "Affiliations": [
        "Israel Institute of Technology",
        "Technion \u2013 Israel Institute of Technology"
      ],
      "AffiliationsString": "Israel Institute of Technology, Technion \u2013 Israel Institute of Technology",
      "Authors": [
        "yossigill",
        "tomerlevy"
      ],
      "Key": "ecoop-2016-papers-formal-language-recognition-with-the-java-type-checker",
      "PersonsString": "Yossi Gill and Tomer Levy",
      "Title": "Formal Language Recognition with the Java Type Checker",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-formal-language-recognition-with-the-java-type-checker"
    },
    {
      "Abstract": "",
      "Affiliations": ["Alcatel-Lucent Bell Labs"],
      "AffiliationsString": "Alcatel-Lucent Bell Labs",
      "Authors": ["ericjul"],
      "Key": "ecoop-2016-doctoral-symposium-how-to-get-your-ph-d-done",
      "PersonsString": "Eric Jul",
      "Title": "Invited Talk: How to get your Ph.D. DONE",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-how-to-get-your-ph-d-done"
    },
    {
      "Abstract": "This paper investigates language constructs for high-level and type-safe manipulation of JSON objects in a typed functional language. A major obstacle in representing JSON in a static type system is their heterogeneous nature: in most practical JSON APIs, a JSON array is a heterogeneous list consisting of, for example, objects having common fields and possibly some optional fields. This paper presents a typed calculus that reconciles static typing constraints and heterogeneous JSON arrays based on the idea of partially dynamic records originally proposed and sketched by Buneman and Ohori for complex database object manipulation. Partially dynamic records are dynamically typed records, but some parts of their structures are statically known. This feature enables us to represent JSON objects as typed data structures. The proposed calculus smoothly extends with ML-style pattern matching and record polymorphism. These results yield a typed functional language where the programmer can directly import JSON data as terms having static types, and can manipulate them with the full benefits of static polymorphic type-checking. The proposed calculus has been embodied in SML#, an extension of Standard ML with record polymorphism and other practically useful features. This paper also reports on the details of the implementation and demonstrates its feasibility through examples using actual Web APIs. The SML# version 3.1.0 compiler includes JSON support presented in this paper, and is available from Tohoku University as open-source software under a BSD-style license.",
      "Affiliations": [
        "Tohoku University",
        "Tohoku University",
        "Tohoku University",
        "Tohoku University and Hitachi Solutions East Japan, Ltd."
      ],
      "AffiliationsString": "Tohoku University, Tohoku University and Hitachi Solutions East Japan, Ltd.",
      "Authors": [
        "atsushiohori",
        "katsuhiroueno",
        "tomohirosasaki",
        "daisukekikuchi"
      ],
      "Key": "ecoop-2016-papers-a-calculus-with-partially-dynamic-records-for-typeful-manipulation-of-json-objects",
      "PersonsString": "Atsushi Ohori, Katsuhiro Ueno, Tomohiro Sasaki and Daisuke Kikuchi",
      "Title": "A Calculus with Partially Dynamic Records for Typeful Manipulation of JSON Objects",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-a-calculus-with-partially-dynamic-records-for-typeful-manipulation-of-json-objects"
    },
    {
      "Abstract": "Despite years of research and development of static code analysis tools, industrial adoption of such tools still shows high abandonment rates. End-user experience highlights common issues that severely impact tool adoption. Long waiting times, numerous false positives, and a high number of warnings count among them. While past research has largely focused on improving the scalability and the precision of the tools, we advocate the notion of designing static analyses in a user-centric fashion. We achieve this by embedding the needs of the end-users - the code developers- into the analysis, providing them with tools that make static analysis easier to understand and to handle.",
      "Affiliations": ["Fraunhofer IEM"],
      "AffiliationsString": "Fraunhofer IEM",
      "Authors": ["lisanguyenquangdo"],
      "Key": "ecoop-2016-doctoral-symposium-user-centric-static-analysis",
      "PersonsString": "Lisa Nguyen Quang Do",
      "Title": "User-Centric Static Analysis",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-user-centric-static-analysis"
    },
    {
      "Abstract": "The development of modern web applications has become a complex task. Not only are programmers required to combine database, server and client technologies, but libraries to make the application more responsive and interactive must be integrated as well. Such rich internet applications thus consist of three tiers (database, client and server) where the client tier contains a substantial part of the application logic. Instead of manually reconciling the tiers and their own technologies, tierless programming reduces this complexity by taking a single language approach. This way the programmer focuses on the application logic, while a tierless compiler is responsible for distributing the code across the different tiers.\nInstead of forcing the programmer to learn another new language, we advocate an approach where a general-purpose language is used. JavaScript is already the scripting language for browsers, but is now commonly accepted as server language as well. In previous work [1], we describe the tier splitting process that enables tierless JavaScript programs to be transformed into code for client and server tier. The programmer writes the JavaScript logic, adds annotations (@client and @server) to indicate the location of the code. The distributed logic is injected where necessary after the tier splitting.\nThe tier splitting process works on a program dependence graph, where the statements in the program are nodes and control and data flow dependencies are edges. By using a program slicing algorithm the program is split into two parts, taking into account the dependencies between the statements. The two parts are translated into JavaScript for the client and server tier. For example, cross-tier calls are transformed into remote procedure calls.\nHowever, concerns like offline availability, latency and security transcend the program logic and the distinction between server and client code. Instead of merely programming in terms of server and client locations, it is more desirable to be able to program in terms of \u201cfunctionalities\u201d. Such functionalities can contain variables, functions, objects,.. and each functionality can be assigned to a certain tier. Based on the dependence graph, we can derive certain metrics of the program. The programmer can then relocate certain functionalities based on these metrics to another tier.\nFor example, an assistance tool for offline web applications can easily be built by analysing the tierless code, divided into functionalities, and building the dependence graph. Using an extensive query API on top of this graph, all information that is needed to calculate the percentage of offline availability for each functionality is available. These include counting remote data dependencies, thus meaning that data from another tier is accessed. Based on this report the developer can easily change the location of functionalities to gain a higher percentage for functionalities that must completely or partly work offline.\nFurthermore, we can extend this to a scenario where not every functionality is assigned to a tier from the beginning. The developer can choose a \u201cplacement strategy\u201d that calculates where these functionalities should belong. We think of strategies that focus on security, offline availability, \u2026 or a combination of different concerns. The developer can thus experiment with different placement strategies, in combination with the reports of tools we described earlier on, to achieve different placements of the functionality tiers. Once satisfied with the results, the program can then be compiled into distributed client and server code.\n[1] L. Philips, C. De Roover, T. Van Cutsem, and W. De Meuter, \u201cTowards tierless web development without tierless languages,\u201d in Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, [25] and Reflections on Programming &amp; Software, ser. Onward! 2014. New York, NY, USA: ACM, 2014, pp. 69\u201381.",
      "Affiliations": [
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel"
      ],
      "AffiliationsString": "Vrije Universiteit Brussel",
      "Authors": [
        "laurephilips",
        "joeridekoster",
        "wolfgangdemeuter",
        "coenderoover"
      ],
      "Key": "posters-tier-splitting-in-javascript-beyond-client-and-server-tier",
      "PersonsString": "Laure Philips, Joeri De Koster, Wolfgang De Meuter and Coen De Roover",
      "Title": "Tier-splitting in JavaScript: beyond client and server tier",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-tier-splitting-in-javascript-beyond-client-and-server-tier"
    },
    {
      "Abstract": "Poster associated with the ECOOP research paper \u201cA Calculus with Partially Dynamic Records for Typeful Manipulation of JSON Objects\u201d.",
      "Affiliations": [
        "Tohoku University",
        "Tohoku University",
        "Tohoku University",
        "Tohoku University and Hitachi Solutions East Japan, Ltd."
      ],
      "AffiliationsString": "Tohoku University, Tohoku University and Hitachi Solutions East Japan, Ltd.",
      "Authors": [
        "atsushiohori",
        "katsuhiroueno",
        "tomohirosasaki",
        "daisukekikuchi"
      ],
      "Key": "posters-sml-with-typeful-manipulation-of-json-objects",
      "PersonsString": "Atsushi Ohori, Katsuhiro Ueno, Tomohiro Sasaki and Daisuke Kikuchi",
      "Title": "SML# with typeful manipulation of JSON objects",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-sml-with-typeful-manipulation-of-json-objects"
    },
    {
      "Abstract": "Fuzzing is a popular technique to create inputs for testing software that processes structured data. It has been successfully applied in various domains, ranging from compilers and interpreters over program analyses to rendering engines, image manipulation tools, and word processors. Existing fuzzing techniques create data in a particular target language in two ways. First, grammar-based approaches build on top of a formal grammar that describes the input format and create data that complies with this grammar. Second, whitebox approaches analyze the program under test to generate input that triggers particular paths. An important limitation of grammar-based approaches is that a grammar alone is insufficient to create input data that is realistic and effective for testing. Reasons include that simply expanding recursive grammar rules can lead to infinitely large data and that treating all possible grammar expansions as equally likely often creates unrealistic data. Whitebox approaches assume that fuzz testing targets one particular program under test and that this program is available at input generation time. These conditions are not always given, e.g., when using fuzzing to create inputs for differential testing across multiple supposedly equivalent programs or when fuzz testing remote web applications. Moreover, whitebox techniques often suffer from scalability issues.\nWe present Genesis, a generic approach for generating structured data without an a priori known model. The key idea is to exploit a given corpus of example data to automatically infer a probabilistic, generative model that creates new data with properties similar to the corpus. The model is generative in the sense that it allows for generating new example data that is compatible with the model. It is probabilistic in the sense that the inferred properties are guarded by probabilities, allowing Genesis to generate different data by taking different random decisions. As a language-independent representation of data, Genesis uses trees with labeled nodes and edges. Such trees can represent a wide range of structured data, e.g, the abstract syntax trees of programs in arbitrary programming languages. The only two requirements to add support for a new data format to Genesis are 1) a way to transform data into trees and vice versa, and 2) a set of example data to learn from. To support a wide range of different properties, Genesis is designed as a framework with an extensible set of techniques to infer a generative model.\nAs two examples of target languages that Genesis is useful for, we apply it to JavaScript programs and HTML documents. Our evaluation shows that, even though we do not provide a model of the target language, the approach generates input data that mostly complies with the target language. Specifically, given a corpus of less than 100 HTML documents, the approach creates HTML documents that have only 2.06 validation errors per generated kilobyte of HTML. Given a corpus of 10,000 JavaScript programs, 93.9% of the created programs are syntactically valid and 20.7% of them execute without any runtime errors. Both values are higher than for programs generated by existing fuzz testing approaches that are specifically designed for a particular target language. Moreover, using the Genesis-generated JavaScript programs for differential testing of web browsers, we find various inconsistencies, including browser bugs, unimplemented language features, and browser-specific behavior that developers should be aware of.",
      "Affiliations": [
        "TU Darmstadt, Germany",
        "TU Darmstadt"
      ],
      "AffiliationsString": "TU Darmstadt, Germany, TU Darmstadt",
      "Authors": [
        "jibeshpatra",
        "michaelpradel"
      ],
      "Key": "posters-language-independent-fuzz-testing-with-probabilistic-generative-models",
      "PersonsString": "Jibesh Patra and Michael Pradel",
      "Title": "Language-Independent Fuzz Testing with Probabilistic, Generative Models",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-language-independent-fuzz-testing-with-probabilistic-generative-models"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-doctoral-symposium-welcome",
      "PersonsString": "",
      "Title": "Welcome",
      "Type": "Day opening",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-welcome"
    },
    {
      "Abstract": "Break",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-catering-break",
      "PersonsString": "",
      "Title": "Break",
      "Type": "Coffee break",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-catering-break"
    },
    {
      "Abstract": "It is widely considered that the adoption of iterative software engineering methodologies and in particular continuous testing helps ensure high quality software and reduce bugs. The successful application of continuous testing however rests on the assumptions that testing is cheap, fast and easily repeatable. Software development for control systems in the chemical production domain generally cannot satisfy that constraint as evaluating the correctness of a recipe program requires its execution on a live production environment which can take multiple days to complete, usually comes at great expense in raw materials and can sometimes create a reliance on safety systems to manage risk. As a result testing in the chemical domain becomes a bottleneck that prevents true iterative cycles taking place. This in turn leads to a linear waterfall-like process with all its inherent problems and limitations.\nTo help resolve this problem, we propose a generic simulation framework, based on a domain model of core components of chemical productions plants. This simulation can be used in place of the live plant during a first phase of testing. Only once an engineer is satisfied that the software is performing as expected on the simulation, will that live plant hardware need to be involved. This will help greatly in reducing the bottleneck in the testing phase by allowing this to be quick and automated while reducing the risk and cost involved.",
      "Affiliations": ["University of East Anglia"],
      "AffiliationsString": "University of East Anglia",
      "Authors": ["adamziolkowski"],
      "Key": "ecoop-2016-doctoral-symposium-domain-based-simulation-modelling-to-enable-continuous-testing-for-software-development-in-the-chemical-industry",
      "PersonsString": "Adam Ziolkowski",
      "Title": "Domain-based Simulation Modelling to Enable Continuous Testing for Software Development in the Chemical Industry",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-domain-based-simulation-modelling-to-enable-continuous-testing-for-software-development-in-the-chemical-industry"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-papers-awards",
      "PersonsString": "",
      "Title": "Awards",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-awards"
    },
    {
      "Abstract": "Flix is a declarative language for specifying and solving fixed-point computations on lattices, such as static program analyses [3]. The syntax and semantics of Flix are inspired by Datalog, but extended to support user-defined lattices and monotone functions. Flix is open-source and available on GitHub [4].\nStatic analyzers implemented in general-purpose languages, such as C++ or Java, can be difficult to understand and maintain. A more elegant approach is to express the mutual dependencies of a fixed-point computation in a declarative manner. Thus, there is interest in using a declarative language such as Datalog to implement pointer analyses [1].\nHowever, Datalog does not support lattices or functions, which limits its expressivity. While it is sometimes possible to work around these limitations, it can be slow and cumbersome. Furthermore, most Datalog implementations have poor integration with existing tools.\nFlix allows users to define their own lattices and functions. Rules over relations and lattices are expressed in a logic language with Datalog-like syntax, while functions are written in a pure functional language with Scala-like syntax. The functional language, while small, supports algebraic data types, sets, and pattern matching. Flix also supports interop with JVM languages.\nFlix is implemented in Scala, with a standard front-end for parsing, weeding, resolving, and typechecking. The back-end has two components, a solver for the logic language and an interpreter for the functional language. As an initial step to improve performance, we have implemented a bytecode generator to replace the interpreter.\nIn order to generate JVM bytecode for the functional language, the abstract syntax tree requires a number of transformations. For example, pattern matching must be desugared into lower-level primitives, such as if-then-else expressions and nested lambda functions. Lambdas need to be converted to closures and then lifted. Finally, there are interesting design decisions about how to compile closures to bytecode, and how to implement interop to allow Flix code to call functions written in Scala, or any other JVM language.\nOn an implementation of the Strong Update analysis [2], running the generated bytecode is 1.7x faster than using the interpreter. On a purely functional benchmark (i.e. one that does not use the solver for evaluating rules) such as an n-body simulation [5], the generated bytecode is 19x faster.\n[1] M. Bravenboer and Y. Smaragdakis. Strictly declarative specification of sophisticated points-to analyses. OOPSLA \u201909. http://dx.doi.org/10.1145/1640089.1640108\n[2] O. Lhot&aacute;k and K.-C. A. Chung. Points-to analysis with efficient strong updates. POPL \u201911. http://dx.doi.org/10.1145/1925844.1926389\n[3] M. Madsen, M.-H. Yee, and O. Lhot&aacute;k. From Datalog to Flix: a declarative language for fixed points on lattices. PLDI \u201916. http://dx.doi.org/10.1145/2908080.2908096\n[4] https://github.com/flix/flix\n[5] http://benchmarksgame.alioth.debian.org/u64q/nbody-description.html",
      "Affiliations": [
        "University of Waterloo",
        "University of Waterloo",
        "University of Waterloo"
      ],
      "AffiliationsString": "University of Waterloo",
      "Authors": [
        "minghoyee",
        "magnusmadsen",
        "ondrejlhotak"
      ],
      "Key": "posters-flix-a-declarative-language-for-static-program-analyses",
      "PersonsString": "Ming-Ho Yee, Magnus Madsen and Ondřej Lhoták",
      "Title": "Flix: A Declarative Language for Static Program Analyses",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-flix-a-declarative-language-for-static-program-analyses"
    },
    {
      "Abstract": "Scripting languages \u2014 the JavaScripts, Pythons, Luas of this world \u2014 play a central role in today\u2019s programming, but offer significant challenges to traditional programming languages activities like designing formal semantics, type systems, and other analytic tools. In this presentation I will discuss lessons learned from a ten year investigation at Brown into scripting languages.\nHomework to prepare for the session: please watch the Wat talk by Gary Bernhardt (&lt; 5 minutes).",
      "Affiliations": ["Brown University"],
      "AffiliationsString": "Brown University",
      "Authors": ["shriramkrishnamurthi"],
      "Key": "summer-school-building-a-research-program-for-scripting-languages",
      "PersonsString": "Shriram Krishnamurthi",
      "Title": "Building a Research Program for Scripting Languages",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/summer-school-building-a-research-program-for-scripting-languages"
    },
    {
      "Abstract": "Poster associated with an ECOOP research paper.",
      "Affiliations": [
        "University of West Bohemia, Pilsen, CZ",
        "Massey University, New Zealand"
      ],
      "AffiliationsString": "University of West Bohemia, Pilsen, CZ, Massey University, New Zealand",
      "Authors": [
        "kamiljezek",
        "jensdietrich"
      ],
      "Key": "posters-magic-with-dynamo-flexible-cross-component-linking-for-java-with-invokedynamic",
      "PersonsString": "Kamil Jezek and Jens Dietrich",
      "Title": "Magic with Dynamo - Flexible Cross-Component Linking for Java with Invokedynamic",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-magic-with-dynamo-flexible-cross-component-linking-for-java-with-invokedynamic"
    },
    {
      "Abstract": "Poster associated the ECOOP research paper \u201cTransactional Tasks: Parallelism in Software Transactions\u201d.\nMany programming languages, such as Clojure, Scala, and Haskell, support different concurrency models. In practice these models are often combined, however the semantics of the combinations are not always well-defined. In this paper, we study the combination of futures and Software Transactional Memory. Currently, futures created within a transaction cannot access the transactional state safely, violating the serializability of the transactions and leading to unexpected behavior. We define transactional tasks: a construct that allows futures to be created in transactions. Transactional tasks allow the parallelism in a transaction to be exploited, while providing safe access to the state of their encapsulating transaction. We show that transactional tasks have several useful properties: they are coordinated, they maintain serializability, and they do not introduce non-determinism. As such, transactional tasks combine futures and Software Transactional Memory, allowing the potential parallelism of a program to be fully exploited, while preserving the properties of the separate models where possible.",
      "Affiliations": [
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel"
      ],
      "AffiliationsString": "Vrije Universiteit Brussel",
      "Authors": [
        "janwillemswalens",
        "joeridekoster",
        "wolfgangdemeuter"
      ],
      "Key": "posters-transactional-tasks-parallelism-in-software-transactions",
      "PersonsString": "Janwillem Swalens, Joeri De Koster and Wolfgang De Meuter",
      "Title": "Transactional Tasks: Parallelism in Software Transactions",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-transactional-tasks-parallelism-in-software-transactions"
    },
    {
      "Abstract": "When one object makes a request of another, why do we expect that the second object\u2019s behavior correctly satisfies the first object\u2019s request? The need to cope with such principal-agent problems shapes programming practice as much as it shapes human organizations and economies. However, the literature about such plan coordination issues among humans is almost disjoint from the literature about these issues among objects. Even the terms used are unrelated.\nInstead, these fields have much to learn from each other\u2014both from their similarities and from the causes of their differences. We propose a framework for thinking about decision alignment as a bridge between these disciplines.",
      "Affiliations": ["Google Inc."],
      "AffiliationsString": "Google Inc.",
      "Authors": ["markmiller"],
      "Key": "ecoop-2016-papers-plenary-speaker-",
      "PersonsString": "Mark Miller",
      "Title": "The Elements of Decision Alignment: Large programs as complex organizations",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-plenary-speaker-"
    },
    {
      "Abstract": "Recent years have seen growing interest in the retrofitting of type systems onto dynamically-typed programming languages, in order to improve type safety, programmer productivity, or performance. In such cases, type system developers must strike a delicate balance between disallowing popular coding patterns in order to keep the type system simple and intuitively appealing, or including them at the expense of additional complexity and effort. Thus far, the process for designing retrofitted type systems has been largely ad-hoc, because evaluating multiple variations of a type system on large bodies of existing code is a significant undertaking.\nWe present trace typing: a framework for automatically and quantitatively evaluating variations of a retrofitted type system on large code bases. The trace typing approach involves gathering traces of program executions, inferring types for instances of variables and expressions occurring in a trace, and merging types according to merge strategies that reflect specific (combinations of) choices in the source-level type system design space.\nWe evaluate trace typing through several experiments. We compare several variations of type systems retrofitted onto JavaScript, and measuring the number of program locations with type errors reported in each case on a benchmark suite of over two hundred thousand lines of JavaScript code. We also report on using trace typing to validate and guide the design of a new retrofitted type system, whose purpose is to enable ahead-of-time compilation for JavaScript. Finally, we leverage the types computed by trace typing to automatically identify tag tests - dynamic checks that refine a type - and examine the variety of tests identified.",
      "Affiliations": [
        "Aarhus University",
        "Drexel University",
        "Samsung Research America",
        "Samsung Research America",
        "Samsung Research America",
        "University of California, Berkeley"
      ],
      "AffiliationsString": "Aarhus University, Drexel University, Samsung Research America, University of California, Berkeley",
      "Authors": [
        "esbenandreasen",
        "colingordon",
        "satishchandra",
        "manusridharan",
        "franktip",
        "koushiksen"
      ],
      "Key": "ecoop-2016-papers-trace-typing-an-approach-for-evaluating-retrofitted-type-systems",
      "PersonsString": "Esben Andreasen, Colin Gordon, Satish Chandra, Manu Sridharan, Frank Tip and Koushik Sen",
      "Title": "Trace Typing: An Approach for Evaluating Retrofitted Type Systems",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-trace-typing-an-approach-for-evaluating-retrofitted-type-systems"
    },
    {
      "Abstract": "As was shown in earlier studies, mainstream object-oriented (OO) languages C# and Java provide weaker support for generic programming (GP) as compared with functional languages such as Haskell or SML. Having explored the instruments for GP in modern OO languages Scala, Ceylon, Kotlin, Rust, and Swift, we have found out that all of them, as well as C# and Java, stick to the same approach to constraining type parameters, which we called the \u201cConstraints-are-Types\u201d approach. It turns out that the approach has several inevitable limitations, and because of that Haskell type classes still provide better support for GP than modern object-oriented languages do. This research is aimed to discover a mechanism that would allow to radically improve the support for generic programming in OO languages. We identify the requirements that such mechanism should satisfy, present a design of the appropriate mechanism (concept parameters), and propose a sketch of its implementation for the C# language.",
      "Affiliations": ["Southern Federal University"],
      "AffiliationsString": "Southern Federal University",
      "Authors": ["juliabelyakova"],
      "Key": "ecoop-2016-doctoral-symposium-concept-parameters-as-a-new-mechanism-of-generic-programming-for-c-language",
      "PersonsString": "Julia Belyakova",
      "Title": "Concept Parameters as a New Mechanism of Generic Programming for C# Language",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-concept-parameters-as-a-new-mechanism-of-generic-programming-for-c-language"
    },
    {
      "Abstract": "The ability to specify immutability in a programming language is a powerful tool for developers, enabling them to better understand and more safely transform their code without fearing unintended changes to program state. The C++ programming language allows developers to specify a form of immutability using the const keyword. In this work, we characterize the meaning of the C++ const qualifier and present the ConstSanitizer tool, which dynamically verifies a stricter form of immutability than that defined in C++: it identifies const uses that are either not consistent with transitive immutability, that write to mutable fields, or that write to formerly-const objects whose const`-ness has been cast away.\nWe evaluate a set of 7 C++ benchmark programs to find writes-through-const, establish root causes for how they fail to respect our stricter definition of immutability, and assign attributes to each write (namely: synchronized, not visible, buffer/cache, delayed initialization, and incorrect). ConstSanitizer finds 17 archetypes for writes in these programs which do not respect our version of immutability. Over half of these seem unnecessary to us. Our classification and observations of behaviour in practice contribute to the understanding of a widely-used C++ language feature.",
      "Affiliations": [
        "University of Waterloo",
        "University of Waterloo, Canada"
      ],
      "AffiliationsString": "University of Waterloo, University of Waterloo, Canada",
      "Authors": [
        "jonathaneyolfson",
        "patricklam"
      ],
      "Key": "ecoop-2016-papers-how-does-const-relate-to-immutability-",
      "PersonsString": "Jonathan Eyolfson and Patrick Lam",
      "Title": "C++ const and Immutability: An Empirical Study of Writes-Through-const",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-how-does-const-relate-to-immutability-"
    },
    {
      "Abstract": "Scientific progress is predicated on quantifiable advances. The questions of what to measure and how to measure it are central to empirical computer science. From compiler to distributed machine learning algorithms, setting up experiments and reporting their outcome is something we keep getting wrong. This course will provide motivation in the form of a number of cautionary tales, and then will give simple techniques for designing experiments along with the statistical basics suited for most common benchmarking situations. We will also introduce the concepts of reproducibility and repeatability and do some hands on exercises in R.",
      "Affiliations": [
        "Northeastern University",
        "Northeastern University"
      ],
      "AffiliationsString": "Northeastern University",
      "Authors": [
        "tomaskalibera",
        "janvitek"
      ],
      "Key": "summer-school-experimental-evaluation-of-programming-systems",
      "PersonsString": "Tomas Kalibera and Jan Vitek",
      "Title": "Experimental Evaluation of Programming Systems",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/summer-school-experimental-evaluation-of-programming-systems"
    },
    {
      "Abstract": "Program analysis is fundamental for program optimizations, debugging, and many other tasks. But developing program analyses has been a challenging and error-prone process for general users. Declarative program analysis has shown the promise to dramatically improve the productivity in the development of program analyses. Current declarative program analysis is however subject to some major limitations in supporting cooperations among analysis tools, guiding program optimizations, and often requires much effort for repeated program preprocessing. In this work, we advocate the integration of ontology into declarative program analysis. As a way to standardize the definitions of concepts in a domain and the representation of the knowledge in the domain, ontology offers a promising way to address the limitations of current declarative program analysis. We develop a prototype framework named PATO for conducting program analysis upon ontology-based program representation. Experiments on six program analyses confirm the potential of ontology for complementing existing declarative program analysis. It supports multiple analyses without separate program preprocessing, promotes cooperative Liveness analysis between two compilers, and effectively guides a data placement optimization for Graphic Processing Units (GPU).",
      "Affiliations": [
        "NCSU",
        "",
        "LLNL",
        "NCSU"
      ],
      "AffiliationsString": "NCSU, , LLNL",
      "Authors": [
        "yuezhao",
        "guoyangchen",
        "chunhualiao",
        "xipengshen"
      ],
      "Key": "ecoop-2016-papers-towards-ontology-based-program-analysis",
      "PersonsString": "Yue Zhao, Guoyang Chen, Chunhua Liao and Xipeng Shen",
      "Title": "Towards Ontology-Based Program Analysis",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-towards-ontology-based-program-analysis"
    },
    {
      "Abstract": "Poster associated with an ECOOP research paper.",
      "Affiliations": [
        "Uppsala University",
        "Uppsala University"
      ],
      "AffiliationsString": "Uppsala University",
      "Authors": [
        "eliascastegren",
        "tobiaswrigstad"
      ],
      "Key": "posters-reference-capabilities-for-concurrency-control",
      "PersonsString": "Elias Castegren and Tobias Wrigstad",
      "Title": "Reference Capabilities for Concurrency Control",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-reference-capabilities-for-concurrency-control"
    },
    {
      "Abstract": "Modern software systems are not built from scratch. They use functionality provided by libraries. These libraries evolve and often upgrades are deployed without the systems being recompiled. In Java, this process is particularly error-prone due to the mismatch between source and binary compatibility, and the lack of API stability in many popular libraries. We propose a novel approach to mitigate this problem based on the use of \\texttt{invokedynamic} instructions for cross-component method invocations. The dispatch mechanism of \\texttt{invokedynamic} is used to provide on-the-fly signature adaptation. We show how this idea can be used to construct a Java compiler that produces more resilient bytecode. We present the dynamo compiler, a proof-of-concept implemented as \\texttt{javac} post compiler, and evaluate our approach using several benchmark examples and two case studies showing how the use of the dynamo compiler can prevent certain types of linkage and stack overflow errors that have been observed in real-world systems.",
      "Affiliations": [
        "University of West Bohemia, Pilsen, CZ",
        "Massey University, New Zealand"
      ],
      "AffiliationsString": "University of West Bohemia, Pilsen, CZ, Massey University, New Zealand",
      "Authors": [
        "kamiljezek",
        "jensdietrich"
      ],
      "Key": "ecoop-2016-artifacts-magic-with-dynamo-flexible-cross-component-linking-for-java-with-invokedynamic",
      "PersonsString": "Kamil Jezek and Jens Dietrich",
      "Title": "Magic with Dynamo \u2013 Flexible Cross-Component Linking for Java with Invokedynamic",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-magic-with-dynamo-flexible-cross-component-linking-for-java-with-invokedynamic"
    },
    {
      "Abstract": "",
      "Affiliations": ["Northeastern University"],
      "AffiliationsString": "Northeastern University",
      "Authors": ["matthiasfelleisen"],
      "Key": "summer-school-gradual-typing",
      "PersonsString": "Matthias Felleisen",
      "Title": "25 Years of Types for Untyped Languages: A Random Walk Thru TypeLand ",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/summer-school-gradual-typing"
    },
    {
      "Abstract": "Lunch",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-catering-lunch",
      "PersonsString": "",
      "Title": "Lunch",
      "Type": "Lunch",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-catering-lunch"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-papers-welcome-address",
      "PersonsString": "",
      "Title": "Welcome address",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-welcome-address"
    },
    {
      "Abstract": "Many current program analyses require highly precise pointer information about small, targeted parts of a given program. This motivates the need for demand-driven pointer analyses that compute information only where required. Pointer analyses generally compute points-to sets of program variables or answer boolean alias queries. However, many client analyses require richer pointer information. For example, taint and typestate analyses often need to know the set of all aliases of a given variable under a certain calling context. With most current pointer analyses, clients must compute such information through repeated points-to or alias queries, increasing complexity and computation time for them. This paper presents Boomerang, a demand-driven, flow-, field-, and context-sensitive pointer analysis for Java programs. Boomerang computes rich results that include both the possible allocation sites of a given pointer (points-to information) and all pointers that can point to those allocation sites (alias information). For increased precision and scalability, clients can query Boomerang with respect to particular calling contexts of interest. Our experiments show that Boomerang is more precise than existing demand-driven pointer analyses. Additionally, using Boomerang, the taint analysis FlowDroid issues up to 29.4x fewer pointer queries compared to using other pointer analyses that return simpler pointer information. Furthermore, the search space of Boomerang can be significantly reduced by requesting calling contexts from the client analysis.",
      "Affiliations": [
        "Fraunhofer SIT",
        "Fraunhofer IEM",
        "TU Darmstadt",
        "Heinz Nixdorf Institut, Paderborn University and Fraunhofer IEM"
      ],
      "AffiliationsString": "Fraunhofer SIT, Fraunhofer IEM, TU Darmstadt, Heinz Nixdorf Institut, Paderborn University and Fraunhofer IEM",
      "Authors": [
        "johannesspath",
        "lisanguyenquangdo",
        "karimali",
        "ericbodden"
      ],
      "Key": "ecoop-2016-papers-boomerang-demand-driven-flow-and-context-sensitive-pointer-analysis-for-java",
      "PersonsString": "Johannes Späth, Lisa Nguyen Quang Do, Karim Ali and Eric Bodden",
      "Title": "Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysis for Java",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-boomerang-demand-driven-flow-and-context-sensitive-pointer-analysis-for-java"
    },
    {
      "Abstract": "Transforming programs between two APIs or different versions of the same API is a common software engineering task. However, existing languages supporting for such transformation cannot satisfactorily handle the cases when the relations between elements in the old API and the new API are many-to-many mappings: multiple invocations to the old API are supposed to be replaced by multiple invocations to the new API. Since the multiple invocations of the original APIs may not appear consecutively and the variables in these calls may have different names, writing a tool correctly to cover all such invocation cases is not an easy task. In this paper we propose a novel guided-normalization approach to address this problem. Our core insight is that programs in different forms can be semantics-equivalently normalized into a basic form guided by transformation goals, and developers only need to write rules for the basic form to address the transformation. Based on this approach, we design a declarative program transformation language, PATL, for adapting Java programs between different APIs. PATL has simple syntax and basic semantics to handle transformations only considering consecutive statements inside basic blocks, while with guided-normalization, it can be extended to handle complex forms of invocations. Furthermore, PATL ensures that the user-written rules would not accidentally break def-use relations in the program. We formalize the semantics of PATL on Middleweight Java and prove the semantics-preserving property of guided-normalization. We also evaluated our language with three non-trivial case studies: i.e. updating Google Calendar API, switching from JDom to Dom4j, and switching from Swing to SWT. The result is encouraging; it shows that our language allows successful transformations of real world programs with a small number of rules and little manual resolution.",
      "Affiliations": [
        "University of Washington",
        "Peking University",
        "Peking University",
        "Peking University",
        "Peking University",
        "Peking University",
        "National Institute of Informatics"
      ],
      "AffiliationsString": "University of Washington, Peking University, National Institute of Informatics",
      "Authors": [
        "chenglongwang",
        "jiajunjiang",
        "junli",
        "yingfeixiong",
        "xiangyuluo",
        "luzhang",
        "zhenjianghu"
      ],
      "Key": "ecoop-2016-papers-transforming-programs-between-apis-with-many-to-many-mappings",
      "PersonsString": "Chenglong Wang, Jiajun Jiang, Jun Li, Yingfei Xiong, Xiangyu Luo, Lu Zhang and Zhenjiang Hu",
      "Title": "Transforming programs between APIs with Many-to-Many Mappings",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-transforming-programs-between-apis-with-many-to-many-mappings"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "summer-school-adjourn",
      "PersonsString": "",
      "Title": "Adjourn",
      "Type": "Event",
      "URL": "http://2016.ecoop.org/event/summer-school-adjourn"
    },
    {
      "Abstract": "Many programming languages support different concurrency models. In practice these models are often combined, however the semantics of the combinations are not always well-defined. We studied the combination of futures and Software Transactional Memory. We introduce transactional tasks, a mechanism to create futures in a transaction. Transactional tasks allow the parallelism in a transaction to be exploited, while providing safe access to the state of their encapsulating transaction. We created ClojureTxTk, a fork of Clojure with support for transactional tasks. Furthermore, we ported two applications from the STAMP benchmark suite, and extended these to use transactional tasks: LabyrinthTxTk and BayesTxTk. Lastly, TxTkRedex is a machine-executable implementation of the operational semantics, in PLT Redex.",
      "Affiliations": ["Vrije Universiteit Brussel"],
      "AffiliationsString": "Vrije Universiteit Brussel",
      "Authors": ["janwillemswalens"],
      "Key": "ecoop-2016-artifacts-transactional-tasks-parallelism-in-software-transactions",
      "PersonsString": "Janwillem Swalens",
      "Title": "Transactional Tasks: Parallelism in Software Transactions",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-transactional-tasks-parallelism-in-software-transactions"
    },
    {
      "Abstract": "Protocol and typestate analyses often report some sequences of statements ending at a program point P that needs to be scrutinized, since P may be erroneous or imprecisely analyzed. Program slicing focuses only on the behavior at P by computing a slice of the program affecting the values at P. In this paper, we propose to restrict our attention to the subset of that behavior at P affected by one or several statement sequences, called a sequential criterion (SC). By leveraging the ordering information in a SC, e.g., the temporal order in a few valid/invalid API method invocation sequences, we introduce a new technique, program tailoring, to compute a tailored program that comprises the statements in all possible execution paths passing through at least one sequence in SC in the given order. With a prototyping implementation, Tailor, we show why tailoring is practically useful by conducting two case studies on seven large real-world Java applications. For program debugging and understanding, Tailor can complement program slicing by removing SC-irrelevant statements. For program analysis, Tailor can enable a pointer analysis, which is unscalable to a program, to perform a more focused and therefore potentially scalable analysis to its specific parts containing hard language features such as reflection.",
      "Affiliations": [
        "UNSW Australia",
        "UNSW Australia",
        "UNSW Australia",
        "UNSW Australia"
      ],
      "AffiliationsString": "UNSW Australia",
      "Authors": [
        "yueli",
        "tiantan",
        "yifeizhang",
        "jinglingxue"
      ],
      "Key": "ecoop-2016-papers-program-tailoring-slicing-by-sequential-criteria",
      "PersonsString": "Yue Li, Tian Tan, Yifei Zhang and Jingling Xue",
      "Title": "Program Tailoring: Slicing by Sequential Criteria",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-program-tailoring-slicing-by-sequential-criteria"
    },
    {
      "Abstract": "Our paper introduces a systematic approach to the alignment of names in the static structure of a program, and memory layout and access during its execution. We develop a uniform memory model consisting of frames that instantiate the scopes in the scope graph of a program. This provides a language-independent correspondence between static scopes and run-time memory layout, and between static resolution paths and run-time memory access paths. The approach scales to a range of binding features, supports straightforward type soundness proofs, and provides the basis for a language-independent specification of sound reachability-based garbage collection.\nThis Coq artifact showcases how our uniform model for memory layout in dynamic semantics provides structure to type soundness proofs. The artifact contains type soundness proofs mechanized in Coq for (supersets of) all languages in the paper. The type soundness proofs rely on a language-independent framework formalizing scope graphs and frame heaps.",
      "Affiliations": [
        "TU Delft",
        "French Network and Information Security Agency (ANSSI)",
        "Portland State University",
        "Delft University of Technology"
      ],
      "AffiliationsString": "TU Delft, French Network and Information Security Agency (ANSSI), Portland State University, Delft University of Technology",
      "Authors": [
        "casperbachpoulsen",
        "pierreneron",
        "andrewtolmach",
        "eelcovisser"
      ],
      "Key": "ecoop-2016-artifacts-scopes-describe-frames-a-uniform-model-for-memory-layout-in-dynamic-semantics",
      "PersonsString": "Casper Bach Poulsen, Pierre Neron, Andrew Tolmach and Eelco Visser",
      "Title": "Scopes Describe Frames: A Uniform Model for Memory Layout in Dynamic Semantics",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-scopes-describe-frames-a-uniform-model-for-memory-layout-in-dynamic-semantics"
    },
    {
      "Abstract": "Memory errors in C/C++ can allow an attacker to read sensitive data, corrupt the memory, or crash the executing process. The renowned top 25 of most dangerous software errors as published by the SANS Institute, as well as recent security disasters such as Heartbleed show how important it is to tackle memory safety for C/C++. We present Sulong, an efficient interpreter for LLVM-based languages that runs on the JVM. Sulong guarantees memory safety for C/C++ and other LLVM-based languages by using managed allocations and automatic memory management. Through dynamic compilation, Sulong will achieve peak performance close to state of the art compilers such as GCC or Clang, which do not produce memory-safe code. By efficiently implementing memory safety, Sulong strives to be a real-world solution for mitigating software security problems.",
      "Affiliations": ["Johannes Kepler University, Linz, Austria"],
      "AffiliationsString": "Johannes Kepler University, Linz, Austria",
      "Authors": ["manuelrigger"],
      "Key": "ecoop-2016-doctoral-symposium-sulong-memory-safe-and-efficient-execution-of-llvm-based-languages",
      "PersonsString": "Manuel Rigger",
      "Title": "Sulong: Memory Safe and Efficient Execution of LLVM-Based Languages",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-sulong-memory-safe-and-efficient-execution-of-llvm-based-languages"
    },
    {
      "Abstract": "This artifact is based on Staccato, a tool for finding errors in dynamic configuration update (DCU) implementations. Dynamic configuration update refers to configuration changes that occur at runtime without program restart. Errors in DCU implementations occur when stale data\u2014computed from old configurations\u2014or inconsistent data\u2014computed from different configurations\u2014are used. Staccato uses a dynamic analysis in the style of taint analysis to detect these errors. Staccato supports concurrent programs running on commodity JVMs. We evaluated Staccato on three open-source applications and found errors in all of them.",
      "Affiliations": [
        "University of Washington",
        "University of Washington, USA"
      ],
      "AffiliationsString": "University of Washington, University of Washington, USA",
      "Authors": [
        "johntoman",
        "dangrossman"
      ],
      "Key": "ecoop-2016-artifacts-staccato-a-bug-finder-for-dynamic-configuration-updates",
      "PersonsString": "John Toman and Dan Grossman",
      "Title": "Staccato: A Bug Finder for Dynamic Configuration Updates",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-staccato-a-bug-finder-for-dynamic-configuration-updates"
    },
    {
      "Abstract": "Modern software systems are not built from scratch. They use functionality provided by libraries. These libraries evolve and often upgrades are deployed without the systems being recompiled. In Java, this process is particularly error-prone due to the mismatch between source and binary compatibility, and the lack of API stability in many popular libraries. We propose a novel approach to mitigate this problem based on the use of invokedynamic instructions for cross-component method invocations. The dispatch mechanism of invokedynamic is used to provide on-the-fly signature adaptation. We show how this idea can be used to construct a Java compiler that produces more resilient byte code. We present the dynamo compiler, a proof-of-concept implemented as javac post compiler, and evaluate our approach using several benchmark examples and two case studies showing how the use of the dynamo compiler can prevent certain types of linkage and stack overflow errors that have been observed in real-world systems.",
      "Affiliations": [
        "University of West Bohemia, Pilsen, CZ",
        "Massey University, New Zealand"
      ],
      "AffiliationsString": "University of West Bohemia, Pilsen, CZ, Massey University, New Zealand",
      "Authors": [
        "kamiljezek",
        "jensdietrich"
      ],
      "Key": "ecoop-2016-papers-magic-with-dynamo-flexible-cross-component-linking-for-java-with-invokedynamic",
      "PersonsString": "Kamil Jezek and Jens Dietrich",
      "Title": "Magic with Dynamo \u2013 Flexible Cross-Component Linking for Java with Invokedynamic",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-magic-with-dynamo-flexible-cross-component-linking-for-java-with-invokedynamic"
    },
    {
      "Abstract": "I was born in the same year SIMULA was standardised, bought my first computer with the proceeds from a paper round, and my second computer after I was fired from a summer programming camp. Beginning with several varieties of BASIC, and going on to Informix, Pascal, C, Perl, Tcl, Smalltalk, Self, C++, Java, programming languages and objects have taken up an inordinate amount of my time and interest. In this talk I\u2019ll meander through some of this history, explain how many of the concerns from the past have \u2014 often unwittingly \u2014 influenced my current research, and speculate on what I might do with the other half of my life.",
      "Affiliations": ["Victoria University of Wellington"],
      "AffiliationsString": "Victoria University of Wellington",
      "Authors": ["jamesnoble"],
      "Key": "ecoop-2016-papers-invited-speaker-james-noble",
      "PersonsString": "James Noble",
      "Title": "Half a Life in Software (Senior DN Prize Lecture)",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-invited-speaker-james-noble"
    },
    {
      "Abstract": "In this work, we focus on the development of big data systems that reacts to external events, and that changes its internal state accordingly. The main motivation for&nbsp;this work relies on the fact&nbsp;that the development of these systems is commonly a difficult task with current database technologies and programming languages.\nFirst, actual software storage technologies for big data follow in most of cases a pull-based approach to gather new information. This technology implies a waste of resources pulling the data storage even when there is no new data available. Other approaches like cloud store services (e.g. Firebase) and NoSQL databases (e.g. RethinkDB) follow a push-based model. However, cloud store services usually provide limited query capabilities than traditional databases. Database solutions like RethinkDB provides reactive capabilities called change feeds but they are limited for a single table and/or a single document. This means that complex reactive queries involving joins are not supported. Second, these systems need to perpetually keep track in real-time of the status of one or more external agents. However, the status and the control-flow of these applications is no longer determined by the internal structure of the code. Instead, the control-flow is driven by events and values produced by external agents (e.g. a user, values produced by IO actions or by other programs hosted on other machines, etc.). Dealing with this problem using conventional programming languages (e.g. Java, C#, Python, etc.) and push-based storage approaches leads to code that consists of an overwhelming myriad of callback functions that will be invoked whenever a change occurs. To sum up, the applications based on these technologies suffer of large amount of boilerplate code and accidental complexity. The main contributions of our work are: \nAn extension of a NoSQL store that uses a rule engine to obtain a reactive database behaviour. Our aim is to provide a push-based database system that notifies applications (client layer) about new changes in the database. Our reactive database includes three main components: - a NoSQL store based on Riak KV. - a Rule engine to support complex reactive queries (e.g. involving joins). The queries are represented by directed acyclic graphs, and they share intermediate results to obtain better performance. In other words, our reactive database does not need to run the reactive queries over full database every time new data arrives. This feature fits very well to applications that require to handle large amount of data. Our rule engine uses a RETE-based pattern matching algorithm to select the rules (queries) to fire. The engine is implemented using an actor-based approach to improve its performance, and it was integrated as a dependency library of Riak RV. - a Notification Manager to notify the client-side about the new changes in the database.\nA composable query language to provide reactive abstractions for the database layer. Our reactive query abstractions follow the notions of monads adopted by LinQ to make them familiar to developers. A Graph Dependency Manager will handle the notifications of changes in the database and re-compute the part of the application affected. The queries abstractions will be seamlessly integrated into a reactive language. This integration pursues the following goals: - a Tierless model that unifies the three tiers (client, server, database) of the reactive application in one. This model will allow programmers to use the same programming language for all the tiers. This feature eliminates the impedance mismatch between client and server side code by providing a common type definition for the data they exchange. - a Stackless model that provides a single data abstraction as bridge between the front-end and back-end of a reactive system. The goal is to strive for a flat technology stack in order to avoid issues such as \u201cobject-relational impedance mismatch\u201d or \u201cobject-event impedance mismatch\u201d.",
      "Affiliations": [
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel",
        "Vrije Universiteit Brussel"
      ],
      "AffiliationsString": "Vrije Universiteit Brussel",
      "Authors": [
        "humbertorodriguezavila",
        "wolfgangdemeuter",
        "elisagonzalezboix"
      ],
      "Key": "posters-why-big-data-applications-need-reactive-databases-",
      "PersonsString": "Humberto Rodriguez Avila, Wolfgang De Meuter and Elisa Gonzalez Boix",
      "Title": "Why Big Data Applications need Reactive Databases?",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-why-big-data-applications-need-reactive-databases-"
    },
    {
      "Abstract": "This artifact is a proof-of-concept implementation of DDPA, an on-demand program analysis for higher-order functional programs. The implementation, written in OCaml, includes a parser, evaluator, and DDPA analysis for the language defined in the companion paper (including the proper record semantics extension). The analysis may be performed using different levels of precision as specified by the user and is capable of rendering the control flow graphs and pushdown systems using the GraphViz language DOT. This artifact was used to verify the conclusions of the companion paper and produces visualizations matching those figures in the companion paper\u2019s overview.",
      "Affiliations": [
        "Swarthmore College",
        "The Johns Hopkins University",
        "The Johns Hopkins University"
      ],
      "AffiliationsString": "Swarthmore College, The Johns Hopkins University",
      "Authors": [
        "zacharypalmer",
        "scottfsmith",
        "leandrofacchinetti"
      ],
      "Key": "ecoop-2016-artifacts-higher-order-demand-driven-program-analysis",
      "PersonsString": "Zachary Palmer, Scott F. Smith and Leandro Facchinetti",
      "Title": "Higher-Order Demand-Driven Program Analysis",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-higher-order-demand-driven-program-analysis"
    },
    {
      "Abstract": "Poster associated with an ECOOP research paper.",
      "Affiliations": [
        "University of Washington",
        "University of Washington, USA"
      ],
      "AffiliationsString": "University of Washington, University of Washington, USA",
      "Authors": [
        "johntoman",
        "dangrossman"
      ],
      "Key": "posters-staccato-a-bug-finder-for-dynamic-configuration-updates",
      "PersonsString": "John Toman and Dan Grossman",
      "Title": "Staccato: A Bug-Finder for Dynamic Configuration Updates",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-staccato-a-bug-finder-for-dynamic-configuration-updates"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-doctoral-symposium-elevator-pitches",
      "PersonsString": "",
      "Title": "Lightning Talks",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-elevator-pitches"
    },
    {
      "Abstract": "Variation is ubiquitous in software. Many applications can benefit from making this variation explicit, then manipulating and computing with it directly\u2014a technique we call \u201cvariational programming\u201d. This idea has been independently discovered in several application domains, such as efficiently analyzing and verifying software product lines, combining bounded and symbolic model-checking, and computing with alternative privacy profiles. Although these domains share similar core problems, and there are also many similarities in the solutions, there is no dedicated programming language support for variational programming. This makes the various implementations tedious, prone to errors, hard to maintain and reuse, and difficult to compare. In this paper we present a calculus that forms the basis of a programming language with explicit support for representing, manipulating, and computing with variation in programs and data. We illustrate how such a language can simplify the implementation of variational programming tasks. We present the syntax and semantics of the core calculus, a sound type system, and a type inference algorithm that produces principal types.",
      "Affiliations": [
        "University of Louisiana at Lafayette",
        "Oregon State University",
        "Oregon State University"
      ],
      "AffiliationsString": "University of Louisiana at Lafayette, Oregon State University",
      "Authors": [
        "shengchen",
        "martinerwig",
        "ericwalkingshaw"
      ],
      "Key": "ecoop-2016-papers-a-calculus-for-variational-programming",
      "PersonsString": "Sheng Chen, Martin Erwig and Eric Walkingshaw",
      "Title": "A Calculus for Variational Programming",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-a-calculus-for-variational-programming"
    },
    {
      "Abstract": "Poster associated with an ECOOP research paper.",
      "Affiliations": [
        "TU Delft",
        "French Network and Information Security Agency (ANSSI)",
        "Portland State University",
        "Delft University of Technology"
      ],
      "AffiliationsString": "TU Delft, French Network and Information Security Agency (ANSSI), Portland State University, Delft University of Technology",
      "Authors": [
        "casperbachpoulsen",
        "pierreneron",
        "andrewtolmach",
        "eelcovisser"
      ],
      "Key": "posters-scopes-describe-frames-a-uniform-model-for-memory-layout-in-dynamic-semantics",
      "PersonsString": "Casper Bach Poulsen, Pierre Neron, Andrew Tolmach and Eelco Visser",
      "Title": "Scopes Describe Frames: A Uniform Model for Memory Layout in Dynamic Semantics",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-scopes-describe-frames-a-uniform-model-for-memory-layout-in-dynamic-semantics"
    },
    {
      "Abstract": "The artifact is built around the MultiselectJS library that implements the multi-selection semantics presented in the companion paper. The purpose of this JavaScript library is to help programmers add multi-selection to Web user interfaces with ease. The artifact includes a demo application showcasing the use of the library, documentation of the library API, and a tutorial on how to use the library. The library clearly separates the reusable aspects of multi-selection from the application specific aspects. The latter are collected into an object referred to as the selection geometry. The complex task of implementing a full-fledged multi-selection feature reduces to a considerably simpler task of implementing a selection geometry. The demo application implements several different selection geometries. It supports the claims of the companion paper that the library considerably lessens the task of implementing multi-selection. Following the guidance of the tutorial, users can build their own multi-selection features.",
      "Affiliations": [
        "Texas A&M University",
        "Adobe Systems, Inc."
      ],
      "AffiliationsString": "Texas A&M University, Adobe Systems, Inc.",
      "Authors": [
        "jaakkojarvi",
        "seanparent"
      ],
      "Key": "ecoop-2016-artifacts-one-way-to-select-many",
      "PersonsString": "Jaakko Järvi and Sean Parent",
      "Title": "One Way to Select Many",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-one-way-to-select-many"
    },
    {
      "Abstract": "Dinner",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ecoop-2016-catering-dinner",
      "PersonsString": "",
      "Title": "Dinner",
      "Type": "Dinner",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-catering-dinner"
    },
    {
      "Abstract": "In the paper \u201cLightweight Session Programming in Scala\u201d, we introduce a \u201clightweight\u201d integration of session types in the Scala programming language, based on (1) a formal type-level encoding, and (2) a library implementation of linear I/O channels, called lchannels, providing a convenient API for session-based programming, and supporting both local and distributed communication. This artifact is the source code of lchannels, with all examples and benchmarks discussed in the paper.",
      "Affiliations": [
        "Imperial College London",
        "Imperial College London, UK"
      ],
      "AffiliationsString": "Imperial College London, Imperial College London, UK",
      "Authors": [
        "alcestescalas",
        "nobukoyoshida"
      ],
      "Key": "ecoop-2016-artifacts-lightweight-session-programming-in-scala",
      "PersonsString": "Alceste Scalas and Nobuko Yoshida",
      "Title": "Lightweight Session Programming in Scala",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-lightweight-session-programming-in-scala"
    },
    {
      "Abstract": "This artifact serves as an accompaniment to our ECOOP 2016 paper (#77) titled \u201cProgram Tailoring: Slicing by Sequential Criteria\u201d, in which a new program slicing approach, called Tailor, is introduced.\nIn the paper, we have conducted a thorough evaluation with three sets of experiments, including two large cases studies for two different application scenarios in order to evaluate Tailor\u2019s usefulness (RQ1 and RQ2) and one stress test in order to measure Tailor\u2019s scalability (RQ3). In RQ1, we show how Tailor can improve further the precision of thin slicer. In RQ2, we show how Tailor can be used to make program analysis scale better with improved precision. In RQ3, we give a stress test to investigate how well Tailor scales.\nThis artifact is provided to enable our results for RQs 1 - 3 to be reproduced. In addition, we have provided an extensive set of extra results, which are not included in the paper, in order to help the reviewers to understand and assess the quality of this work.\nPlease note that this artifact is large and complex. It involves two clients (Clara and Solar), two slicing tools (Thin slicer and Tailor), different static analysis frameworks (Doop, WALA and Soot), with complicated interactions among these clients and tools. In addition, sophisticated and memory-consuming whole-program pointer analyses will be performed on a set of seven large real-world Java applications under a large library. Therefore, a machine with a large memory size (with ours being 64GB) is required to reproduce all the results reported in our paper.",
      "Affiliations": [
        "UNSW Australia",
        "UNSW Australia",
        "UNSW Australia",
        "UNSW Australia"
      ],
      "AffiliationsString": "UNSW Australia",
      "Authors": [
        "tiantan",
        "yueli",
        "yifeizhang",
        "jinglingxue"
      ],
      "Key": "ecoop-2016-artifacts-program-tailoring-slicing-by-sequential-criteria",
      "PersonsString": "Tian Tan, Yue Li, Yifei Zhang and Jingling Xue",
      "Title": "Program Tailoring: Slicing by Sequential Criteria",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-program-tailoring-slicing-by-sequential-criteria"
    },
    {
      "Abstract": "Program analyzers have proven effective in detecting undesired behavior in programs such as crashes, bugs, and security vulnerabilities. Some settings require high assurance in the results of program analysis, such as software embedded in automobiles or airplanes. To achieve high assurance in the correctness or security of a piece of software, formal methods are used to automatically construct or check proofs of these properties using computers. Achieving high assurance for a piece of software is a monumental task, and is widely considered by experts to be out of reach for mainstream use using current methods. As a result, verification is only attempted for the most critical software components. In this thesis, I describe how to bring high assurance software closer to a reality by improving the methods used to develop implementations and proofs for program analyzers.",
      "Affiliations": ["University of Maryland, College Park"],
      "AffiliationsString": "University of Maryland, College Park",
      "Authors": ["daviddarais"],
      "Key": "ecoop-2016-doctoral-symposium-compositional-and-mechanically-verified-program-analyzers",
      "PersonsString": "David Darais",
      "Title": "Compositional and Mechanically Verified Program Analyzers",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-compositional-and-mechanically-verified-program-analyzers"
    },
    {
      "Abstract": "Which comes first: the object or the class? Language designers enjoy the conceptual simplicity of object-based languages (such as Emerald or Self) while many programmers prefer the pragmatic utility of classical inheritance (such as Simula and Java). Programmers in object-based languages have a tendency to build libraries to support traditional inheritance, and language implementations are often contorted to the same end. In this paper, we revisit the relationship between classes and objects. We model various kinds of inheritance in the context of an object-oriented language whose objects are not defined by classes, and explain why class inheritance and initialisation cannot be easily modelled purely by delegation.",
      "Affiliations": [
        "Victoria University of Wellington",
        "Victoria University of Wellington",
        "Victoria University of Wellington",
        "Pomona College"
      ],
      "AffiliationsString": "Victoria University of Wellington, Pomona College",
      "Authors": [
        "timothyjones",
        "michaelhomer",
        "jamesnoble",
        "kimbruce"
      ],
      "Key": "ecoop-2016-papers-object-inheritance-without-classes",
      "PersonsString": "Timothy Jones, Michael Homer, James Noble and Kim Bruce",
      "Title": "Object Inheritance without Classes",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-object-inheritance-without-classes"
    },
    {
      "Abstract": "The ability to specify immutability in a programming language is a powerful tool for developers, enabling them to better understand and more safely transform the code without fearing side effects. Some mainstream languages, such as C and C++, allow developers to specify a form of immutability using the const keyword. In this work, we characterize the meaning of the C/C++ const qualifier and present the ConstSanitizer tool, which dynamically identifies const uses in practice that are either not consistent with transitive immutability, write to mutable fields, or write to formerly-const objects whose const-ness has been casted away. Based on a set of 8 benchmark programs, we classify such uses of const according to a set of attributes (namely: synchronized, not visible, buffer/cache, delayed initialization, and incorrect). Our work contributes to the understanding of a widely-used C/C++ language feature.",
      "Affiliations": [
        "University of Waterloo",
        "University of Waterloo, Canada"
      ],
      "AffiliationsString": "University of Waterloo, University of Waterloo, Canada",
      "Authors": [
        "jonathaneyolfson",
        "patricklam"
      ],
      "Key": "ecoop-2016-artifacts-c-const-and-immutability-an-empirical-study-of-writes-through-const",
      "PersonsString": "Jonathan Eyolfson and Patrick Lam",
      "Title": "C++ const and Immutability: An Empirical Study of Writes-Through-const",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-c-const-and-immutability-an-empirical-study-of-writes-through-const"
    },
    {
      "Abstract": "While DataBase Management Systems (DBMSs) are highly optimized, interactions across the Programming Language (PL) / DBMS boundary are costly, even for in-process embedded DBMSs. In this paper we show that programs that interact with the widely-used embedded DBMS SQLite can be significantly optimized \u2013 by a factor of 3.4 in our benchmarks \u2013 by inlining across the PL / DBMS boundary. We achieved this speed-up by replacing parts of SQLite\u2019s C interpreter with RPython code and composing the resulting meta-tracing VM \u2013 called SQPyte \u2013 with the PyPy VM. SQPyte does not compromise stand-alone SQL performance: it is 2.2% faster than SQLite on the widely used TPC-H benchmark suite.",
      "Affiliations": [
        "King's College London ",
        "Carnegie Mellon University",
        "King's College London"
      ],
      "AffiliationsString": "King's College London , Carnegie Mellon University, King's College London",
      "Authors": [
        "carlfriedrichbolz",
        "daryakurilova",
        "laurietratt"
      ],
      "Key": "ecoop-2016-artifacts-making-an-embedded-dbms-jit-friendly",
      "PersonsString": "Carl Friedrich Bolz, Darya Kurilova and Laurence Tratt",
      "Title": "Making an Embedded DBMS JIT-friendly",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-making-an-embedded-dbms-jit-friendly"
    },
    {
      "Abstract": "Artifacts developed alongside research presented in papers serve several important roles. They enable reproducing research results by independent researchers; they enable practically evaluating ideas and theories; they enable experimentation with variations and extensions (not only by the original authors); and so forth.\nHowever, developing high-quality artifacts requires a lot of effort that is not always justified. Importantly, as it stands, artifacts have no influence on acceptance of a research paper at the top conferences in programming languages and software engineering. Moreover, the main requirement for completing a PhD is producing publishable research results. As a result, one of the most difficult questions for many doctoral students is: \u201chow much time should be spent on developing artifacts?\u201d\nIn this talk I share my experience contributing to the Scala programming language, tools, and libraries during my own graduate studies. Among the artifacts that I discuss: a library that was picked up by Twitter and secured a book deal; and a compiler plugin that (to my knowledge) only one other person in the world tried to use\u2013and gave up. \u201cHow can artifacts support research and publication? How can artifacts support the discovery of important research problems? How can artifacts contribute to a successful career?\u201d My talk attempts to shed light on these and related questions.",
      "Affiliations": ["KTH Royal Institute of Technology"],
      "AffiliationsString": "KTH Royal Institute of Technology",
      "Authors": ["philipphaller"],
      "Key": "ecoop-2016-doctoral-symposium-papers-vs-artefacts",
      "PersonsString": "Philipp Haller",
      "Title": "Invited Talk: Papers vs. Artefacts",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-doctoral-symposium-papers-vs-artefacts"
    },
    {
      "Abstract": "Improving JavaScript performance has been a hot topic in recent years. The ubiquity of the World Wide Web, and web runtimes in particular, across all kind of devices in addition to the increasing complexity of applications written in JavaScript have drawn attention of the industrial and research communities towards the improvement of JavaScript performance.\nOur research focus on the performance aspects of this problem. We propose a novel solution based on meta-programming and code rewriting, show some preliminary results based on a small set of experiments, and then review other approaches and compare them with our proposal.\nMost of the work to boost the performance of programs written in JavaScript is focused on improving the compiler/execution infrastructure. Such approach is implemented by the Safari SquirrelFish runtime, the just in time (JIT) compiler Google V8, and applied to the trace-based optimizations by the Mozilla team. A different approach is Mozilla\u2019s asm.js, a subset of JavaScript from which highly efficient code can be generated on the fly.\nOur work, on the other hand, explores the feasibility of improving performance by using source code rewriting techniques at compile time, well before the source code reaches the JavaScript runtime. We found several cases where JavaScript performance is highly sensitive to the way in which the programmer writes the code.\nFor example, using the for-in statement to iterate an array object is at least 25 times slower than using a standard C-style-for to iterate the same array. Even more remarkable, different APIs generating the same, or semantically similar, results can show a big difference in execution times. For example, using the API document.getElementByTagName to find elements in the DOM can be 200 times faster than using the API document.querySelectorAll.\nTherefore, we propose to improve the performance of JavaScript programs by analysing this kind of cases, which are out of reach of JIT compilers and runtimes. To test our hypothesis we initially identified a number of patterns amenable to being optimized and then implemented a set of simple experiments to check the performance gains. Once we showed that replacing slow patterns with the fast ones provided measurable performance benefits, we designed and implemented a general purpose tool to easily automate this refactoring. The tool, named PumaScript, is a JavaScript dialect extended with program introspection and rewriting capabilities. Finally, by using PumaScript we are able of implementing meta-functions to automatically rewrite slow code with faster, semantically equivalent code.\nPumaScript\u2019s main feature is the support for meta-functions, a mechanism similar to the programmable macro-expansion systems available in Lisp, Ruby, and other programming languages. Like other macro systems, PumaScript meta-functions can expand caller expressions inline. When called, a meta-function takes the decorated Abstract Syntax Tree (AST) of the arguments and returns an AST to be used as a replacement for the caller expression.\nPumaScript meta-functions can execute any arbitrary computation, including calling other normal functions or meta-functions. Additionally, all meta-functions have access to special intrinsic functions which provide access to the program AST for introspection and re-writing of any portion of it.",
      "Affiliations": [
        "Universidad Tecnologica Nacional, Facultad Regional Cordoba",
        "Universidad Siglo 21, Córdoba",
        "Universidad Tecnologica Nacional, Facultad Regional Cordoba",
        "Universidad Tecnologica Nacional, Facultad Regional Cordoba"
      ],
      "AffiliationsString": "Universidad Tecnologica Nacional, Facultad Regional Cordoba, Universidad Siglo 21, Córdoba",
      "Authors": [
        "alexisferreyra",
        "ricardomedel",
        "nestornavarro",
        "emanuelravera"
      ],
      "Key": "posters-optimizing-javascript-through-source-code-rewriting",
      "PersonsString": "Alexis Ferreyra, Ricardo Medel, Nestor Navarro and Emanuel Ravera",
      "Title": "Optimizing JavaScript through Source Code Rewriting",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-optimizing-javascript-through-source-code-rewriting"
    },
    {
      "Abstract": "JGS-check is the accompanying artifact to \u201cLJGS: Gradual Security Types for Object-Oriented Languages\u201d. LJGS is a Java-like language with gradual security typing. It features a constraint based information flow type system that includes a type dynamic and type casts. Dynamically typed fragments are liberally accepted by the type checker and rely on run-time enforcement for security. \nJGS-check is a type checker for the subset of Java that corresponds to the calculus presented in the paper and that implements the constraint generation and satisfiability checks of LJGS\u2019 type system. It\u2019s purpose is to illustrate and substantiate the behavior of our gradual security type system. It takes a directory of Java source code as input and reports methods that violate the typing rules. JGS-check is merely a type checker and does not implement code generation.\nThe submission archive includes the compiled type checker, the code of the example section (Section 2) as well additional examples and testcases that did not fit into the paper. The user should also be able to check custom code as long as it corresponds the subset of Java that is covered by LJGS.",
      "Affiliations": [
        "University of Freiburg, Germany",
        "University of Freiburg"
      ],
      "AffiliationsString": "University of Freiburg, Germany, University of Freiburg",
      "Authors": [
        "luminousfennell",
        "peterthiemann"
      ],
      "Key": "ecoop-2016-artifacts-ljgs-gradual-security-types-for-object-oriented-languages",
      "PersonsString": "Luminous Fennell and Peter Thiemann",
      "Title": "LJGS: Gradual Security Types for Object-Oriented Languages",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-ljgs-gradual-security-types-for-object-oriented-languages"
    },
    {
      "Abstract": "Poster associated with an ECOOP research paper.",
      "Affiliations": [
        "Delft University of Technology",
        "Delft University of Technology",
        "Delft University of Technology"
      ],
      "AffiliationsString": "Delft University of Technology",
      "Authors": [
        "dacoharkes",
        "dannymgroenewegen",
        "eelcovisser"
      ],
      "Key": "posters-icedust-incremental-and-eventual-computation-of-derived-values-in-persistent-object-graphs",
      "PersonsString": "Daco Harkes, Danny M. Groenewegen and Eelco Visser",
      "Title": "IceDust: Incremental and Eventual Computation of Derived Values in Persistent Object Graphs",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/posters-icedust-incremental-and-eventual-computation-of-derived-values-in-persistent-object-graphs"
    },
    {
      "Abstract": "This artefact to accompanies the paper \u201cFine-grained Language Composition: A Case Study\u201d. The artefact is a VirtualBox image containing: pre-built binaries and source code for VMs used in the paper, the benchmarks (ready to run), the Eco examples from the screenshots, and preconfigured instances of the case studies described in the paper.",
      "Affiliations": [
        "King's College London",
        "King's College London ",
        "King's College London",
        "King's College London"
      ],
      "AffiliationsString": "King's College London, King's College London ",
      "Authors": [
        "eddbarrett",
        "carlfriedrichbolz",
        "lukasdiekmann",
        "laurietratt"
      ],
      "Key": "ecoop-2016-artifacts-fine-grained-language-composition-a-case-study",
      "PersonsString": "Edd Barrett, Carl Friedrich Bolz, Lukas Diekmann and Laurence Tratt",
      "Title": "Fine-grained Language Composition: A Case Study",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-artifacts-fine-grained-language-composition-a-case-study"
    },
    {
      "Abstract": "Although run-time language composition is common, it normally takes the form of a crude Foreign Function Interface (FFI). While useful, such compositions tend to be coarse-grained and slow. In this paper we introduce a novel fine-grained syntactic composition of PHP and Python which allows users to embed each language inside the other, including referencing variables across languages. This composition raises novel design and implementation challenges. We show that good solutions can be found to the design challenges; and that the resulting implementation imposes an acceptable performance overhead of, at most, just over 2x.",
      "Affiliations": [
        "King's College London",
        "King's College London ",
        "King's College London",
        "King's College London"
      ],
      "AffiliationsString": "King's College London, King's College London ",
      "Authors": [
        "eddbarrett",
        "carlfriedrichbolz",
        "lukasdiekmann",
        "laurietratt"
      ],
      "Key": "ecoop-2016-papers-fine-grained-language-composition-a-case-study",
      "PersonsString": "Edd Barrett, Carl Friedrich Bolz, Lukas Diekmann and Laurence Tratt",
      "Title": "Fine-grained Language Composition: A Case Study",
      "Type": "Talk",
      "URL": "http://2016.ecoop.org/event/ecoop-2016-papers-fine-grained-language-composition-a-case-study"
    }
  ],
  "Name": "ECOOP 2016",
  "People": [
    {
      "Affiliation": "University of Texas, Austin",
      "Key": "arthurpeters",
      "Name": "Arthur Peters",
      "URL": "https://orc.csres.utexas.edu/wiki/Wiki.jsp?page=Arthur%20Peters"
    },
    {
      "Affiliation": "HPI, Germany",
      "Key": "timfelgentreff",
      "Name": "Tim Felgentreff",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/timfelgentreff/00aaad67-7db2-4e48-b38b-abc09e3201c1/small.jpg"
    },
    {
      "Affiliation": "Department of Mathematics and Statistics, University of Lancaster",
      "Key": "rebeccakillick",
      "Name": "Rebecca Killick",
      "URL": "http://www.lancs.ac.uk/~killick",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/rebeccakillick/3f025b85-9f3e-42e6-8bd6-5655103f4226/small.jpg"
    },
    {
      "Affiliation": "Semmle",
      "Key": "oegedemoor",
      "Name": "Oege de Moor"
    },
    {
      "Affiliation": "Julia SRL, Italy",
      "Bio": "Pietro Ferrara has been a Research Scientist at Julia SRL since February 2016. Before joining Julia, Pietro was a Research Staff Member in the group of Mobile Enterprise Software from July 2013 to December 2015, a lecturer at ETH of Zurich in the Programming methodology group under the supervision of Peter Mueller from April 2009 to July 2013. Previously, he obtained the PhD degree in Computer Science from the Ecole Polytechnique of Paris and the Universita\u2019 Ca\u2019 Foscari of Venice on May, 22nd 2009. His PhD thesis directors were Radhia Cousot and Agostino Cortesi. I defended my PhD thesis on May 22nd, 2009 at the Ecole Normale Superiore. In addition, he was an intern at Microsoft Research in Redmond in the PLA group from August 20th 2007 to November 9th 2007 under the supervision of Francesco Logozzo.",
      "Key": "pietroferrara1",
      "Name": "Pietro Ferrara",
      "URL": "http://www.pietro.ferrara.name",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/pietroferrara1/02b91dc6-2cbd-4226-a1f6-ddfdc7c3bd65/small.jpg"
    },
    {
      "Affiliation": "Indiana University",
      "Key": "matteocimini",
      "Name": "Matteo Cimini"
    },
    {
      "Affiliation": "Oracle Labs",
      "Bio": "Michael Haupt is a member of the Alphabet Soup project in the Virtual Machine Research Group at Oracle Labs.",
      "Key": "michaelhaupt",
      "Name": "Michael Haupt",
      "URL": "https://labs.oracle.com/pls/apex/f?p=labs:bio:0:44",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michaelhaupt/05f48800-f324-4929-b083-999bd5c25e92/small.jpg"
    },
    {
      "Affiliation": "Confero",
      "Key": "reidholmes1",
      "Name": "Reid Holmes",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/reidholmes1/06c9b89d-d2f6-4ca4-ab54-7654e03e44cb/small.jpg"
    },
    {
      "Affiliation": "LLNL",
      "Key": "chunhualiao",
      "Name": "Chunhua Liao"
    },
    {
      "Affiliation": "Tohoku University",
      "Key": "atsushiohori",
      "Name": "Atsushi Ohori",
      "URL": "http://www.pllab.riec.tohoku.ac.jp/~ohori/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/atsushiohori/077213ad-c678-4476-84bb-16d31c7c6b12/small.jpg"
    },
    {
      "Affiliation": "University of Maryland",
      "Key": "davidvanhorn",
      "Name": "David Van Horn",
      "URL": "https://www.cs.umd.edu/~dvanhorn/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/davidvanhorn/07c0c026-a341-417d-9be1-67b982b2c163/small.jpg"
    },
    {
      "Affiliation": "Kyoto University",
      "Key": "yusukemiyazaki",
      "Name": "Yusuke Miyazaki",
      "URL": "http://www.fos.kuis.kyoto-u.ac.jp/~miyazaki/"
    },
    {
      "Affiliation": "CompuGroup Medical Schweiz AG",
      "Key": "tudorgirba",
      "Name": "Tudor Gîrba"
    },
    {
      "Affiliation": "TU Darmstadt",
      "Bio": "I am a professor at the Computer Science Department of TU Darmstadt. Currently, I am also Dean of the Computer Science Department. I lead the research group \u201cSoftware Engineering\u201d.",
      "Key": "reinerhahnle",
      "Name": "Reiner Hähnle",
      "URL": "https://www.se.tu-darmstadt.de/se/group-members/reiner-haehnle/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/reinerhahnle/09c6721e-2376-4bcd-bb03-ee6447ecddb1/small.jpg"
    },
    {
      "Affiliation": "University of Utah",
      "Key": "xiangqili",
      "Name": "Xiangqi Li",
      "URL": "http://www.cs.utah.edu/~xiangqi/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/xiangqili/09cfce19-96cd-42d5-938c-a812b94ff725/small.jpg"
    },
    {
      "Affiliation": "Zengularity",
      "Bio": "Julien Richard-Foy is a consultant for Zengularity. He likes designing code at the right level of abstraction.",
      "Key": "julienrichardfoy",
      "Name": "Julien Richard-Foy",
      "URL": "http://julien.richard-foy.fr",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/julienrichardfoy/09db18fb-df5b-46e1-9668-93bb1fc8f553/small.jpg"
    },
    {
      "Affiliation": "Shibaura Institute of Technology",
      "Key": "midorisugaya",
      "Name": "Midori Sugaya"
    },
    {
      "Affiliation": "TU Delft",
      "Key": "vladvergu",
      "Name": "Vlad Vergu"
    },
    {
      "Affiliation": "ETH Zurich",
      "Key": "petermller",
      "Name": "Peter Müller",
      "URL": "www.pm.inf.ethz.ch",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/petermller/0b135fb0-59df-4505-b552-fd368612fd8e/small.jpg"
    },
    {
      "Affiliation": "Johannes Kepler University Linz",
      "Key": "stefanmarr",
      "Name": "Stefan Marr",
      "URL": "http://stefan-marr.de/research/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/stefanmarr/0b85c0bb-002b-4c31-96af-cde02a5a482d/small.jpg"
    },
    {
      "Affiliation": "University of British Columbia",
      "Key": "felipebanadosschwerter",
      "Name": "Felipe Bañados Schwerter",
      "URL": "http://www.cs.ubc.ca/~fbanados",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/felipebanadosschwerter/0b8b5f27-6891-4bf2-8fd1-92e3b5097b97/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "jimdowling",
      "Name": "Jim Dowling"
    },
    {
      "Affiliation": "Aarhus University",
      "Bio": "Associate Professor at Department of Computer Science, Aarhus University, Denmark",
      "Key": "andersmoller",
      "Name": "Anders Møller",
      "URL": "https://cs.au.dk/~amoeller/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/andersmoller/0bdc949a-c073-42ed-a51f-ea9be96e6f29/small.jpg"
    },
    {
      "Affiliation": "University of Glasgow",
      "Key": "nataliachechina",
      "Name": "Natalia Chechina",
      "URL": "http://dcs.gla.ac.uk/~natalia/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/nataliachechina/18d2cb10-18d7-4bc2-99fc-fbe8de6e0368/small.jpg"
    },
    {
      "Affiliation": "Technion \u2013 Israel Institute of Technology",
      "Key": "tomerlevy",
      "Name": "Tomer Levy"
    },
    {
      "Affiliation": "",
      "Key": "alexanderschill",
      "Name": "Alexander Schill"
    },
    {
      "Affiliation": "NCSU",
      "Bio": "Xipeng Shen is an associate professor at the Computer Science Department, North Carolina State University (NCSU). He has been an IBM Canada CAS Research Faculty Fellow since 2010, and a receipt of the 2010 NSF CAREER Award, 2011 DOE Early Career Award, and 2015 Google Faculty Research Award. Before joining NCSU, he was an Adina Allen Term Distinguished Associate Professor at the College of William and Mary.",
      "Key": "xipengshen",
      "Name": "Xipeng Shen",
      "URL": "http://people.engr.ncsu.edu/xshen5/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/xipengshen/0df8882b-75f4-4ad4-aa03-8216260442e4/small.jpg"
    },
    {
      "Affiliation": "King's College London",
      "Key": "sarahmount",
      "Name": "Sarah Mount",
      "URL": "http://www.snim2.org/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/sarahmount/6384b1e5-26d9-469b-b336-bb504ad3063f/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "franzjhauck",
      "Name": "Franz J. Hauck"
    },
    {
      "Affiliation": "CWI, Netherlands",
      "Key": "michaelsteindorfer",
      "Name": "Michael Steindorfer",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michaelsteindorfer/117c6ef4-4c55-47f0-8f2d-4d6fa5790abe/small.jpg"
    },
    {
      "Affiliation": "MIT CSAIL, USA",
      "Bio": "I am a postdoc at MIT CSAIL, where I work with Armando Solar-Lezama. I completed my PhD in 2014 at ETH Zurich (Switzerland), under the supervision of Bertrand Meyer. In 2008, I received a Master\u2019s degree in Applied Mathematics and Informatics at Saint Petersburg State University of Information Technologies, Mechanics and Optics (Russia).",
      "Key": "nadiapolikarpova",
      "Name": "Nadia Polikarpova",
      "URL": "http://people.csail.mit.edu/polikarn/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/nadiapolikarpova/13689535-a4b1-49ed-b1c4-2e890b485520/small.jpg"
    },
    {
      "Affiliation": "University of Massachusetts Amherst",
      "Key": "emmatosch",
      "Name": "Emma Tosch",
      "URL": "http://people.cs.umass.edu/~etosch/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/emmatosch/136f75c1-8407-40bb-a781-5ab038df1c86/small.jpg"
    },
    {
      "Affiliation": "University of Waterloo",
      "Key": "magnusmadsen",
      "Name": "Magnus Madsen",
      "URL": "http://plg.uwaterloo.ca/~mmadsen/"
    },
    {
      "Affiliation": "Goethe University",
      "Bio": "PhD Student at Frankfurt University supervised by Dr. Reichenbach , specializing in Programming languages and source code transformation. I am currently working on a couple of inter related projects : 1. Observing the pros and cons of Copy-Paste code as opposed to abstracting redundant code during design. 2. Automatic migration of API .\nI completed my Masters in Computer Science under Prof. Dr. Andreas Zeller , where I worked on Android testing , specifically developing test cases for detecting Android Malware. \nI am originally from India. completed my Bachelor in Mathematics and a Master in Computer Application. I also worked as a Software development Engineer in Scantron.",
      "Key": "krishnanarasimhan",
      "Name": "Krishna Narasimhan",
      "URL": "http://sepl.cs.uni-frankfurt.de:8181/KrishnaNarasimhan/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/krishnanarasimhan/1687eb51-6136-46ff-bb70-db59e3989855/small.jpg"
    },
    {
      "Affiliation": "TU Darmstadt",
      "Key": "richardbubel",
      "Name": "Richard Bubel",
      "URL": "https://www.se.tu-darmstadt.de/se/group-members/richard-bubel/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/richardbubel/169a07e2-3b16-4b8b-9ea3-b6ac1c3ada2e/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "arthurvaladares",
      "Name": "Arthur Valadares"
    },
    {
      "Affiliation": "Semmle",
      "Key": "michaelpeytonjones",
      "Name": "Michael Peyton Jones"
    },
    {
      "Affiliation": "UNSW Australia",
      "Key": "yifeizhang",
      "Name": "Yifei Zhang",
      "URL": "http://www.cse.unsw.edu.au/~yzhang/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/yifeizhang/170594e1-233f-4492-bf5c-bd4f9ba8c6e7/small.jpg"
    },
    {
      "Affiliation": "Delft University of Technology",
      "Key": "elmervanchastelet",
      "Name": "Elmer van Chastelet",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/elmervanchastelet/55ccc9a8-327f-423a-ae20-01391b394a05/small.jpg"
    },
    {
      "Affiliation": "University of Cambridge",
      "Key": "marianamarasoiu",
      "Name": "Mariana Marasoiu"
    },
    {
      "Affiliation": "King's College London",
      "Key": "eddbarrett",
      "Name": "Edd Barrett",
      "URL": "http://eddbarrett.co.uk/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/eddbarrett/182cdf91-a04a-4978-bfc7-12499b838a3e/small.jpg"
    },
    {
      "Affiliation": "University of New Brunswick",
      "Key": "shijiexu",
      "Name": "Shijie Xu"
    },
    {
      "Affiliation": "Federal University of Campina Grande",
      "Key": "flaviomedeiros1",
      "Name": "Flávio Medeiros",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/flaviomedeiros1/19e4bfc5-c6b9-494e-9e37-66461539c691/small.jpg"
    },
    {
      "Affiliation": "University of Bern",
      "Key": "aliakseisyrel",
      "Name": "Aliaksei Syrel"
    },
    {
      "Affiliation": "The University of Texas at Austin",
      "Key": "johnthywissen",
      "Name": "John A. Thywissen",
      "URL": "https://www.cs.utexas.edu/~jthywiss/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/johnthywissen/a59b898f-ba1c-46fa-882e-674375d12dec/small.jpg"
    },
    {
      "Affiliation": "Federal University of Pernambuco",
      "Bio": "Assistant Professor @ CIn-UFPE",
      "Key": "leopoldoteixeira",
      "Name": "Leopoldo Teixeira",
      "URL": "http://www.cin.ufpe.br/~lmt",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/leopoldoteixeira/1c7363cc-2f2d-43a6-a483-2c7bdc319d02/small.jpg"
    },
    {
      "Affiliation": "Fernuniversität in Hagen",
      "Key": "friedrichsteimann",
      "Name": "Friedrich Steimann",
      "URL": "http://www.fernuni-hagen.de/ps/team/friedrich.steimann.shtml",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/friedrichsteimann/1cb1a78a-6a2a-4c25-90fd-920fed41f121/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "davidpichardie",
      "Name": "David Pichardie"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Key": "elisagonzalezboix",
      "Name": "Elisa Gonzalez Boix",
      "URL": "http://soft.vub.ac.be/~egonzale",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/elisagonzalezboix/1d0cd2ad-d735-4cfe-b1fc-f9f07e5f1c73/small.jpg"
    },
    {
      "Affiliation": "UNSW Australia & Applicative",
      "Bio": "Manuel M T Chakravarty is an Associate Professor at the University of New South Wales. His core research interests are functional programming, novel compiler technology, and high-performance computing. He graduated from the University of Karlsruhe and received a doctoral degree from the Berlin Institute of Technology. His major contributions include work on Haskell\u2019s foreign function interface, the C-&gt;Haskell binding generator, the theory and implementation of type families in the Glasgow Haskell Compiler, and the development of multiple systems for data parallel programming of multicore CPUs and GPUs, including Accelerate, Data Parallel Haskell, and Repa. He is the principal author of the interactive development environment Haskell for Mac and he is excited by the opportunities presented by the Swift programming language. Most importantly, he believes in the fruitful combination of theory and practice.",
      "Key": "manuelchakravarty",
      "Name": "Manuel Chakravarty",
      "URL": "http://justtesting.org/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/manuelchakravarty/1d2a8239-fd12-4472-9186-632d7afbb5c3/small.jpg"
    },
    {
      "Affiliation": "University of Lisbon, Portugal",
      "Key": "vascovasconcelos",
      "Name": "Vasco Vasconcelos",
      "URL": "http://www.di.fc.ul.pt/~vv/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/vascovasconcelos/1d3c6970-f862-4049-81f1-955c5c4d66ac/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "mirkoviroli",
      "Name": "Mirko Viroli"
    },
    {
      "Affiliation": "University of Nebraska-Lincoln",
      "Key": "witawassrisaan",
      "Name": "Witawas Srisa-an",
      "URL": "http://cse.unl.edu/~witty/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/witawassrisaan/1dc96c49-2928-45a4-a4be-136fb24abc49/small.jpg"
    },
    {
      "Affiliation": "Indiana University",
      "Bio": "I am an Assistant Professor in the Department of Computer Science at Indiana University.\nResearch Interests: my research focuses on the design and analysis of software and programming languages. I am particularly interested in how programs grow from prototype scripts to robust software, and how programming language design can support this process. My research concerns type systems, software contracts, modularity, and extensibility. I\u2019m currently working with the DARPA CRASH program on Racket and with Mozilla Labs on JavaScript.",
      "Key": "samtobinhochstadt",
      "Name": "Sam Tobin-Hochstadt",
      "URL": "http://samth.github.io",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/samtobinhochstadt/1dff2a8c-650b-4462-b562-28b2f90dee36/small.jpg"
    },
    {
      "Affiliation": "Oracle Labs",
      "Bio": "I am the founder and initial architect of NetBeans, which is not just a well known IDE, but also the first modular desktop application framework written in Java. My name sounds Slavic and has a strange pronunciation (read the initial J as Y and last ch as in Scottish loch or in German Bach), because I am Czech. However, as NetBeans has been the flagship software product of Sun and Oracle for a while now, you don\u2019t have to worry that content of the TheAPIBook might not be widely applicable and understandable. \nMaintaining NetBeans Platform, its architecture and APIs has always been the primary focus of Jaroslav. During more than fifteen years of participating in the NetBeans.org project, Jaroslav has seen, made and helped to recover from many design mistakes. Such experience obligated Jaroslav to sit down and summarize it.",
      "Key": "jaroslavtulach",
      "Name": "Jaroslav Tulach",
      "URL": "http://wiki.apidesign.org/wiki/User:JaroslavTulach",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jaroslavtulach/1e439040-b573-4226-8a57-2a1234d1c102/small.jpg"
    },
    {
      "Affiliation": "ZeroTurnaround",
      "Key": "allanraundahlgregersen",
      "Name": "Allan Raundahl Gregersen"
    },
    {
      "Affiliation": "Purdue University",
      "Bio": "Professor Eugster\u2019s research aims at proposing support for developing distributed systems. Particular topics of interest, in the context of distributed settings, include algorithms, middleware, and programming languages, abstractions, and methodologies.\nProfessor Eugster was educated in Switzerland, and has worked for both Swiss Federal Institutes of Technology in Lausanne (EPFL) and in Zurich (ETHZ), as well as for Sun Microsystems (now Oracle) prior to joining Purdue University. He has authored over 70 refereed articles, and is a member of ACM and IEEE. Among other awards for his research and teaching, Professor Eugster has received an NSF CAREER award (2007) and Experienced Researcher fellowship by the Alexander von Humboldt foundation (2011). He is also a participant of the 2011 DARPA Computer Science Study Panel.",
      "Key": "patrickeugster",
      "Name": "Patrick Eugster",
      "URL": "https://www.cs.purdue.edu/people/faculty/peugster/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/patrickeugster/1fa653e9-3c13-4e0d-94cd-1d91db06b039/small.jpg"
    },
    {
      "Affiliation": "Tel Aviv University",
      "Key": "shaharmaoz",
      "Name": "Shahar Maoz",
      "URL": "http://www.cs.tau.ac.il/~maozs/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/shaharmaoz/2012e0cd-96b9-4871-bf52-40d01a3c5814/small.jpg"
    },
    {
      "Affiliation": "Tokyo Institute of Technology, Japan",
      "Bio": "Tomoyuki Aotani is an assistant professor in Dept. of Mathematical and Computing Sciences, Tokyo Institute of Technology. He received his BSc from Hosei University in 2004 and MA and PhD from the University of Tokyo in 2006 and 2009, respectively.",
      "Key": "tomoyukiaotani",
      "Name": "Tomoyuki Aotani",
      "URL": "https://taotani.wordpress.com/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tomoyukiaotani/204233c8-a4d9-40e6-9452-b1c66e17a875/small.jpg"
    },
    {
      "Affiliation": "iMinds - Distrinet, KU Leuven",
      "Bio": "Assistant professor at the iMinds-DistriNet research group at the Department of Computer Science, KU Leuven - University of Leuven, Belgium",
      "Key": "bartjacobs",
      "Name": "Bart Jacobs",
      "URL": "http://www.cs.kuleuven.be/~bartj/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/bartjacobs/208ad8e4-9df9-45fa-a8b1-cee6658ebdda/small.jpg"
    },
    {
      "Affiliation": "Technischen Universität Kaiserslautern",
      "Key": "annettebieniusa",
      "Name": "Annette Bieniusa",
      "URL": "http://www-user.rhrk.uni-kl.de/~bieniusa/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/annettebieniusa/20cb8a25-1c7a-4b12-aa1f-4741523f6611/small.jpg"
    },
    {
      "Affiliation": "Université catholique de Louvain",
      "Key": "petervanroy",
      "Name": "Peter Van Roy",
      "URL": "https://www.info.ucl.ac.be/~pvr/pldc.html",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/petervanroy/2113835c-4cf2-44f6-bdb4-3b858828d821/small.jpg"
    },
    {
      "Affiliation": "iMinds - Distrinet, KU Leuven",
      "Key": "dominiquedevriese",
      "Name": "Dominique Devriese",
      "URL": "https://distrinet.cs.kuleuven.be/people/dominiqu",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/dominiquedevriese/216db203-2b44-40bc-a62c-66791ebe7999/small.jpg"
    },
    {
      "Affiliation": "Charles University in Prague",
      "Key": "pavelparizek",
      "Name": "Pavel Parizek",
      "URL": "http://d3s.mff.cuni.cz/people/parizek/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/pavelparizek/22757877-53a4-486b-8190-22917796017f/small.jpg"
    },
    {
      "Affiliation": "University of Marburg",
      "Key": "ritaloogen",
      "Name": "Rita Loogen",
      "URL": "https://www.mathematik.uni-marburg.de/~loogen/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ritaloogen/231ff5fb-7631-4b37-aeca-013413d069cd/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "danielstolpe",
      "Name": "Daniel Stolpe"
    },
    {
      "Affiliation": "HARC / Y Combinator Research",
      "Key": "patrickdubroy",
      "Name": "Patrick Dubroy",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/patrickdubroy/809e3776-4917-4397-a6c5-b85d7a3e7839/small.jpg"
    },
    {
      "Affiliation": "Inria",
      "Key": "francescozappanardelli",
      "Name": "Francesco Zappa Nardelli",
      "URL": "http://www.di.ens.fr/~zappa",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/francescozappanardelli/27a17301-e2c8-46d8-8df3-3b8da30e8f34/small.jpg"
    },
    {
      "Affiliation": "CWI",
      "Bio": "Tijs van der Storm is researcher at Centrum Wiskunde &amp; Informatica (CW), the Dutch national institute for computer science and mathematics and teaches Software Construction at the Universiteit van Amsterdam (UvA). In his work he tries to solve software engineering problems through better language design and language engineering. He is one of the designers of the Rascal language. Apart from all that, he likes literature and hates ugly code.",
      "Key": "tijsvanderstorm",
      "Name": "Tijs van der Storm",
      "URL": "http://www.cwi.nl/~storm/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tijsvanderstorm/292525ce-bb43-4bcf-9ec0-4ba85faca75b/small.jpg"
    },
    {
      "Affiliation": "Chalmers University of Technology",
      "Key": "carloafuria",
      "Name": "Carlo A. Furia",
      "URL": "http://bugcounting.net/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/carloafuria/2943d706-7436-42b7-a571-c56cac42a30c/small.jpg"
    },
    {
      "Affiliation": "Victoria University of Wellington",
      "Bio": "I am a Senior Lecturer in the School of Engineering and Computer Science at Victoria University of Wellington, New Zealand.\nI am originally from Moscow, Russia with a background in Mathematics. I have completed my PhD in programming languages in 2006 and took up a job as a Lecturer in Software Engineering at Victoria University of Wellington. During my studies I took short breaks to work as a Visiting Researcher at Purdue University, and Software Engineer at two Wellington start-ups. I spent 2013 on sabbatical at Carnegie Mellon University in Pittsburgh, PA, USA.\nResearch Interests: programming languages.",
      "Key": "alexpotanin",
      "Name": "Alex Potanin",
      "URL": "http://ecs.victoria.ac.nz/Main/AlexPotanin",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/alexpotanin/2a231877-8f67-4b16-ba02-1b903219e59e/small.jpg"
    },
    {
      "Affiliation": "University of California, Irvine",
      "Bio": "Crista Lopes is a Professor of Informatics in the School of Information and Computer Sciences at the University of California, Irvine. Her research focuses on software engineering for large-scale data and systems. Early in her career, she was a founding member of the team at Xerox PARC that developed Aspect-Oriented Programming. Along with her research program, she is also a prolific software developer. Her open source contributions include being one of the core developers of OpenSimulator, a virtual world server. She is also a founder and consultant of Encitra, a company specializing in online virtual reality for early-stage sustainable urban redevelopment projects. She has a PhD from Northeastern University, and MS and BS degrees from Instituto Superior Tecnico in Portugal. She is the recipient of several National Science Foundation grants, including a prestigious CAREER Award. She claims to be the only person in the world who is both an ACM Distinguished Scientist and Ohloh Kudos Rank 9.",
      "Key": "cristalopes",
      "Name": "Crista Lopes",
      "URL": "https://www.ics.uci.edu/~lopes/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/cristalopes/2a709b22-4c7e-489a-8b15-9573227850bb/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "tarosekiyama",
      "Name": "Taro Sekiyama"
    },
    {
      "Affiliation": "NYU Tandon School of Engineering, USA",
      "Key": "fernandochirigati",
      "Name": "Fernando Chirigati",
      "URL": "http://bigdata.poly.edu/~fchirigati/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/fernandochirigati/2ab3b85e-4c99-47a5-85e6-4069391b16b6/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "dannygroenewegen",
      "Name": "Danny Groenewegen"
    },
    {
      "Affiliation": "",
      "Key": "carlosbaquero",
      "Name": "Carlos Baquero"
    },
    {
      "Affiliation": "Active Group GmbH",
      "Bio": "I am CTO of Active Group.\nWe do most of our software development using functional programming.",
      "Key": "michaelsperber",
      "Name": "Michael Sperber",
      "URL": "http://www.deinprogramm.de/sperber/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michaelsperber/2d788532-c704-4ea2-8dd2-dc148e548aef/small.jpg"
    },
    {
      "Affiliation": "Imperial College London",
      "Key": "julianafranco",
      "Name": "Juliana Franco",
      "URL": "http://wp.doc.ic.ac.uk/jvicent1/"
    },
    {
      "Affiliation": "Victoria University of Wellington",
      "Bio": "Programming languages PhD student at VUW working on Grace.",
      "Key": "timothyjones",
      "Name": "Timothy Jones",
      "URL": "http://homepages.ecs.vuw.ac.nz/~tim",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/timothyjones/2f3ecea2-e161-41ad-842c-d2457b2eebaa/small.jpg"
    },
    {
      "Affiliation": "National Institute of Informatics",
      "Key": "zhenjianghu",
      "Name": "Zhenjiang Hu",
      "URL": "http://research.nii.ac.jp/~hu/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/zhenjianghu/2f9ab5e7-9c06-4cfb-aeb0-393eaa8f5dbe/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "amirkirsh",
      "Name": "Amir Kirsh"
    },
    {
      "Affiliation": "",
      "Key": "lukechurch",
      "Name": "Luke Church"
    },
    {
      "Affiliation": "",
      "Key": "abigailcauchi",
      "Name": "Abigail Cauchi"
    },
    {
      "Affiliation": "University of Waterloo",
      "Key": "ondrejlhotak",
      "Name": "Ondřej Lhoták",
      "URL": "http://plg.uwaterloo.ca/~olhotak/"
    },
    {
      "Affiliation": "University of Minnesota",
      "Key": "ericvanwyk",
      "Name": "Eric Van Wyk",
      "URL": "http://www.cs.umn.edu/~evw",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ericvanwyk/32c56f41-b717-4d10-84ee-3403f2bd28a6/small.jpg"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Key": "wolfgangdemeuter",
      "Name": "Wolfgang De Meuter",
      "URL": "https://soft.vub.ac.be/soft/members/wdmeuter",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/wolfgangdemeuter/331349b2-02a4-453b-8a40-0facac5a29e6/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "thomasspringer",
      "Name": "Thomas Springer"
    },
    {
      "Affiliation": "Cognitive Computing, IBM TJ Watson Research Center",
      "Key": "vijaysaraswat",
      "Name": "Vijay Saraswat",
      "URL": "http://saraswat.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/vijaysaraswat/3437e589-023a-4254-b32c-1b5bbcacdf7a/small.jpg"
    },
    {
      "Affiliation": "University of Waterloo",
      "Key": "wernerdietl",
      "Name": "Werner Dietl",
      "URL": "https://ece.uwaterloo.ca/~wdietl/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/wernerdietl/34ae68bb-bed1-431c-9629-6fdd3904b19c/small.jpg"
    },
    {
      "Affiliation": "University of Waterloo",
      "Key": "minghoyee",
      "Name": "Ming-Ho Yee"
    },
    {
      "Affiliation": "IRIF, Université Paris Diderot",
      "Key": "gustavopetri",
      "Name": "Gustavo Petri",
      "URL": "http://gpetri.github.io/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/gustavopetri/3733ee30-7343-4afa-b30a-561465ee2be2/small.jpg"
    },
    {
      "Affiliation": "Alcatel-Lucent Bell Labs",
      "Bio": "From 1982 Ph.D. student at the University of Washington\u2013defended Ph.D.: \u201cObject Mobility in a Distributed Object-Oriented System\u201d December 1988, Seattle, Washington, USA.. Moved back to Roskilde 1987. Assistant Professor Dept. of Computer Science, University of Copenhagen, 1987, Associate Professor from 1989, Department Chair 1989-92. Full professor since 2000.",
      "Key": "ericjul",
      "Name": "Eric Jul",
      "URL": "http://ericjul.dk",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ericjul/3752976d-2b68-4641-b45a-a6fca64e4bb7/small.jpg"
    },
    {
      "Affiliation": "Imperial College London",
      "Key": "susaneisenbach",
      "Name": "Susan Eisenbach",
      "URL": "http://wp.doc.ic.ac.uk/susan/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/susaneisenbach/37c3a216-06fc-4c6c-8539-486605174b4c/small.jpg"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Key": "nathalieoostvogels",
      "Name": "Nathalie Oostvogels"
    },
    {
      "Affiliation": "",
      "Bio": "I really enjoy finding different ways to write code, sometimes for performance, other times for succinctness, sometimes, just because you can, there is no better way to learn than trying.\nWhen I am not working I tend to play with Haskell or other languages or cats\nConferences and meetups are a great way to learn more, so I try to help when I can to make them happen. For that reason I co-organise Functional Kats and GameCraft. I also speak at local and international conferences like CodeMesh, Progressive.Net, ProF#, Lambda Days and many more.",
      "Key": "andreamagnorsky",
      "Name": "Andrea Magnorsky",
      "URL": "http://www.roundcrisis.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/andreamagnorsky/393a23b4-aead-4cf5-a1c4-ff1acdd552e4/small.jpg"
    },
    {
      "Affiliation": "Wayne State University",
      "Key": "marwanabiantoun",
      "Name": "Marwan Abi-Antoun",
      "URL": "http://www.cs.wayne.edu/~mabianto/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/marwanabiantoun/398ac993-15c5-4b48-a9a6-ee25a5396098/small.jpg"
    },
    {
      "Affiliation": "Israel Institute of Technology",
      "Bio": "I am an Associate Professor in the Department of Computer Science at Technion - Israel Institute of Technology, Israel.\nResearch Interests: Software engineering, in particular: aspects related to the object-oriented paradigm, programming languages and parsing.",
      "Key": "yossigill",
      "Name": "Yossi Gill",
      "URL": "http://www.cs.technion.ac.il/~yogi/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/yossigill/39acc62e-1b7f-48c1-a488-421e3565bdb2/small.jpg"
    },
    {
      "Affiliation": "Department of Computer Science, University College London",
      "Key": "federicasarro",
      "Name": "Federica Sarro",
      "URL": "http://www0.cs.ucl.ac.uk/staff/F.Sarro/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/federicasarro/3a0973ec-72ed-4bbe-a747-e9eb0252d74c/small.jpg"
    },
    {
      "Affiliation": "University of Louisiana at Lafayette",
      "Key": "shengchen",
      "Name": "Sheng Chen",
      "URL": "http://sciences.louisiana.edu/node/147",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/shengchen/3a19723e-4509-46a1-8368-d4341219eb40/small.jpg"
    },
    {
      "Affiliation": "Communications Design Group / Y Combinator Research",
      "Key": "meixianli",
      "Name": "Meixian Li"
    },
    {
      "Affiliation": "SUNY Binghamton",
      "Key": "anthonycanino",
      "Name": "Anthony Canino"
    },
    {
      "Affiliation": "Google",
      "Bio": "&Uacute;lfar currently heads a security research team at Google. Previously, he has been a researcher at Microsoft Research, Silicon Valley, an Associate Professor at Reykjavik University, Iceland, and led security technology at two startups: GreenBorder and deCODE Genetics. He holds a PhD in computer science from Cornell University.",
      "Key": "ulfarerlingsson",
      "Name": "Úlfar Erlingsson",
      "URL": "http://research.google.com/pubs/ulfar.html",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ulfarerlingsson/3d58eb0b-8fb4-4dd8-87c5-8c7cd97a1076/small.jpg"
    },
    {
      "Affiliation": "Google",
      "Bio": "Gilad Bracha is the creator of the Newspeak programming language and a software engineer at Google where he works on Dart. Previously, he was a VP at SAP Labs, a Distinguished Engineer at Cadence, and a Computational Theologist and Distinguished Engineer at Sun. He is co-author of the Java Language Specification, and a researcher in the area of object-oriented programming languages. Prior to joining Sun, he worked on Strongtalk, the Animorphic Smalltalk System. He received his B.Sc in Mathematics and Computer Science from Ben Gurion University in Israel and a Ph.D. in Computer Science from the University of Utah.",
      "Key": "giladbracha",
      "Name": "Gilad Bracha",
      "URL": "bracha.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/giladbracha/3d5ec76d-4d63-456b-859a-6b44e587d1bd/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "vitorenes",
      "Name": "Vitor Enes"
    },
    {
      "Affiliation": "Johannes Kepler University Linz",
      "Key": "hanspetermossenbock",
      "Name": "Hanspeter Mössenböck",
      "URL": "http://ssw.jku.at/General/Staff/HM/"
    },
    {
      "Affiliation": "University of Tübingen, Germany",
      "Key": "paologgiarrusso1",
      "Name": "Paolo G. Giarrusso",
      "URL": "http://ps.informatik.uni-tuebingen.de/team/giarrusso/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/paologgiarrusso1/3f54af30-63f8-41dd-baea-85ddf95f0163/small.jpg"
    },
    {
      "Affiliation": "Mozilla Corporation",
      "Bio": "I work at Mozilla Research.",
      "Key": "shuyuguo",
      "Name": "Shu-yu Guo",
      "URL": "http://rfrn.org/~shu/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/shuyuguo/3f5de0cf-2b9c-4c75-8337-14933f4524a4/small.jpg"
    },
    {
      "Affiliation": "University of Oxford",
      "Key": "radugrigore",
      "Name": "Radu Grigore",
      "URL": "http://www.cs.ox.ac.uk/people/radu.grigore/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/radugrigore/3fc33aae-dfd0-4124-bf9f-9c79f3726fa1/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "zachtellman",
      "Name": "Zach Tellman",
      "URL": "http://ideolalia.com"
    },
    {
      "Affiliation": "Communications Design Group / UCLA",
      "Key": "sakethkasibatla",
      "Name": "Saketh Kasibatla"
    },
    {
      "Affiliation": "IMT Institute for Advanced Studies Lucca, Italy",
      "Key": "roccodenicola",
      "Name": "Rocco De Nicola",
      "URL": "http://cse.lab.imtlucca.it/~denicola/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/roccodenicola/4089685c-65df-4841-98c2-7e96ebff3676/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Key": "olivierfluckiger",
      "Name": "Olivier Fluckiger",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/olivierfluckiger/413c1991-0ab1-4150-b564-6ec9cf328f5a/small.jpg"
    },
    {
      "Affiliation": "French Network and Information Security Agency (ANSSI)",
      "Key": "pierreneron",
      "Name": "Pierre Neron",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/pierreneron/bba8f085-6296-4767-bfdd-1d80a1a3c9d3/small.jpg"
    },
    {
      "Affiliation": "Texas A&M University",
      "Key": "jaakkojarvi",
      "Name": "Jaakko Järvi",
      "URL": "https://parasol.tamu.edu/~jarvi/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jaakkojarvi/41c48e53-1928-4ff2-8f2d-56b9928d5f6e/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "michaelvitousek",
      "Name": "Michael Vitousek"
    },
    {
      "Affiliation": "IBM",
      "Bio": "I have participated in several projects at IBM over the years, many in the area of Aspect-Oriented Software Development (AOSD). The links at the left provide details of some of these projects, including publications.",
      "Key": "haroldossher",
      "Name": "Harold Ossher",
      "URL": "http://researcher.watson.ibm.com/researcher/view.php?person=us-ossher",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/haroldossher/42035755-5736-4202-98db-33656c081bff/small.jpg"
    },
    {
      "Affiliation": "KTH Royal Institute of Technology, Sweden",
      "Bio": "Past \n \n B.Sc. in Computer Science (Informatik) from University of Kiel (Christian Albrecht\u2019s Universit&auml;t zu Kiel), Germany \n M.Sc. in Software Engineering of Distributed Systems from KTH Royal Institute of Technology, Stockholm, Sweden \n\nPresent\nCurrently a PhD student at KTH Royal Institute of Technology, Stockholm, Sweden",
      "Key": "larskroll",
      "Name": "Lars Kroll",
      "URL": "http://www.kth.se/profile/lkroll/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/larskroll/b475f9d2-2cee-4209-afe5-1f2b41abdd6c/small.jpg"
    },
    {
      "Affiliation": "AICS-RIKEN, Japan",
      "Key": "naoyamaruyama",
      "Name": "Naoya Maruyama"
    },
    {
      "Affiliation": "TomTom",
      "Key": "naminasserazad",
      "Name": "Nami Nasserazad",
      "URL": "https://twitter.com/namiazad",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/naminasserazad/43140ff9-21e8-4fc3-aacb-370cc4f7b998/small.jpg"
    },
    {
      "Affiliation": "State University of New York (SUNY) Oswego",
      "Bio": "Doug Lea is a professor of Computer Science at the State University of New York at Oswego. He is an author of books, articles, reports, and standardization efforts on object oriented software development including those on specification, design and implementation techniques, distributed, concurrent, and parallel object systems, and software reusability; and has served as chair, organizer, or program committee member for many conferences and workshops in these areas. He is the primary author of several widely used software packages and components.",
      "Key": "douglea",
      "Name": "Doug Lea",
      "URL": "http://g.oswego.edu/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/douglea/43cd735e-bd1e-4632-8244-f64fec66fae0/small.jpg"
    },
    {
      "Affiliation": "UNSW Australia",
      "Key": "jinglingxue",
      "Name": "Jingling Xue",
      "URL": "http://www.cse.unsw.edu.au/~jingling/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jinglingxue/4494c516-6e22-408f-aa7e-f610026290c2/small.jpg"
    },
    {
      "Affiliation": "Sapienza University of Rome, Italy",
      "Bio": "I\u2019m a postdoctoral researcher in the SEASON Lab at Sapienza University of Rome, working on program analysis techniques with applications to online optimization and security.\nIn my dissertation I tackled two topical problems in adaptive program optimization: fine-grained performance profiling and on-stack replacement. I\u2019m the creator of OSRKit, an OSR library for the LLVM compiler toolchain.",
      "Key": "danieleconodelia",
      "Name": "Daniele Cono D'Elia",
      "URL": "http://www.dis.uniroma1.it/~delia/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/danieleconodelia/44ba56db-be0a-445f-bd2c-e9fbbe42381f/small.jpg"
    },
    {
      "Affiliation": "Computer Science, University of Otago",
      "Key": "richardokeefe",
      "Name": "Richard O'Keefe"
    },
    {
      "Affiliation": "University of Freiburg",
      "Key": "matthiaskeil",
      "Name": "Matthias Keil",
      "URL": "http://www2.informatik.uni-freiburg.de/~keilr/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/matthiaskeil/46123f29-6b8f-4a58-8ef0-0e5058836ec3/small.jpg"
    },
    {
      "Affiliation": "EPFL, Switzerland",
      "Bio": "I am a PhD student at &Eacute;cole polytechnique f&eacute;d&eacute;rale de Lausanne, in the Programming Methods Laboratory (LAMP). My supervisor is Prof. Martin Odersky, best known for designing the Scala programming language.\nI am interested in performance-oriented compilation of high-level language constructs. Convenience and safety make generics great for productivity, but due to the erasure transformation, they perform sub-optimally when used with primitive numeric types. This is where I can help. My main project, dubbed miniboxing, is aimed at compiling generic classes down to very efficient bytecode. It is available at scala-miniboxing.org and can speed up generic code by up to 22x.",
      "Key": "vladureche",
      "Name": "Vlad Ureche",
      "URL": "http://vladureche.ro",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/vladureche/4679fe7e-858e-4715-9ca9-d3980587ae9d/small.jpg"
    },
    {
      "Affiliation": "Universidad Siglo 21, Córdoba",
      "Key": "ricardomedel",
      "Name": "Ricardo Medel",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ricardomedel/a2977f79-3a9a-4c6b-80eb-d84edf9e36c5/small.jpg"
    },
    {
      "Affiliation": "University of Athens",
      "Bio": "Research Interests: applied programming languages and software engineering \n \n Language mechanisms for abstraction (declarative languages, program generation, DSLs, modules and components, generics, extensible languages, multi-paradigm programming) \n Program analysis and testing (pointer analysis, automatic test generation, invariant inference, symbolic execution) \n Languages and tools for systems (programming models for concurrency, language support for distributed computing, memory management and program locality)",
      "Key": "yannissmaragdakis",
      "Name": "Yannis Smaragdakis",
      "URL": "http://smaragd.org/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/yannissmaragdakis/473b2efe-0c7e-4257-ad4d-fcae7cc1a61b/small.jpg"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Key": "humbertorodriguezavila",
      "Name": "Humberto Rodriguez Avila",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/humbertorodriguezavila/477cf0f0-d066-452c-873a-794358e2e626/small.jpg"
    },
    {
      "Affiliation": "Southern Federal University",
      "Key": "juliabelyakova",
      "Name": "Julia Belyakova",
      "URL": "http://staff.mmcs.sfedu.ru/~juliet/index.en.html",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/juliabelyakova/b35236df-c22a-44f1-8048-aecfeba8ac2e/small.jpg"
    },
    {
      "Affiliation": "University of Bern, Switzerland",
      "Bio": "I am a Professor of Computer Science at the Institute of Computer Science (IAM) of the University of Bern, where he founded the Software Composition Group in 1994. I am a co-author of over 200 publications and co-author of the open-source books Object-Oriented Reengineering Patterns and Pharo by Example.",
      "Key": "oscarnierstrasz",
      "Name": "Oscar Nierstrasz",
      "URL": "http://scg.unibe.ch/staff/oscar",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/oscarnierstrasz/12f487d8-c14d-4d0b-b953-55dabb2fffdc/small.jpg"
    },
    {
      "Affiliation": "Parallel Universe",
      "Bio": "Ron Pressler is the founder of Parallel Universe, a YC company building a JVM-based server-side stack for easily writing high-performance, low latency applications that work in harmony with modern hardware architecture rather than fight it. Prior to founding Parallel Universe, Ron was a developer and a software architect in the Israeli Air Force, where he developed and designed air-traffic control and missile-defense systems, as well as large, clustered physics simulations.",
      "Key": "ronpressler",
      "Name": "Ron Pressler",
      "URL": "http://www.paralleluniverse.co/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ronpressler/47af994e-0b65-4395-afae-355e22c9e600/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "simonjgay",
      "Name": "Simon J. Gay"
    },
    {
      "Affiliation": "Tokyo Institute of Technology",
      "Key": "matthiasspringer",
      "Name": "Matthias Springer",
      "URL": "http://m-sp.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/matthiasspringer/18e44512-a532-4c0f-8e61-a1cdf818c416/small.jpg"
    },
    {
      "Affiliation": "Zalando",
      "Bio": "Andrey Kuzmin is a senior frontend engineer at Zalando. He has contributed to frontend tooling, most notably with his gulp-svgstore and gulp-postcss open source projects. Recently Andrey has been learning a functional reactive programming in Elm. Apart from work, he enjoys live music in Berlin and is a yoga newbie.",
      "Key": "andreykuzmin",
      "Name": "Andrey Kuzmin",
      "URL": "https://tech.zalando.com/blog/using-elm-to-create-a-fun-game-in-just-five-days/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/andreykuzmin/493ebeb4-d403-465e-8f85-a38dd80195eb/small.jpg"
    },
    {
      "Affiliation": "Royal Holloway University of London",
      "Key": "jonathanhoyland",
      "Name": "Jonathan Hoyland"
    },
    {
      "Affiliation": "École des Mines de Nantes, France",
      "Key": "mariosudholt",
      "Name": "Mario Südholt",
      "URL": "http://www.emn.fr/z-info/sudholt/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/mariosudholt/4a3e1636-9973-44eb-8388-df84763b0bf6/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "davidcachera",
      "Name": "David Cachera"
    },
    {
      "Affiliation": "UT Austin",
      "Bio": "William Cook is an Associate Professor in the Department of Computer Sciences at the University of Texas at Austin. His research is focused on object-oriented programming, programming languages, modeling languages, and the interface between programming languages and databases. Prior to joining UT in 2003, Dr. Cook was Chief Technology Officer and co-founder of Allegis Corporation. He was chief architect for several award-winning products, including the eBusiness Suite at Allegis, the Writer\u2019s Solution for Prentice Hall, and the AppleScript language at Apple Computer. At HP Labs his research focused on the foundations of object-oriented languages, including formal models of mixins, inheritance, and typed models of object-oriented languages. He completed his Ph.D. in Computer Science at Brown University in 1989.",
      "Key": "williamcook",
      "Name": "William Cook",
      "URL": "http://www.cs.utexas.edu/~wcook/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/williamcook/4b24e66e-5549-43f6-8e13-8010da47a4bf/small.jpg"
    },
    {
      "Affiliation": "Uppsala University",
      "Bio": "I am an associate professor at Department of Information Technology, Uppsala University, Uppsala, Sweden.",
      "Key": "tobiaswrigstad",
      "Name": "Tobias Wrigstad",
      "URL": "http://wrigstad.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tobiaswrigstad/4abf5948-cecc-4d23-8806-261022caa110/small.jpg"
    },
    {
      "Affiliation": "Uppsala University, Sweden and KU Leuven, Belgium",
      "Bio": "Dave Clarke is a Professor at the Department of Computer Science of the Katholieke Universiteit Leuven (Belgium), where he is a member of the DistriNet (Distributed Systems and Computer Networks) research group. Dave Clarke has a PhD from the University of New South Wales in Sydney, Australia, and he continued his scientific career as a postdoctoral researcher in Utrecht University, and as a scientific staff member at the CWI in Amsterdam. In his PhD thesis, and in several influential ECOOP and OOPSLA publications, Dave has pioneered and further developed the notion of ownership types to control some of the bad effects of aliasing in object-oriented languages.",
      "Key": "daveclarke",
      "Name": "Dave Clarke",
      "URL": "http://people.cs.kuleuven.be/~dave.clarke/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/daveclarke/4adff782-8c91-4e82-b071-ecb96baf118f/small.jpg"
    },
    {
      "Affiliation": "University of Malta",
      "Key": "gordonpace",
      "Name": "Gordon Pace",
      "URL": "http://www.cs.um.edu.mt/gordon.pace",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/gordonpace/4b52eb89-123e-43c8-9bcd-9221fb293173/small.jpg"
    },
    {
      "Affiliation": "Tel Aviv University",
      "Key": "janoliverringert",
      "Name": "Jan Oliver Ringert",
      "URL": "http://www.cs.tau.ac.il/~ringert/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/janoliverringert/4b9a196c-79cc-41d4-bb66-f13afd9fff19/small.jpg"
    },
    {
      "Affiliation": "Indiana University",
      "Bio": "Jeremy Siek is an Associate Professor at Indiana University Bloomington. Jeremy\u2019s areas of research include programming language design, type systems, mechanized theorem proving using proof assistants, and optimizing compilers. Jeremy\u2019s Ph.D. thesis explored foundations for constrained templates, aka the \u201cconcepts\u201d proposal for C++. Prior to that, Jeremy developed the Boost Graph Library, a C++ generic library for graph algorithms and data structures. Jeremy post-doc\u2019d at Rice University with Walid Taha with whom he developed the idea of gradual typing: a type system that integrates both dynamic and static typing in the same programming language. Jeremy is currently working on a gradually-typed version of Pytho. In 2009 Jeremy received the NSF CAREER award to fund his project: \u201cBridging the Gap Between Prototyping and Production\u201d. In 2010 and again in 2015, Jeremy was awarded a Distinguished Visiting Fellowship from the Scottish Informatics &amp; Computer Science Alliance.",
      "Key": "jeremysiek",
      "Name": "Jeremy Siek",
      "URL": "http://homes.soic.indiana.edu/jsiek/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jeremysiek/4ceb3667-5067-4806-9a32-2b8fd3004a1d/small.jpg"
    },
    {
      "Affiliation": "University of Athens",
      "Key": "aggelosbiboudis",
      "Name": "Aggelos Biboudis",
      "URL": "http://biboudis.github.io/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/aggelosbiboudis/4dfa6c0c-ec66-4983-b724-20a0cb160447/small.jpg"
    },
    {
      "Affiliation": "University of Pisa",
      "Key": "pierpaolodegano",
      "Name": "Pierpaolo Degano",
      "URL": "http://www.di.unipi.it/~degano/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/pierpaolodegano/4e10dec0-ec18-4d06-b134-da64b287d646/small.jpg"
    },
    {
      "Affiliation": "NASA Ames Research Center",
      "Key": "oksanatkachuk",
      "Name": "Oksana Tkachuk",
      "URL": "http://ti.arc.nasa.gov/profile/otkachuk/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/oksanatkachuk/4ebda62b-6b66-40d7-af3b-9b597688b765/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "stephaniebalzer",
      "Name": "Stephanie Balzer"
    },
    {
      "Affiliation": "",
      "Key": "aranlunzer",
      "Name": "Aran Lunzer"
    },
    {
      "Affiliation": "University of Tartu",
      "Key": "vesalvojdani",
      "Name": "Vesal Vojdani"
    },
    {
      "Affiliation": "The Johns Hopkins University",
      "Key": "scottfsmith",
      "Name": "Scott F. Smith"
    },
    {
      "Affiliation": "RMOD - INRIA Lille Nord Europe",
      "Key": "clementbera",
      "Name": "Clément Béra",
      "URL": "https://clementbera.wordpress.com/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/clementbera/524e8358-87cd-4690-bdbd-1fad8262d1eb/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "andreacorradi",
      "Name": "Andrea Corradi"
    },
    {
      "Affiliation": "Mesosphere",
      "Key": "neilconway",
      "Name": "Neil Conway",
      "URL": "http://www.neilconway.org/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/neilconway/52898fd9-7039-4307-b414-23477fe8270c/small.jpg"
    },
    {
      "Affiliation": "University of California, Santa Cruz",
      "Key": "peteralvaro",
      "Name": "Peter Alvaro",
      "URL": "http://people.ucsc.edu/~palvaro/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/peteralvaro/53beef24-42fd-4a3c-924d-51db8bf90ab7/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Bio": "Jan Vitek is a Professor of Computer Science at Northeastern University. Dr. Vitek was born in Czechoslovakia and educated in Switzerland. Over the years, he worked on topics related to programming languages, their design, use, and implementation. With Noble and Potter, he proposed the notion of flexible alias control which became know as Ownership Types. He led the Ovm project which produced the first real-time Java virtual machine to be flight tested on a ScanEagle drone (he claims no one was harmed). Outcomes of this project include the Schism real-time garbage collector and the FijiVM \u2013 a production VM for embedded systems. More recently, he worked on dynamic languages, trying to make sense of JavaScript and to design a new language called, Thorn. Nowadays, he spends his time with statisticians and data scientists. Jan believes that his 2012 election as Chair of SIGPLAN was an accident; since has been busy trying to rock the boat to ensure this does not happen again. In his spare time, Jan enjoys organizing conferences and sitting on PCs (over 25 in the last decade). He founded the MOS (mobile objects), IWACO (alias control), STOP (gradual typing), and TRANSACT (transactional memory) workshop series. He was the first program chair of VEE and chaired ESOP, ECOOP, Coordination and TOOLS. He was the general chair of PLDI (in Beijing!), ISMM and LCTES. He may still be sitting on the steering committees of ECOOP, JTRES, ICFP, OOPLSA, POPL, PLDI, LCTES, ESOP.",
      "Key": "janvitek",
      "Name": "Jan Vitek",
      "URL": "http://janvitek.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/janvitek/53f115e3-8db9-4b80-b49a-f5eb2a0c8696/small.jpg"
    },
    {
      "Affiliation": "Universidad Tecnologica Nacional, Facultad Regional Cordoba",
      "Key": "emanuelravera",
      "Name": "Emanuel Ravera",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/emanuelravera/2c483e71-dde1-4f58-9bb6-e4a829a70c7b/small.jpg"
    },
    {
      "Affiliation": "Semmle",
      "Key": "pavelavgustinov",
      "Name": "Pavel Avgustinov"
    },
    {
      "Affiliation": "Delft University of Technology",
      "Key": "feliennehermans",
      "Name": "Felienne Hermans",
      "URL": "http://www.felienne.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/feliennehermans/5654c978-d230-4269-8b1c-2a58871d2f88/small.jpg"
    },
    {
      "Affiliation": "Kyoto University",
      "Key": "atsushiigarashi",
      "Name": "Atsushi Igarashi",
      "URL": "http://www.fos.kuis.kyoto-u.ac.jp/~igarashi/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/atsushiigarashi/570886dc-7183-4e5b-bc64-0ccac223aceb/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "markuswutzler",
      "Name": "Markus Wutzler"
    },
    {
      "Affiliation": "Imperial College London",
      "Key": "alcestescalas",
      "Name": "Alceste Scalas"
    },
    {
      "Affiliation": "",
      "Key": "paolagiannini",
      "Name": "Paola Giannini"
    },
    {
      "Affiliation": "",
      "Key": "benoitduhoux",
      "Name": "Benoît Duhoux"
    },
    {
      "Affiliation": "Victoria University of Wellington",
      "Key": "marcoservetto",
      "Name": "Marco Servetto"
    },
    {
      "Affiliation": "Eötvös Loránd University, Faculty of Informatics, Department of Programming Languages and Compilers",
      "Key": "norbertpataki",
      "Name": "Norbert Pataki"
    },
    {
      "Affiliation": "Sapienza University of Rome",
      "Key": "camildemetrescu",
      "Name": "Camil Demetrescu",
      "URL": "http://www.dis.uniroma1.it/~demetres/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/camildemetrescu/d6d70866-6ad9-4516-bfb7-2e1fb26921bd/small.jpg"
    },
    {
      "Affiliation": "Carnegie Mellon University",
      "Bio": "Jonathan Aldrich is Associate Professor of Computer Science at Carnegie Mellon University. He is the director of CMU\u2019s Ph.D. and undergraduate minor programs in Software Engineering, and teaches courses in programming languages, software engineering, and program analysis for quality and security. In addition, he serves as a consultant on architecture, design, and legal issues in the software industry. Dr. Aldrich joined the CMU faculty after completing a Ph.D. at the University of Washington and a B.S. at Caltech.\nDr. Aldrich\u2019s research centers on programming languages and type systems that are deeply informed by software engineering considerations. His research contributions include verifying the correct implementation of an architectural design, modular formal reasoning about code, and API protocol specification and verification. For his work on software architecture, Aldrich received a 2006 NSF CAREER award and the 2007 Dahl-Nygaard Junior Prize, given annually for a significant technical contribution to object-oriented programming. Current areas of research focus include extensible programming languages, analysis and type systems for security and productivity, and foundations of object-oriented programming.",
      "Key": "jonathanaldrich",
      "Name": "Jonathan Aldrich",
      "URL": "http://www.cs.cmu.edu/~aldrich/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jonathanaldrich/5ce0ecc9-71c5-44d2-91db-8ee048d1c046/small.jpg"
    },
    {
      "Affiliation": "Purdue & Oracle Labs",
      "Bio": "Tiark Rompf is an assistant professor at Purdue University and a researcher at Oracle Labs. His work focuses on runtime code generation, advanced compiler technology, and associated language support. From 2008 to 2014 he was a member of Martin Odersky\u2019s Scala team at EPFL where he developed the LMS compiler framework and made various contributions to the Scala language and toolchain (delimited continuations, efficient immutable data structures, compiler speedups, type system work).",
      "Key": "tiarkrompf",
      "Name": "Tiark Rompf",
      "URL": "http://tiarkrompf.github.io/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tiarkrompf/5d2d21dd-254c-4ec5-86bd-07aee7b48110/small.jpg"
    },
    {
      "Affiliation": "UNSW Australia",
      "Key": "tiantan",
      "Name": "Tian Tan",
      "URL": "http://www.cse.unsw.edu.au/~tiantan",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tiantan/5d4e4f09-af53-4247-afa6-5de377d6b138/small.jpg"
    },
    {
      "Affiliation": "Rensselaer Polytechnic Institute",
      "Key": "anamilanova",
      "Name": "Ana Milanova",
      "URL": "www.cs.rpi.edu/~milanova",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/anamilanova/5dd74b7c-4f09-4b75-99bf-0b01e7d52dcd/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Key": "paleyli",
      "Name": "Paley Li",
      "URL": "https://palez.github.io",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/paleyli/5f6e3302-652d-4862-b5b6-d621e9b5a653/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Key": "tomaskalibera",
      "Name": "Tomas Kalibera",
      "URL": "https://www.linkedin.com/in/kalibera",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tomaskalibera/5e8fabb7-7e91-49dc-9fd6-dd6eb1d7c323/small.jpg"
    },
    {
      "Affiliation": "Università di Padova, Italy",
      "Bio": "Silvia Crafa is Professor of Advanced Topics in Programming Languages at University of Padova, and she is member of the IFIP Working Group n.1.8: Concurrency Theory. Her research focuses on formal methods for the analysis of concurrent and distributed systems, ranging form the study of semantic foundations to logics and type systems.",
      "Key": "silviacrafa",
      "Name": "Silvia Crafa",
      "URL": "http://www.math.unipd.it/~crafa/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/silviacrafa/5f97ba05-32f8-4d62-a880-17450848f655/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "nguonlytaing",
      "Name": "Nguonly Taing"
    },
    {
      "Affiliation": "University of California, Santa Cruz",
      "Key": "christopherschuster",
      "Name": "Christopher Schuster",
      "URL": "http://www.cs.ucsc.edu/~cschuster/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/christopherschuster/e83442d6-886e-4a67-83cd-77ac47511cca/small.jpg"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Key": "joeridekoster",
      "Name": "Joeri De Koster",
      "URL": "https://soft.vub.ac.be/soft/members/jdekoste",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/joeridekoster/60c553e5-02bb-408d-9e8f-b3ca014fa962/small.jpg"
    },
    {
      "Affiliation": "University of Marburg",
      "Key": "paologgiarrusso",
      "Name": "Paolo G. Giarrusso"
    },
    {
      "Affiliation": "University of East Anglia",
      "Key": "stephenjones",
      "Name": "Stephen Jones",
      "URL": "https://www.uea.ac.uk/norwich-business-school/people/profile/stephen-j-jones",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/stephenjones/1b1ab9ec-d147-40ae-bd5e-8d09904e8997/small.jpg"
    },
    {
      "Affiliation": "Google Inc.",
      "Bio": "Mark S. Miller is the main designer of the E and Dr. SES distributed object-capability programming languages, inventor of Miller Columns, a pioneer of agoric (market-based secure distributed) computing, an architect of the Xanadu hypertext publishing system, a representative to the EcmaScript committee, and one of Yedalog\u2019s creators.",
      "Key": "markmiller",
      "Name": "Mark Miller",
      "URL": "http://research.google.com/pubs/author35958.html",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/markmiller/64622953-ab96-4f03-ade5-4ed19b244771/small.jpg"
    },
    {
      "Affiliation": "Samsung Research America",
      "Bio": "Satish Chandra obtained a PhD from the University of Wisconsin-Madison in 1997, and a B.Tech from the Indian Institute of Technology-Kanpur in 1991, both in computer science. From 1997 to 2002, he was a member of technical staff at Bell Laboratories, where his research focused on program analysis, domain-specific languages, and data-communication protocols. From 2002 to 2013, he was a research staff member at IBM Research, where his research focused on bug finding and verification, software synthesis, and test automation. He joined Samsung Electronics in 2013, where he leads the advanced programming tools research team. He is an ACM Distinguished Scientist.",
      "Key": "satishchandra",
      "Name": "Satish Chandra",
      "URL": "https://sites.google.com/site/schandraacmorg/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/satishchandra/6500e1d7-9e95-407e-880e-7448724e58b8/small.jpg"
    },
    {
      "Affiliation": "University of West Bohemia, Pilsen, CZ",
      "Key": "kamiljezek",
      "Name": "Kamil Jezek",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/kamiljezek/6591b741-9039-4f8b-9b2f-496e0c370d20/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "angeloferrando",
      "Name": "Angelo Ferrando"
    },
    {
      "Affiliation": "",
      "Key": "noriyukisuzuki",
      "Name": "Noriyuki Suzuki"
    },
    {
      "Affiliation": "University of {Glasgow, Edinburgh}",
      "Key": "rolyperera",
      "Name": "Roly Perera",
      "URL": "http://dynamicaspects.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/rolyperera/67dad7a3-d23d-4113-bb8a-de5ff33ef76f/small.jpg"
    },
    {
      "Affiliation": "Pomona College",
      "Key": "michaelgreenberg",
      "Name": "Michael Greenberg",
      "URL": "http://www.cs.princeton.edu/~mg19/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michaelgreenberg/6850da2c-3964-4894-ac8c-c926ff62bc98/small.jpg"
    },
    {
      "Affiliation": "Portland State University",
      "Key": "forrestalexander",
      "Name": "Forrest Alexander"
    },
    {
      "Affiliation": "University of Freiburg, Germany",
      "Key": "luminousfennell",
      "Name": "Luminous Fennell"
    },
    {
      "Affiliation": "Microsoft Research India",
      "Key": "gramalingam",
      "Name": "G. Ramalingam",
      "URL": "http://research.microsoft.com/en-us/people/grama/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/gramalingam/69427a9c-43ec-4ff7-b155-0d072bb7457b/small.jpg"
    },
    {
      "Affiliation": "University of Melbourne",
      "Key": "tobymurray",
      "Name": "Toby Murray",
      "URL": "http://people.eng.unimelb.edu.au/tobym",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tobymurray/b22e1351-c7fc-420a-acef-492aadfce115/small.jpg"
    },
    {
      "Affiliation": "University College London",
      "Bio": "Jade Algave is a lecturer at University College London. Her area of expertise is weak memory models and the interface between hardware and programming languages. She actually understands what C++ programs do when run on a PPC processor!",
      "Key": "jadealglave",
      "Name": "Jade Alglave",
      "URL": "http://www0.cs.ucl.ac.uk/staff/j.alglave/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jadealglave/f59aaff2-de0d-46ca-9ff6-c760aca8f44e/small.jpg"
    },
    {
      "Affiliation": "Aarhus University",
      "Key": "esbenandreasen",
      "Name": "Esben Andreasen",
      "URL": "http://cs.au.dk/~esbena",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/esbenandreasen/6ad65be5-989c-453b-83cf-af26b10a0764/small.jpg"
    },
    {
      "Affiliation": "Delft University of Technology",
      "Key": "dacoharkes",
      "Name": "Daco Harkes",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/dacoharkes/fec5babc-7401-4a7e-8ba1-bcccbc523031/small.jpg"
    },
    {
      "Affiliation": "Universidad Tecnologica Nacional, Facultad Regional Cordoba",
      "Key": "nestornavarro",
      "Name": "Nestor Navarro"
    },
    {
      "Affiliation": "University of Washington",
      "Key": "chenglongwang",
      "Name": "Chenglong Wang",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/chenglongwang/a5eaa2e6-bcfe-4c30-9032-9baa6b1125f2/small.jpg"
    },
    {
      "Affiliation": "University of Wisconsin, Milwaukee",
      "Key": "johnboyland",
      "Name": "John Boyland",
      "URL": "http://www.cs.uwm.edu/~boyland/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/johnboyland/6c9d0890-5096-49fb-850b-25d7c58a38b2/small.jpg"
    },
    {
      "Affiliation": "ETH Zurich",
      "Key": "veselinraychev",
      "Name": "Veselin Raychev",
      "URL": "http://www.srl.inf.ethz.ch/raychev.php",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/veselinraychev/6d2e705f-e955-45d9-a160-3d68ec84c044/small.jpg"
    },
    {
      "Affiliation": "Carnegie Mellon University",
      "Key": "christiankastner",
      "Name": "Christian Kästner",
      "URL": "http://www.cs.cmu.edu/~ckaestne/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/christiankastner/564f35f8-0d62-4bb4-b2f6-e556ecfe9117/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "astridthomschke",
      "Name": "Astrid Thomschke"
    },
    {
      "Affiliation": "TU Delft",
      "Key": "gabrielkonat",
      "Name": "Gabriël Konat"
    },
    {
      "Affiliation": "Klarna",
      "Bio": "Developer and philosopher. In the industry since the last millennium. Currently building interfaces with functional techniques.",
      "Key": "juanlulkin",
      "Name": "Juan Lulkin",
      "URL": "https://medium.com/@joaomilho/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/juanlulkin/6e7e6fbe-e695-40c0-870f-49c92f83f6d2/small.jpg"
    },
    {
      "Affiliation": "Victoria University of Wellington",
      "Bio": "James Noble is Professor of Computer Science and Software Engineering at Victoria University of Wellington, New Zealand. James has B.Sc(Hons) and Ph.D. degrees, both from VUW, completed in 1997. After leaving VUW, James worked in Sydney, first at the University of Technology, Sydney, and then at the Microsoft Research Institute, Macquarie University. James returned to VUW as a lecturer in late 1999, just in time to avoid the predicted end of the world.\nJames\u2019s research centres around software design. This includes the design of the users\u2019 interface, the parts of software that users have to deal with every day, and the programmers\u2019 interface, the internal structures and organisations of software that programmers see only when they are designing, building, or modifying software. His research in both of these areas is coloured by my longstanding interest in object oriented approaches to design, and topics he has studies range from aliasing and object ownership, design patterns, agile methodology, via usability, visualisation and computer music, to postmodernism and the semiotics of programming.",
      "Key": "jamesnoble",
      "Name": "James Noble",
      "URL": "http://homepages.mcs.vuw.ac.nz/~kjx/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jamesnoble/6f993a92-503e-44c6-9bbb-bfd05bf4ed23/small.jpg"
    },
    {
      "Affiliation": "TU Delft",
      "Key": "casperbachpoulsen",
      "Name": "Casper Bach Poulsen",
      "URL": "http://casperbp.net",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/casperbachpoulsen/2cddd6a9-d920-4f73-9fcf-f4d9462eb0e3/small.jpg"
    },
    {
      "Affiliation": "Yale University",
      "Key": "erickoskinen",
      "Name": "Eric Koskinen",
      "URL": "http://erickoskinen.com/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/erickoskinen/703822a5-35cd-47b6-913c-0c479826dc10/small.jpg"
    },
    {
      "Affiliation": "HARC / Y Combinator Research",
      "Key": "markoroder",
      "Name": "Marko Röder"
    },
    {
      "Affiliation": "Papers We Love",
      "Bio": "Michael R. Bernstein lives in Takoma Park, MD and spends most of his time thinking about pottery, obscure LPs, food, and the intersection of philosophy and Computer Science.",
      "Key": "michaelbernstein",
      "Name": "Michael Bernstein",
      "URL": "http://michaelrbernste.in",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michaelbernstein/7093ce36-e578-4571-a8b9-75496bf64c05/small.jpg"
    },
    {
      "Affiliation": "University of Freiburg",
      "Key": "peterthiemann",
      "Name": "Peter Thiemann",
      "URL": "http://www2.informatik.uni-freiburg.de/~thiemann/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/peterthiemann/70f54421-3a29-4c8e-b261-9849ef81afd7/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "paulosergioalmeida",
      "Name": "Paulo Sérgio Almeida"
    },
    {
      "Affiliation": "HASLab/INESC TEC & University of Minho",
      "Key": "alishoker",
      "Name": "Ali Shoker",
      "URL": "http://www.alishoker.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/alishoker/726b7d0c-cc8e-48ec-94be-d3f818ceeec4/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "nickfitzgerald",
      "Name": "Nick Fitzgerald"
    },
    {
      "Affiliation": "University of Cambridge",
      "Key": "alanblackwell",
      "Name": "Alan Blackwell",
      "URL": "http://www.cl.cam.ac.uk/~afb21/"
    },
    {
      "Affiliation": "EPFL",
      "Bio": "Programming languages enthusiast, PhD student at EPFL, member of the Scala team, Scala macros guy",
      "Key": "eugeneburmako",
      "Name": "Eugene Burmako",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/eugeneburmako/b226995a-dbc2-43a2-92f9-9e67bfd03f09/small.jpg"
    },
    {
      "Affiliation": "Pomona College",
      "Bio": "Kim B. Bruce has been Reuben C. and Eleanor Winslow Professor of Computer Science at Pomona College since the summer of 2005. He is the Frederick Latimer Wells Professor of Computer Science emeritus at Williams College, where he taught for 28 years. His first position out of graduate school was as an instructor in Mathematics at Princeton University from 1975 to 1977. His research program was originally in the model theory of languages with generalized quantifiers, but his interests turned to programming languages after his stay at M.I.T. His research focus evolved from models of the polymorphic lambda calculus to the study of semantics and type theory. This led to his continuing work in the design of object-oriented languages. His most recent research project involves the design of a new language, Grace, designed for use in the first two years of Computer Science education.",
      "Key": "kimbruce",
      "Name": "Kim Bruce",
      "URL": "http://www.cs.pomona.edu/~kim/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/kimbruce/75d65698-aaf4-4173-88cc-4a4ddbaefe1f/small.jpg"
    },
    {
      "Affiliation": "Massey University, New Zealand",
      "Key": "jensdietrich",
      "Name": "Jens Dietrich",
      "URL": "https://sites.google.com/site/jensdietrich/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jensdietrich/ab54c290-4f44-4d77-9842-cdc18922d7b4/small.jpg"
    },
    {
      "Affiliation": "University of California, Santa Cruz",
      "Key": "cormacflanagan",
      "Name": "Cormac Flanagan",
      "URL": "http://users.soe.ucsc.edu/~cormac/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/cormacflanagan/fd454a8e-4230-4fa5-a4da-1d16a1027de3/small.jpg"
    },
    {
      "Affiliation": "ETH Zurich",
      "Bio": "I am working at ETH Z&uuml;rich as a postdoc in Peter M&uuml;ller\u2019s group in the area of program verification. I am mainly interested in specifying and verifying object-oriented programs, ideally in ways which can be supported by tools which are both automatic and usable by typical programmers.",
      "Key": "alexanderjsummers",
      "Name": "Alexander J. Summers",
      "URL": "http://people.inf.ethz.ch/summersa/wiki/index.php",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/alexanderjsummers/782c9e8d-ab39-41d3-994c-10ef87bd0664/small.jpg"
    },
    {
      "Affiliation": "Technische Universität Darmstadt",
      "Key": "sarahnadi",
      "Name": "Sarah Nadi",
      "URL": "http://www.sarahnadi.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/sarahnadi/791d6b64-d964-4469-b05b-d5713135dd4c/small.jpg"
    },
    {
      "Affiliation": "Università della Svizzera italiana",
      "Key": "nosheenzaza",
      "Name": "Nosheen Zaza",
      "URL": "http://www.nosheenzaza.com/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/nosheenzaza/f1d583ad-4dc8-48d4-a74c-43bd41109cd2/small.jpg"
    },
    {
      "Affiliation": "UC Santa Barbara",
      "Key": "benhardekopf",
      "Name": "Ben Hardekopf",
      "URL": "www.cs.ucsb.edu/~benh",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/benhardekopf/79ca644e-03bf-459a-8141-6ad401ef9670/small.jpg"
    },
    {
      "Affiliation": "Portland State University",
      "Bio": "My research interests are in the area of programming languages, operating systems, object-oriented systems and distributed computing, and more specifically in the region where they overlap (such as language design for distributed Object-oriented computing.) My favorite system for trying out ideas is Squeak Smalltalk. I have written a few Squeak goodies that I believe are generally useful. I have been actively working on Traits with the folks from SCG in Bern; see Nathanael Sch&auml;rli\u2019s Traits page for details. I\u2019m a co-author of two books on Smalltalk programming, Squeak by Example, and Pharo By Example.",
      "Key": "andrewblack",
      "Name": "Andrew Black",
      "URL": "http://www.cs.pdx.edu/~black",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/andrewblack/7a64dfdd-f952-418a-b3de-3351f76e441a/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Bio": "Matthias Felleisen, a Trustee Professor at Northeastern University\u2019s College of Computer Science, has spent 30 years exploring programming languages and the pedagogy of software development. After receiving his PhD at Indiana University in 1987, he launched his academic career at Rice University; in 2001, he moved to Northeastern.\nFor the first decade of his career, Felleisen developed a new theoretical framework for modeling programming languages. Over time, this framework has provided the most widely used technique for proving type soundness theorems, the fundamental correctness claims for programming languages.\nIn 1995, Felleisen launched two related projects: (1) a K-12 outreach project with the goal of synthesizing mathematics and programming education and (2) the Racket language design project in support of the outreach project. Felleisen and his team taught dozens of intensive 5-day teacher training workshops over 20 years, focusing on program design as systematic problem solving. Working with Northeastern undergraduates, they also created the Bootstrap curriculum for middle schools; the curriculum has been adopted by code.org. The team\u2019s Racket programming language has become a test bed for language design ideas from mixins to frameworks for domain-specific languages, from software contracts to gradual typing systems, and from web programming disciplines to distributed interactions. It is used in many applications, from DoD software to Naughty Dog\u2019s games.\nFor his research on programming languages, Felleisen was inducted as an ACM Fellow in 2006 and received ACM SIGPLAN\u2019s Achievement Award in 2012. Also in 2012, his paper on contracts for higher-order languages was picked asthe most influential ICFP 2002 publication. Felleisen has delivered keynote addresses at many programming language conferences, including POPL, ECOOP, and ICFP. For his educational outreach, ACM honored Felleisen with the Karl V. Karlstrom Award in 2010. ACM SIGCSE named Felleisen Outstanding Educator of the Year in 2011. In conjunction with the latter, he delivered the keynote at the annual Symposium on Computer Science Education.",
      "Key": "matthiasfelleisen",
      "Name": "Matthias Felleisen",
      "URL": "http://www.ccs.neu.edu/home/matthias/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/matthiasfelleisen/7a851444-de7f-4206-86ed-a00a9536f985/small.jpg"
    },
    {
      "Affiliation": "Google",
      "Key": "erikernst",
      "Name": "Erik Ernst",
      "URL": "http://cs.au.dk/~eernst/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/erikernst/7c096774-add3-4499-ae55-137c7e9b3489/small.jpg"
    },
    {
      "Affiliation": "Google",
      "Bio": "Kasper Lund is a software engineer at Google working on the design and implementation of programming languages. He has more than 15 years of industrial experience in designing and implementing virtual machines and runtime systems and his primary areas of interests and expertise are efficient interpretation, dynamic compilation, and adaptive optimizations.",
      "Key": "kasperlund",
      "Name": "Kasper Lund",
      "URL": "https://plus.google.com/u/0/100258330325630692559",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/kasperlund/7d0f0039-5d9a-4e60-ba6b-decc7a0d5d7f/small.jpg"
    },
    {
      "Affiliation": "Swarthmore College",
      "Key": "zacharypalmer",
      "Name": "Zachary Palmer",
      "URL": "http://cs.swarthmore.edu/~zpalmer/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/zacharypalmer/80334ed8-062a-448f-be15-336f1d834018/small.jpg"
    },
    {
      "Affiliation": "HPI",
      "Bio": "Robert Hirschfeld is a Full Professor of Computer Science at the Hasso Plattner Institute at the University of Potsdam, Germany. There he founded and leads the Software Architecture Group which is concerned with fundamental elements and structures of software. Methods and tools are developed for improving the comprehension and design of complex and interesting systems.\nHe served as a visiting professor at the Tokyo Institute of Technology (東京工業大学) and The University of Tokyo (東京大学), Japan.\nRobert was a senior researcher with DoCoMo Euro-Labs, the European research facility of NTT DoCoMo Japan, where he worked on infrastructure components for next generation mobile communication systems with a focus on dynamic service adaptation and context-oriented programming.\nPrior to joining DoCoMo Euro-Labs, he was a principal engineer at Windward Solutions in Sunnyvale, California, where he designed and implemented distributed object systems, consulted in the area of object database technologies, and developed innovative software products and applications.\nRobert received a Ph.D. in Computer Science from the Ilmenau University of Technology, Germany.",
      "Key": "roberthirschfeld",
      "Name": "Robert Hirschfeld",
      "URL": "http://www.hirschfeld.org/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/roberthirschfeld/994ef4df-a890-4f16-bc1b-73b117dab33c/small.jpg"
    },
    {
      "Affiliation": "GoOpti",
      "Bio": "Built my first computer out of Lego bricks and learned to program soon after. Emergence, networks, modes of thought, limits of language and expression are what makes me smile (and keeps me up at night). Currently working at GoOpti making the company data-driven; setting up our analytics infrastructure (end goal: provide any answer stemming from data in 2 min or less); and building our predictive-real time-superduper pricing engine.",
      "Key": "simonbelak",
      "Name": "Simon Belak",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/simonbelak/825fc07f-2599-4ea6-8252-b78824c98a5b/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "guoyangchen",
      "Name": "Guoyang Chen"
    },
    {
      "Affiliation": "University of East Anglia",
      "Bio": "I am a dedicated and passionate researcher and teacher, with a wide range of industrial experience across the full domains of ICT from project management to systems analysis and programming. An effective communicator I have extensive experience in communicating technical ideas and concepts to a wide audience with different knowledge and English language abilities.",
      "Key": "davidcutting",
      "Name": "David Cutting",
      "URL": "http://davecutting.uk/cv/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/davidcutting/82a7bdd8-fa15-4a04-ad6b-2d481f928094/small.jpg"
    },
    {
      "Affiliation": "Universita della Svizzera italiana (USI)",
      "Key": "nathanielnystrom",
      "Name": "Nathaniel Nystrom"
    },
    {
      "Affiliation": "",
      "Key": "robertocasadei",
      "Name": "Roberto Casadei"
    },
    {
      "Affiliation": "",
      "Key": "michalchalmoviansky",
      "Name": "Michal Chalmovianský"
    },
    {
      "Affiliation": "Adobe Systems, Inc.",
      "Key": "seanparent",
      "Name": "Sean Parent"
    },
    {
      "Affiliation": "TU Delft",
      "Key": "michielhaisma",
      "Name": "Michiel Haisma",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michielhaisma/78ea9329-26f9-4da4-ad79-7e50a6381aa2/small.jpg"
    },
    {
      "Affiliation": "EPFL",
      "Bio": "Nada Amin is a member of the Scala team at EPFL, where she studies type systems and hacks on programming languages. She has contributed to Clojure\u2019s core.logic and Google\u2019s Closure compiler. She\u2019s loved helping others learn to program ever since tutoring SICP as an undergraduate lab assistant at MIT.",
      "Key": "nadaamin",
      "Name": "Nada Amin",
      "URL": "http://people.epfl.ch/nada.amin",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/nadaamin/86df08f7-bb8e-47e3-a899-cbc179c86dc7/small.jpg"
    },
    {
      "Affiliation": "Imperial College London",
      "Key": "sylvanclebsch",
      "Name": "Sylvan Clebsch",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/sylvanclebsch/8747b452-a4d5-4939-aa05-3b1d8b4a668d/small.jpg"
    },
    {
      "Affiliation": "University of Warwick, UK",
      "Key": "andrzejmurawski",
      "Name": "Andrzej Murawski",
      "URL": "https://www2.warwick.ac.uk/fac/sci/dcs/people/andrzej_murawski/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/andrzejmurawski/88b396b4-679d-4b88-b96e-c2c017ecd0d6/small.jpg"
    },
    {
      "Affiliation": "Carnegie Mellon University & Universidade Nova de Lisboa",
      "Key": "filipemilitao",
      "Name": "Filipe Militão"
    },
    {
      "Affiliation": "University of Gothenburg",
      "Key": "gerardoschneider",
      "Name": "Gerardo Schneider",
      "URL": "http://www.cse.chalmers.se/~gersch/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/gerardoschneider/88dbc706-4a1c-4417-b1ed-6ac04ce4bbe5/small.jpg"
    },
    {
      "Affiliation": "Université catholique de Louvain",
      "Key": "christophermeiklejohn",
      "Name": "Christopher Meiklejohn",
      "URL": "https://christophermeiklejohn.com/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/christophermeiklejohn/89a7657f-393e-4df5-be8c-fd56640f7e53/small.jpg"
    },
    {
      "Affiliation": "TomTom",
      "Bio": "Dmitry is a senior software engineer at TomTom, Amsterdam. He has been obsessed with Scala language since 2010 and is fascinated with all things related to Cloud, DevOps and building scalable distributed systems. Prior to joining TomTom, Dmitry worked on backend services in a few international startups (Reltio, AmbiqTech). In his spare time he is involved in organising various programming meetups around Amsterdam, and occasionally gives talks at those",
      "Key": "dmitryivanov",
      "Name": "Dmitry Ivanov",
      "URL": "http://dmitryivanov.io/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/dmitryivanov/8b754eb4-d358-4a0c-9114-79e6a5ae4bd0/small.jpg"
    },
    {
      "Affiliation": "Sapienza University of Rome",
      "Key": "danielegorla",
      "Name": "Daniele Gorla",
      "URL": "http://wwwusers.di.uniroma1.it/~gorla/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/danielegorla/8c02cce3-7407-41ad-afbc-5b455149991e/small.jpg"
    },
    {
      "Affiliation": "University of Maryland, College Park",
      "Key": "jeffreysfoster",
      "Name": "Jeffrey S. Foster",
      "URL": "http://www.cs.umd.edu/~jfoster",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jeffreysfoster/b22ce952-32b0-48bd-be56-12fd87bf3469/small.jpg"
    },
    {
      "Affiliation": "Universidad Tecnologica Nacional, Facultad Regional Cordoba",
      "Key": "alexisferreyra",
      "Name": "Alexis Ferreyra",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/alexisferreyra/7814b4ef-0a7d-4f5b-bf71-e7f2d4da61c5/small.jpg"
    },
    {
      "Affiliation": "NCSU",
      "Key": "yuezhao",
      "Name": "Yue Zhao"
    },
    {
      "Affiliation": "Intel Labs",
      "Key": "lindseykuper",
      "Name": "Lindsey Kuper",
      "URL": "http://www.cs.indiana.edu/~lkuper/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/lindseykuper/8d211e40-c4e3-4011-a799-05cb92e480cf/small.jpg"
    },
    {
      "Affiliation": "LIRMM, Université de Montpellier",
      "Key": "julienpages",
      "Name": "Julien Pagès",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/julienpages/d3e43d84-2ec0-43ef-8c6d-856ec09970f5/small.jpg"
    },
    {
      "Affiliation": "University of Genova",
      "Key": "elenazucca",
      "Name": "Elena Zucca",
      "URL": "http://www.disi.unige.it/person/ZuccaE/"
    },
    {
      "Affiliation": "University of Utah",
      "Key": "matthewflatt",
      "Name": "Matthew Flatt",
      "URL": "http://www.cs.utah.edu/~mflatt/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/matthewflatt/8d8bfc74-57d2-4b1e-9733-8091e32b1f5f/small.jpg"
    },
    {
      "Affiliation": "Google",
      "Bio": "Ben L. Titzer is a Senior Software Engineer at Google who specializes in VM and compiler implementation. He is currently the tech lead of the V8 JavaScript VM compiler team in Munich, a member of the ACM, and a sometime PL researcher with his Virgil programming language project. In former times he was a researcher at Sun Microsystems Laboratories on the Maxine Virtual Machine project and has prior experience with a number of Java VMs including HotSpot, J9, and OVM. He received a PhD in Computer Science in 2007 from UCLA under Jens Palsberg and Masters in 2004, after having received his BS from Purdue University in 2002.",
      "Key": "bentitzer",
      "Name": "Ben Titzer",
      "URL": "http://research.google.com/pubs/BenTitzer.html",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/bentitzer/8db45a98-2301-4302-85b3-ccc16d358d8f/small.jpg"
    },
    {
      "Affiliation": "Saarland University",
      "Key": "christianhammer",
      "Name": "Christian Hammer",
      "URL": "https://csl.cs.uni-saarland.de/people/hammer/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/christianhammer/8e2cf4dc-0c38-4b01-9ec5-5cae7c4e7f16/small.jpg"
    },
    {
      "Affiliation": "Worcester Polytechnic Institute",
      "Bio": "I am an Associate Professor in Computer Science at Worcester Polytechnic Institute (WPI), MA, USA. I am also Director of the Cybersecurity Program and an Adjunct Research Faculty in the Department of Computer Science at Brown University.\nResearch Interests: I\u2019m interested in various facets of how people learn and use formal systems. Over the years, I\u2019ve increasingly emphasized the human and learning components. Currently, my main projects are Bootstrap: teaching kids to program videogames as a way to reinforce algebra, developing effective error-messages for novice programmers in WeScheme and DrRacket, and how people learn programming through Pyret (a new programming language) and CaptainTeach (a new programming environment with built-in peer-reviewing and support for teaching test-early development).",
      "Key": "kathifisler",
      "Name": "Kathi Fisler",
      "URL": "http://web.cs.wpi.edu/~kfisler/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/kathifisler/8e2e98e2-9b14-4e92-a983-b2c241acd7bb/small.jpg"
    },
    {
      "Affiliation": "Sharethrough",
      "Bio": "Kelley is Scala developer, most recently working with data and infrastructure at Sharethrough in San Francisco. In her spare time, she enjoys testing new recipes and trying to keep her plants alive.",
      "Key": "kelleyrobinson",
      "Name": "Kelley Robinson",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/kelleyrobinson/8e538113-38b3-43d8-b267-f828c4ac6208/small.jpg"
    },
    {
      "Affiliation": "Kyushu University",
      "Key": "kenjihisazumi",
      "Name": "Kenji Hisazumi"
    },
    {
      "Affiliation": "University of Chicago",
      "Bio": "I am an Assistant Professor at the University of Chicago. I am interested in programming language, compiler, and program analysis technology. My recent work has focused on type systems for dynamic languages. For more information about my work, check out my research page for publications and talks.",
      "Key": "ravichugh",
      "Name": "Ravi Chugh",
      "URL": "http://people.cs.uchicago.edu/~rchugh",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ravichugh/8eac4843-1621-4b86-a8d6-a71ca2918d87/small.jpg"
    },
    {
      "Affiliation": "University of Twente",
      "Key": "mariekehuisman",
      "Name": "Marieke Huisman",
      "URL": "http://wwwhome.ewi.utwente.nl/~marieke/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/mariekehuisman/8f62ed06-9de8-4357-8f86-2c82e3355100/small.jpg"
    },
    {
      "Affiliation": "Technical University of Vienna",
      "Key": "radugrosu",
      "Name": "Radu Grosu",
      "URL": "https://ti.tuwien.ac.at/cps/people/grosu",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/radugrosu/8f8404d1-3f63-4be8-a2e5-621e4b6becf2/small.jpg"
    },
    {
      "Affiliation": "",
      "Bio": "I\u2019m a freelancing software engineer working in Alan Kay\u2019s group since 2006. My work ranges from virtual machine technology to end-user authoring systems. Being a long-time Smalltalk developer I dig dynamic languages and live programming environments.\nPreviously I worked at impara, building a 3D authoring system for children in Squeak. In my PhD research before that I created a real-time non-photorealistic 3D renderer (featured in the OpenGL Shading Language book).",
      "Key": "bertfreudenberg",
      "Name": "Bert Freudenberg",
      "URL": "http://freudenbergs.de/bert/publications/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/bertfreudenberg/4966a75d-6598-419e-9f67-e4f6f176a8e6/small.jpg"
    },
    {
      "Affiliation": "HKUST",
      "Key": "charleszhang",
      "Name": "Charles Zhang",
      "URL": "http://www.cse.ust.hk/~charlesz/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/charleszhang/9022039a-ab4e-4d0d-abe0-e8ff5ddb8b13/small.jpg"
    },
    {
      "Affiliation": "Università della Svizzera italiana",
      "Key": "andrearosa",
      "Name": "Andrea Rosà",
      "URL": "http://www.inf.usi.ch/phd/rosaa",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/andrearosa/56bfbe88-343d-473c-b65b-a085469b0cae/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Key": "benjaminlerner",
      "Name": "Benjamin Lerner",
      "URL": "http://www.ccs.neu.edu/home/blerner",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/benjaminlerner/91181185-b05b-4e42-bc54-72909b447e59/small.jpg"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Key": "theodhondt",
      "Name": "Theo D'Hondt"
    },
    {
      "Affiliation": "CWI, Fredhopper",
      "Key": "stijndegouw",
      "Name": "Stijn De Gouw",
      "URL": "https://www.cwi.nl/people/2306",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/stijndegouw/9144fdc7-1a71-4e47-a090-57461bde8ac4/small.jpg"
    },
    {
      "Affiliation": "IRISA / University of Rennes 1",
      "Key": "delphinedemange",
      "Name": "Delphine Demange",
      "URL": "http://www.irisa.fr/celtique/demange/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/delphinedemange/92379d90-4c9c-475b-a055-ada9476504a3/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "seifharidi",
      "Name": "Seif Haridi"
    },
    {
      "Affiliation": "University of Vermont",
      "Key": "christianskalka",
      "Name": "Christian Skalka",
      "URL": "http://www.cs.uvm.edu/~ceskalka/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/christianskalka/9602f104-7cd5-4ff4-b03e-d38accc4db1f/small.jpg"
    },
    {
      "Affiliation": "Swarthmore College",
      "Key": "joepolitz",
      "Name": "Joe Gibbs Politz",
      "URL": "jpolitz.github.io",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/joepolitz/967db6bf-6243-4f20-823e-4af3644ab932/small.jpg"
    },
    {
      "Affiliation": "Indiana University",
      "Key": "deyaaeldeenalmahallawi",
      "Name": "Deyaaeldeen Almahallawi"
    },
    {
      "Affiliation": "National Institute of Advanced Industrial Science and Technology, Japan",
      "Key": "masatakagoto",
      "Name": "Masataka Goto"
    },
    {
      "Affiliation": "Hasso-Plattner-Institute, Potsdam",
      "Key": "stefanlehmann",
      "Name": "Stefan Lehmann",
      "URL": "https://github.com/onsetsu",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/stefanlehmann/4480f337-54ee-48a7-a77b-6dda269a2536/small.jpg"
    },
    {
      "Affiliation": "Peking University",
      "Key": "jiajunjiang",
      "Name": "Jiajun Jiang",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jiajunjiang/7ff2cfc7-97cb-4102-b174-1bd2cd07574c/small.jpg"
    },
    {
      "Affiliation": "Instituto Superior Técnico, University of Lisboa & INESC-ID",
      "Key": "rodrigorodrigues",
      "Name": "Rodrigo Rodrigues",
      "URL": "http://www.gsd.inesc-id.pt/~rodrigo/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/rodrigorodrigues/98b254c0-9644-4499-bb80-ee061bc419ca/small.jpg"
    },
    {
      "Affiliation": "Chalmers University of Technology",
      "Key": "wolfgangahrendt",
      "Name": "Wolfgang Ahrendt",
      "URL": "http://www.cse.chalmers.se/~ahrendt/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/wolfgangahrendt/98efc91c-a30a-4c98-b887-afa617695be1/small.jpg"
    },
    {
      "Affiliation": "University of Duisburg-Essen",
      "Key": "stefanhanenberg",
      "Name": "Stefan Hanenberg",
      "URL": "http://www.dawis.wiwi.uni-due.de/en/team/stefan-hanenberg/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/stefanhanenberg/991a8d4f-6461-42a1-b496-cce06e38d61a/small.jpg"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Bio": "I am a Postdoctoral Researcher (working with Lieven Eeckhout) in the Department of Electronics and Information Systems at Ghent University, Belgium.\nResearch Interests: Managed languages; memory efficiency; memory abstraction; memory management; dynamic optimization; software-hardware co-design \nThe programming language and underlying hardware determine application performance, and both are undergoing revolutionary shifts. As applications have become more sophisticated and capable, programmers have chosen managed languages in many domains for ease of development. These languages abstract memory management from the programmer, which can introduce time and space overhead but also provide opportunities for dynamic optimization. Optimizing memory performance is in part paramount because hardware is reaching physical limits. Recent trends towards chip multiprocessor machines exacerbate the memory system bottleneck because they are adding cores without adding commensurate bandwidth. Both language and architecture trends add stress to the memory system and degrade application performance. \nI exploit the language abstraction to analyze and optimize memory efficiency on emerging hardware. In my dissertation, I studied the sources of memory inefficiencies on two levels: heap data and hardware storage traffic. Finding that arrays are a dominant source of heap inefficiency, I designed and implemented z-rays, a flexible, time and space efficient layout of arrays. When analyzing traffic to main memory, I found a large majority of the traffic is useless. I designed a software-hardware cooperative optimization that invalidates data in cache based on passed-down program semantics in order to eliminate useless traffic. These techniques improve memory system efficiency and performance. We show that the memory abstraction in managed languages is not just a cost to be borne, but an opportunity to improve space and time efficiency and overcome the memory wall. We enhance the productivity and performance of ubiquitous managed languages on current and future architectures. \nIn broader terms, I am interested in studying more efficient ways for the application, compiler and runtime system, operating system, and underlying architecture to cooperate for optimal system performance. In particular, each layer of this stack has its own method of memory management that can be limited by its narrow view: there should be more coordination to inform dynamic optimization and overcome the high overheads of memory system performance.",
      "Key": "jennifersartor",
      "Name": "Jennifer Sartor",
      "URL": "http://users.elis.ugent.be/~jsartor/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jennifersartor/9931617d-e820-486b-affd-407360d77cc0/small.jpg"
    },
    {
      "Affiliation": "Twitter",
      "Bio": "Caitie McCaffrey is a Backend Brat and Distributed Systems Diva at Twitter. Prior to that she spent the majority of her career building large scale services and systems that power the entertainment industry at 343 Industries, Microsoft Game Studios, and HBO. Caitie has a degree in Computer Science from Cornell University, and has worked on several video games including Gears of War 2, Gears of War 3, Halo 4, and Halo 5 She maintains a blog at CaitieM.com and frequently discusses technology on Twitter @Caitie",
      "Key": "caitiemccaffrey",
      "Name": "Caitie McCaffrey",
      "URL": "http://caitiem.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/caitiemccaffrey/99838d91-b74e-470b-9f82-0b0c358c430a/small.jpg"
    },
    {
      "Affiliation": "Iowa State University, USA",
      "Bio": "Hridesh Rajan is an associate professor of computer science at Iowa State University, where he works at the intersection of software engineering and programming languages. He leads two research projects: Panini, whose goals are to enable modular reasoning about concurrent programs, and Boa that was established in Summer 2012 as an end-to-end infrastructure for analyzing large-scale software repositories.",
      "Key": "hrideshrajan",
      "Name": "Hridesh Rajan",
      "URL": "http://www.cs.iastate.edu/~hridesh",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/hrideshrajan/9a93e458-ccb0-4fdc-8904-ad02d493b221/small.jpg"
    },
    {
      "Affiliation": "University of Waterloo",
      "Key": "jonathaneyolfson",
      "Name": "Jonathan Eyolfson",
      "URL": "https://eyl.io/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jonathaneyolfson/9aed800d-9a09-4939-bf54-62205e458bd8/small.jpg"
    },
    {
      "Affiliation": "Tohoku University and Hitachi Solutions East Japan, Ltd.",
      "Key": "daisukekikuchi",
      "Name": "Daisuke Kikuchi",
      "URL": "http://www.kb.ecei.tohoku.ac.jp/~kikuchi/"
    },
    {
      "Affiliation": "University of East Anglia",
      "Key": "adamziolkowski",
      "Name": "Adam Ziolkowski"
    },
    {
      "Affiliation": "Oregon State University",
      "Key": "ericwalkingshaw",
      "Name": "Eric Walkingshaw",
      "URL": "http://web.engr.oregonstate.edu/~walkiner/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ericwalkingshaw/9d21e6d5-d09c-457f-be22-cbc041f94b1e/small.jpg"
    },
    {
      "Affiliation": "UNSW Australia",
      "Key": "yueli",
      "Name": "Yue Li",
      "URL": "http://www.cse.unsw.edu.au/~yueli/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/yueli/9deb7139-2e62-4b48-a44d-4aac87fbecf8/small.jpg"
    },
    {
      "Affiliation": "University of Oslo",
      "Key": "magnushaugomchristensen",
      "Name": "Magnus Haugom Christensen"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Key": "janwillemswalens",
      "Name": "Janwillem Swalens"
    },
    {
      "Affiliation": "",
      "Key": "gerhardhabiger",
      "Name": "Gerhard Habiger"
    },
    {
      "Affiliation": "Federal University of Campina Grande",
      "Key": "alyssonmilanez",
      "Name": "Alysson Milanez",
      "URL": "https://sites.google.com/site/alyssonfilgueira/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/alyssonmilanez/9eb37eb9-f233-4701-a248-5a225e266988/small.jpg"
    },
    {
      "Affiliation": "Delft University of Technology",
      "Bio": "Eelco Visser is Antoni van Leeuwenhoek Professor of Computer Science at Delft University of Technology. He received a master\u2019s and doctorate in computer science from the University of Amsterdam in 1993 and 1997, respectively. Previously he served as postdoc at the Oregon Graduate Institute, as Assistant Professor at Utrecht University, and as Associate Professor at TU Delft.\nHis research interests include programming languages, software language engineering, domain-specific programming languages, program transformation, software security, and interaction design. With his students he has designed and implemented the Spoofax language workbench, as well as many domain-specific languages, including DSLs for syntax definition (SDF), program transformation (Stratego), software deployment (Nix), web application development (WebDSL), and mobile phone applications (mobl). He is the lead developer of the researchr bibliography management system and the WebLab learning management system.",
      "Key": "eelcovisser",
      "Name": "Eelco Visser",
      "URL": "http://eelcovisser.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/eelcovisser/9f5c00bc-90ba-4aba-b5bf-9fc9085cbe1f/small.jpg"
    },
    {
      "Affiliation": "Oregon State University",
      "Bio": "In 2007 I got a PhD from the CS department at UIUC. After a postdoct at MIT CSAIL, I moved back to my Alma Mater, where I was a Research Professor. Now I am an Assistant Professor at OSU, surrounded by the beautiful Pacific NW.",
      "Key": "dannydig",
      "Name": "Danny Dig",
      "URL": "http://dig.cs.illinois.edu",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/dannydig/a059867c-5be9-4498-b4a9-732356a20b7e/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "katsuhisamaruyama",
      "Name": "Katsuhisa Maruyama"
    },
    {
      "Affiliation": "",
      "Key": "lukechircop",
      "Name": "Luke Chircop"
    },
    {
      "Affiliation": "State University of New York (SUNY) Binghamton",
      "Bio": "I am an Associate Professor at State University of New York (SUNY) at Binghamton. I am interested in programming languages, software engineering, and systems, with current focuses on energy-aware programming languages, data-intensive software, and type systems. I received my Ph.D. in Computer Science from the Johns Hopkins University, in 2007.",
      "Key": "yudavidliu",
      "Name": "Yu David Liu",
      "URL": "http://www.cs.binghamton.edu/~davidl/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/yudavidliu/a2f46ebb-0c1a-4aae-8f99-173b696b24e2/small.jpg"
    },
    {
      "Affiliation": "King's College London",
      "Key": "lukasdiekmann",
      "Name": "Lukas Diekmann",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/lukasdiekmann/a32795ba-90b8-421c-9491-6b5f71e3a6bf/small.jpg"
    },
    {
      "Affiliation": "School of Mathematics, Cardiff University",
      "Key": "vincentknight",
      "Name": "Vincent Knight"
    },
    {
      "Affiliation": "University of Lübeck",
      "Key": "martinleucker",
      "Name": "Martin Leucker",
      "URL": "https://www.isp.uni-luebeck.de/leucker",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/martinleucker/a3679181-6daf-4256-b932-1d8235d4c0ba/small.jpg"
    },
    {
      "Affiliation": "Cognitec",
      "Key": "davidnolen",
      "Name": "David Nolen",
      "URL": "http://swannodette.github.io/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/davidnolen/a3c5b350-604c-4148-aab5-124f3fda6ddd/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "rohanachar",
      "Name": "Rohan Achar"
    },
    {
      "Affiliation": "Columbia University",
      "Key": "fanghsiangsu",
      "Name": "Fang-Hsiang Su",
      "URL": "https://www.linkedin.com/in/fanghsiangsu",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/fanghsiangsu/a56c84fa-482f-4626-90f7-7400c4cd64f7/small.jpg"
    },
    {
      "Affiliation": "EPITA / LRDE",
      "Bio": "Dr. Didier Verna has a Ph.D. in Computer Science and is currently working as an assistant professor for EPITA, a private Computer Science university located in Paris. He gives lectures on Operating Systems, Computer Graphics, Functional Programming and Typesetting. His main research topic is on the use of Lisp, a multi-paradigm dynamic language, to reconcile genericity and performance.\nDidier Verna is also quite involved in free software: he has been one of the core maintainers of XEmacs for more than 15 years. He is also a committer to Gnus and BBDB, the author of several LaTeX packages and an occasional contributor to other Free Software projects (the GNU Autotools most notably; he was one of the technical reviewers for the \u201cGoat Book\u201d).\nDidier Verna is a member of the European Lisp Symposium steering committee and serves as a program committee member in various conferences (International Lisp Conference, European Lisp Symposium, Dynamic Languages Symposium, Context-Oriented Programming workshop, ACM Symposium on Applied Computing).\nAll of this is in fact half-true: two days a week, Didier Verna drops his scientific hat and wears the Jazz musician one instead. But that is another story\u2026",
      "Key": "didierverna",
      "Name": "Didier Verna",
      "URL": "http://www.lrde.epita.fr/~didier/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/didierverna/854d6aef-85b1-4d6e-a0e3-fa0dc86e3927/small.jpg"
    },
    {
      "Affiliation": "Heinz Nixdorf Institut, Paderborn University and Fraunhofer IEM",
      "Key": "ericbodden",
      "Name": "Eric Bodden",
      "URL": "http://www.bodden.de/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ericbodden/a593f263-fe1e-4e20-b421-d874e9193993/small.jpg"
    },
    {
      "Affiliation": "Harvard University",
      "Key": "christosdimoulas",
      "Name": "Christos Dimoulas",
      "URL": "http://people.seas.harvard.edu/~chrdimo/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/christosdimoulas/a68254d9-57e0-48d5-845e-cbfd07b1bcd8/small.jpg"
    },
    {
      "Affiliation": "University of British Columbia",
      "Key": "ronaldgarcia",
      "Name": "Ronald Garcia",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ronaldgarcia/a78cec81-3a0b-46ca-857e-7dfdd67507c1/small.jpg"
    },
    {
      "Affiliation": "Dream Songs, Inc. & IBM Research",
      "Bio": "I used to be Dick Gabriel. Those days are long gone. Now I\u2019m just Dick Gabriel.",
      "Key": "richardpgabriel",
      "Name": "Richard P. Gabriel",
      "URL": "http://dreamsongs.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/richardpgabriel/a7d83d42-2888-4b9b-a480-ac1783b233ad/small.jpg"
    },
    {
      "Affiliation": "Charles University",
      "Bio": "Lubom&iacute;r is an assistant professor at the Department of Distributed and Dependable Systems, Charles University, Prague, Czech Republic. His primary research interests include performance-related topics focusing on performance evaluation, testing, and monitoring. In addition to performance, his research interests include also dynamic program analysis, with specific focus on making the programs running on the Java (and Dalvik) Virtual Machines more observable. He holds an MSc. from the Czech Technical University in Prague, and a PhD from the Charles University in Prague. He is a member of the ACM.",
      "Key": "lubomirbulej",
      "Name": "Lubomír Bulej",
      "URL": "http://d3s.mff.cuni.cz/~bulej",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/lubomirbulej/e80975d6-6d6a-43a0-a88c-3c96101ef6c7/small.jpg"
    },
    {
      "Affiliation": "TU Darmstadt",
      "Key": "guidosalvaneschi",
      "Name": "Guido Salvaneschi",
      "URL": "http://www.guidosalvaneschi.com/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/guidosalvaneschi/a8c05031-5304-4984-8f51-1b1410979956/small.jpg"
    },
    {
      "Affiliation": "Carnegie Mellon University\t",
      "Bio": "I am a Researcher at Samsung Research America in Mountain View, California. Before that I was a Post Doctoral Fellow working with Andr&eacute; Platzer in the Logical Systems Lab at Carnegie Mellon University. I received my Ph.D. in Computer Science from Cornell University in 2013, where I was advised by Dexter Kozen. I also received a Master of Engineering in Computer Science from Cornell University in 2008, and a Dipl&ocirc;me d\u2019Ing&eacute;nieur from &Eacute;cole polytechnique in 2007.",
      "Key": "jeanbaptistejeannin",
      "Name": "Jean-Baptiste Jeannin",
      "URL": "http://www.cs.cmu.edu/~jeannin/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jeanbaptistejeannin/a95f84e4-d955-43d9-9927-37572a9da843/small.jpg"
    },
    {
      "Affiliation": "University of California, Irvine",
      "Bio": "I develop program analysis techniques and apply them to solve real-world problems in large-scale software systems. In the past, I designed and implemented static and dynamic techniques to find and fix \u201cruntime bloat\u201d that exists widely in object-oriented software; I am currently focusing on the efficiency/scalability problem in Big Data systems and investigating ways to efficiently test and debug these applications.",
      "Key": "guoqingharryxu",
      "Name": "Harry Xu",
      "URL": "http://www.ics.uci.edu/~guoqingx",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/guoqingharryxu/aab64730-b1ed-46bf-83f0-777ee6c7682f/small.jpg"
    },
    {
      "Affiliation": "Fraunhofer IEM",
      "Key": "lisanguyenquangdo",
      "Name": "Lisa Nguyen Quang Do",
      "URL": "https://de.linkedin.com/in/nguyenqdlisa/en",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/lisanguyenquangdo/ac17c0cc-4eb6-41f4-a45c-05593f05045f/small.jpg"
    },
    {
      "Affiliation": "Sapienza University of Rome, Italy",
      "Key": "emiliocoppa",
      "Name": "Emilio Coppa",
      "URL": "http://ecoppa.github.io/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/emiliocoppa/ac662473-2d0b-4ae4-9b37-324e65a4f883/small.jpg"
    },
    {
      "Affiliation": "University of California, Berkeley",
      "Bio": "Koushik Sen is an associate professor in the Department of Electrical Engineering and Computer Sciences at the University of California, Berkeley. His research interest lies in Software Engineering, Programming Languages, and Formal methods. He is interested in developing software tools and methodologies that improve programmer productivity and software quality. He is best known for his work on \u201cDART: Directed Automated Random Testing\u201d and concolic testing. He has received a NSF CAREER Award in 2008, a Haifa Verification Conference (HVC) Award in 2009, a IFIP TC2 Manfred Paul Award for Excellence in Software: Theory and Practice in 2010, a Sloan Foundation Fellowship in 2011, a Professor R. Narasimhan Lecture Award in 2014, and an Okawa Foundation Research Grant in 2015. He has won several ACM SIGSOFT Distinguished Paper Awards. He received the C.L. and Jane W-S. Liu Award in 2004, the C. W. Gear Outstanding Graduate Award in 2005, and the David J. Kuck Outstanding Ph.D. Thesis Award in 2007, and a Distinguished Alumni Educator Award in 2014 from the UIUC Department of Computer Science. He holds a B.Tech from Indian Institute of Technology, Kanpur, and M.S. and Ph.D. in CS from University of Illinois at Urbana-Champaign.",
      "Key": "koushiksen",
      "Name": "Koushik Sen",
      "URL": "http://srl.cs.berkeley.edu/~ksen/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/koushiksen/acb915fb-8e52-49dc-973e-eb9172c3d462/small.jpg"
    },
    {
      "Affiliation": "Peking University",
      "Key": "xiangyuluo",
      "Name": "Xiangyu Luo"
    },
    {
      "Affiliation": "University of Oxford",
      "Key": "hongseokyang",
      "Name": "Hongseok Yang",
      "URL": "http://www.cs.ox.ac.uk/people/hongseok.yang/Public/Home.html",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/hongseokyang/ad0e07da-19be-4d23-b1ab-709f768f9c74/small.jpg"
    },
    {
      "Affiliation": "Cornell University",
      "Bio": "Ross is an Assistant Professor at Cornell University. He has served as an advisor to the Ceylon design team at Red Hat and the Kotlin design team at JetBrains.",
      "Key": "rosstate",
      "Name": "Ross Tate",
      "URL": "http://www.cs.cornell.edu/~ross/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/rosstate/ad295f25-d112-4298-8931-afcb135c0e62/small.jpg"
    },
    {
      "Affiliation": "Facebook",
      "Bio": "Peter O\u2019Hearn works as an Engineering Manager at Facebook with the Static Analysis Tools team, and as a Professor of Computer Science at University College London. His research has been in the broad areas of programming languages and logic, ranging from new logics and mathematical models to industrial applications of program proof. With John Reynolds he developed separation logic, a theory which opened up new practical possibilities for program proof. In 2009 he cofounded a software verification startup company, Monoidics Ltd, which was acquired by Facebook in 2013. The Facebook Infer program analyzer, recently open-sourced, runs on every modification to the code of Facebook\u2019s mobile apps \u2014 including the main Facebook apps for Android and iOS, Facebook Messenger and Instagram \u2014 in a typical month issuing millions of calls to a custom separation logic theorem prover and resulting in hundreds of bugs being fixed before they reach production.",
      "Key": "peterohearn",
      "Name": "Peter O'Hearn",
      "URL": "http://www0.cs.ucl.ac.uk/staff/p.ohearn/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/peterohearn/ad32c6c0-6321-4602-8499-e7c11f23b143/small.jpg"
    },
    {
      "Affiliation": "Tohoku University",
      "Key": "tomohirosasaki",
      "Name": "Tomohiro Sasaki"
    },
    {
      "Affiliation": "TU Delft",
      "Bio": "http://twitter.com/seba0_  http://erdweg.org",
      "Key": "sebastianerdweg",
      "Name": "Sebastian Erdweg",
      "URL": "http://erdweg.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/sebastianerdweg/ad62cbaa-3b48-428b-88dc-a31f5c6f657b/small.jpg"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Key": "coenderoover",
      "Name": "Coen De Roover",
      "URL": "http://soft.vub.ac.be/~cderoove/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/coenderoover/ae26f1df-e3af-4960-979d-e862403f6f5c/small.jpg"
    },
    {
      "Affiliation": "Uppsala University",
      "Bio": "I am a PhD student working with capability type systems for concurrent and parallel object oriented programming. My advisor is Tobias Wrigstad",
      "Key": "eliascastegren",
      "Name": "Elias Castegren",
      "URL": "http://www.it.uu.se/katalog/elica697",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/eliascastegren/aecb1ac3-b069-40d5-b121-c19b63182708/small.jpg"
    },
    {
      "Affiliation": "Hasso Plattner Institute",
      "Key": "tonimattis",
      "Name": "Toni Mattis"
    },
    {
      "Affiliation": "Samsung Research America",
      "Bio": "I am a researcher at Samsung Research America in the area of programming languages and software engineering. I received my PhD from the University of California, Berkeley in 2007. My dissertation focused on refinement-based program analysis tools. Since then, I have done research on a variety of topics in static analysis, dynamic analysis, and software engineering. I worked at IBM Research from 2008\u20132013. A list of my publications is here; also see DBLP and my Google Scholar page.",
      "Key": "manusridharan",
      "Name": "Manu Sridharan",
      "URL": "http://manu.sridharan.net",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/manusridharan/afa0da7e-8685-4cce-a195-141adc9f2922/small.jpg"
    },
    {
      "Affiliation": "Tallinn University of Technology",
      "Key": "tarmouustalu",
      "Name": "Tarmo Uustalu",
      "URL": "http://www.ioc.ee/~tarmo/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tarmouustalu/b176d613-0ec7-4ddd-8879-cca5bf7b1bf8/small.jpg"
    },
    {
      "Affiliation": "Independent Consultant",
      "Key": "carllerche",
      "Name": "Carl Lerche",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/carllerche/b18e41db-f26c-46a5-b87c-fc47e3f42cd8/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "raimilcruz",
      "Name": "Raimil Cruz"
    },
    {
      "Affiliation": "Portland State University",
      "Key": "andrewtolmach",
      "Name": "Andrew Tolmach",
      "URL": "http://www.cs.pdx.edu/~apt",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/andrewtolmach/b38b75b5-46f8-42c2-adf0-780715d233c0/small.jpg"
    },
    {
      "Affiliation": "Fraunhofer SIT",
      "Key": "johannesspath",
      "Name": "Johannes Späth",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/johannesspath/d1badf6e-21bc-40b7-ad61-77db02919168/small.jpg"
    },
    {
      "Affiliation": "KAIST",
      "Key": "changheepark",
      "Name": "Changhee Park",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/changheepark/2d4e8184-c15c-4a91-a70b-12b33216962e/small.jpg"
    },
    {
      "Affiliation": "University of Genova",
      "Bio": "Davide Ancona (PhD in Computer Science, University of Pisa, 1998) is Associate Professor at the University of Genova. His main research interests include type systems, object-oriented programming, coinduction methods for programming languages, modules and components, software reuse and maintenance, multi-agent systems, and behavioral types. He is author of more than 70 publications. He is the secretary of the executive board of AITO, Association Internationale pour les Technologies Objets (since Jan 2013, previously Vice-President since Jan 2012), and member of the editorial board of the Central European Journal of Computer Science and of the ACM/SIGAPP Applied Computing Review (ACR). He has been guest editor of special issues of Science of Computer Programming and Journal of Object Technology. In 2009 he received, together with G. Lagorio, the best paper prize at ECOOP. He has participated to several national and European projects and has been PC member of several workshops and conferences: WOOD\u201904, Bytecode 2008, ESOP 2008, DLS 2009, 2010 and 2013, FOOL 2010, RP 2011 and 2012, ECOOP 2013 and 2014, POPL 2015 (External Reviewing Committee). He has been involved in the organization of several scientific events: organizing chair of ECOOP 2009, program co-chair of FTfJP06 and of OOPS special track at SAC from 2004 through 2015, co-chair of CILC 2015.",
      "Key": "davideancona",
      "Name": "Davide Ancona",
      "URL": "http://www.disi.unige.it/person/AnconaD/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/davideancona/b3d19c77-a788-469b-ab47-7c6f3134f87d/small.jpg"
    },
    {
      "Affiliation": "Viewpoints Research Institute",
      "Key": "yoshikiohshima",
      "Name": "Yoshiki Ohshima",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/yoshikiohshima/b4d02f21-3bc1-440c-a916-750dbc937eba/small.jpg"
    },
    {
      "Affiliation": "MIT",
      "Bio": "I work with the Computer Assisted Programming Group; our goal is to develop techniques and tools that exploit automated reasoning and large amounts of computing power to tackle challenging programming problems.",
      "Key": "armandosolarlezama",
      "Name": "Armando Solar-Lezama",
      "URL": "http://people.csail.mit.edu/asolar/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/armandosolarlezama/b510ecd1-cbc4-42ca-8607-908a63bb5c46/small.jpg"
    },
    {
      "Affiliation": "Mozilla Corporation",
      "Bio": "Felix Klock is a research engineer at Mozilla. He works on the development of Rust, a safe, concurrent, and practical systems language being used at Mozilla to prototype experimental browser architectures (namely Servo).\nPrior to working at Mozilla, Felix worked at Adobe Systems on Tamarin, the virtual machine for the ActionScript language. He also worked at Green Hills Software on compilers for static languages (C/C++/Fortran) targeting embedded systems.\nFelix is also one of the developers of Larceny, an implementation of the Scheme language that is a testbed for research on garbage collection and compiler optimizations. Felix holds a PhD in Computer Science from Northeastern University.",
      "Key": "felixklock",
      "Name": "Felix Klock",
      "URL": "https://mozillians.org/en-US/u/pnkfelix/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/felixklock/b53660dc-185b-4b20-9744-078edde866ad/small.jpg"
    },
    {
      "Affiliation": "Johannes Kepler University Linz",
      "Key": "matthiasgrimmer",
      "Name": "Matthias Grimmer",
      "URL": "http://ssw.jku.at/General/Staff/Grimmer/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/matthiasgrimmer/b55cbeb5-b0fd-40d9-92c1-d0e2526fd65f/small.jpg"
    },
    {
      "Affiliation": "NASA/Caltech Jet Propulsion Laboratory",
      "Key": "klaushavelund",
      "Name": "Klaus Havelund",
      "URL": "http://www.havelund.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/klaushavelund/b5cc7b19-e917-4100-8a1b-fd6ab05cf406/small.jpg"
    },
    {
      "Affiliation": "Oracle Labs, Australia",
      "Key": "alexanderjordan",
      "Name": "Alexander Jordan",
      "URL": "http://labs.oracle.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/alexanderjordan/0d109a3b-6f9b-4db2-a335-299486d1b8cf/small.jpg"
    },
    {
      "Affiliation": "University of Lugano",
      "Key": "walterbinder",
      "Name": "Walter Binder"
    },
    {
      "Affiliation": "IBM Thomas J. Watson Research Center",
      "Bio": "I have been a Research Staff Member at IBM\u2019s Thomas J. Watson Research Center since 2000. I work on a range of topics, including static program analysis, software testing and the semantic web. I have also worked on the Jikes Research Virtual Machine (Jikes RVM). My program analysis work has recently been focused on scripting languages like JavaScript and on security analysis of Web applications; our work has been included in IBM products, most notably Rational AppScan products, and I am one of the primary authors of the publicly-available Watson Libraries for Analysis (WALA) program analysis infrastructure. My testing work has been primarily focused on Web applications in the Apollo project, and on finding concurrency bugs using both dynamic execution and model checking. My semantic Web work has been on scalable inference with the SHER project; recently, I have focused on representing RDF data efficiently in an RDBMS. I was educated at the University of Wisconsin-Madison as an undergraduate, and at the University of Illinois at Urbana-Champaign as a graduate student where I worked with Professor Andrew Chien on programming systems for massively-parallel machines.",
      "Key": "juliandolby",
      "Name": "Julian Dolby",
      "URL": "http://researcher.watson.ibm.com/researcher/view.php?person=us-dolby",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/juliandolby/b788d386-6330-4ebf-baaa-6dac63bb1f17/small.jpg"
    },
    {
      "Affiliation": "University of Waterloo, Canada",
      "Key": "patricklam",
      "Name": "Patrick Lam",
      "URL": "http://patricklam.ca",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/patricklam/b7e6157b-2048-4606-b269-987a08722ba2/small.jpg"
    },
    {
      "Affiliation": "Tokai University",
      "Key": "harumiwatanabe",
      "Name": "Harumi Watanabe",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/harumiwatanabe/b8c7871d-da7e-4fc2-a48f-3805a64b5730/small.jpg"
    },
    {
      "Affiliation": "Plataformatec",
      "Key": "josevalim",
      "Name": "José Valim",
      "URL": "http://plataformatec.com.br",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/josevalim/b9695cd6-a44f-4201-a0b1-4df6f85ef083/small.jpg"
    },
    {
      "Affiliation": "Ohio State University",
      "Key": "atanasrountev",
      "Name": "Atanas Rountev",
      "URL": "http://www.cse.ohio-state.edu/~rountev",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/atanasrountev/ba690686-d7e2-46d1-ac18-e31fc9f0e6bb/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "dimitarasenov",
      "Name": "Dimitar Asenov"
    },
    {
      "Affiliation": "",
      "Key": "markmicallef",
      "Name": "Mark Micallef"
    },
    {
      "Affiliation": "University of Sydney, Australia",
      "Key": "bernhardscholz1",
      "Name": "Bernhard Scholz",
      "URL": "http://sydney.edu.au/engineering/people/bernhard.scholz.php",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/bernhardscholz1/2ad1b16f-f423-4db2-bfce-56e86799d860/small.jpg"
    },
    {
      "Affiliation": "ReactorLabs",
      "Key": "petrmaj",
      "Name": "Petr Maj",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/petrmaj/bb0cb796-8ea6-4a03-bbf7-cd6124195e48/small.jpg"
    },
    {
      "Affiliation": "Carnegie Mellon University",
      "Key": "daryakurilova",
      "Name": "Darya Kurilova",
      "URL": "http://www.cs.cmu.edu/~dkurilov/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/daryakurilova/dd1aba2a-1ed3-43a6-ae6e-b9905a5a8bc2/small.jpg"
    },
    {
      "Affiliation": "University of Turin",
      "Bio": "Ferruccio Damiani is an Associate Professor at the University of Turin.",
      "Key": "ferrucciodamiani",
      "Name": "Ferruccio Damiani",
      "URL": "http://www.di.unito.it/~damiani/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/ferrucciodamiani/bbb7270c-1f1a-40e8-99dd-fda4e1f69bc4/small.jpg"
    },
    {
      "Affiliation": "Sapienza University of Rome, Italy",
      "Key": "irenefinocchi",
      "Name": "Irene Finocchi",
      "URL": "http://wwwusers.di.uniroma1.it/~finocchi/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/irenefinocchi/bbbf2db6-7bae-4fce-8215-717a185d141e/small.jpg"
    },
    {
      "Affiliation": "Oracle Labs, Australia",
      "Bio": "Cristina is the Director of Oracle Labs Australia and an Architect at Oracle. Headquartered in Brisbane, the focus of the Lab is Program Analysis as it applies to finding vulnerabilities in software and enhancing the productivity of developers worldwide. \nPrior to founding Oracle Labs Australia, Cristina was the Principal Investigator of the Parfait bug tracking project at Sun Microsystems, then Oracle. Today, Oracle Parfait has become the defacto tool used by thousands of Oracle developers for bug and vulnerability detection in real-world, commercially sized C/C++/Java applications. The success of the Parfait tool is founded on the pioneering work in advancing static program analysis techniques carried out by Cristina\u2019s team of Researchers and Engineers at Oracle Labs Australia.\nCristina\u2019s passion for tackling the big issues in the field of Program Analysis began with her doctoral work in binary decompilation at Queensland\u2019s University of Technology. In an interview with Richard Morris for Geek of the Week, Cristina talks about Parfait, Walkabout and her career journey in this field. \nPrior to her work at Oracle and Sun Microsystems, Cristina held teaching posts at major Australian Universities, co-edited Going Digital, a landmark book on cybersecurity, and served on the executive committees of ACM SIGPLAN and IEEE Reverse Engineering. \nCristina continues to play an active role in the international programming language, compiler construction and software security communities. On the weekends, she channels her interests into mentoring young programmers through the CoderDojo network.",
      "Key": "cristinacifuentes",
      "Name": "Cristina Cifuentes",
      "URL": "http://labs.oracle.com/people/cristina",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/cristinacifuentes/bbfed49d-5ed9-4045-ae58-939073a07e0d/small.jpg"
    },
    {
      "Affiliation": "Mozilla Research",
      "Bio": "I\u2019m a founder of and Director of Strategy at Mozilla Research, where we are working to expand the foundations of the Open Web. I participate in a number of Web platform projects, including:\n\u2022task.js \u2022sweet.js \u2022asm.js \u2022Rust \u2022Servo \u2022Shumway\nI also participate in open standards, in particular as a representative on TC39, the committee that standardizes JavaScript.",
      "Key": "daveherman",
      "Name": "Dave Herman",
      "URL": "http://calculist.org/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/daveherman/bcba556b-bc97-4230-9b6d-71f773afe9d3/small.jpg"
    },
    {
      "Affiliation": "Ecole Polytechnique Federale de Lausanne",
      "Bio": "I am a Research Scientist at EPFL, and the Executive Director of the Scala Center, working on the Scala programming language. In October 2015, I earned my PhD under the supervision of Professor Martin Odersky the Programming Methods Laboratory (LAMP for short) at EPFL. Before moving to Switzerland, I was born in and lived all over the US.\nI\u2019m interested in programming language and compiler support for distributed programming. In particular, I\u2019m interested in using type systems to facilitate the design of new, functional distributed systems.",
      "Key": "heathermiller",
      "Name": "Heather Miller",
      "URL": "http://heather.miller.am/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/heathermiller/bcbc4db2-52f8-4135-b4ab-5bf33879d8dd/small.jpg"
    },
    {
      "Affiliation": "University of Kent",
      "Bio": "I am Professor of Computer Systems in the School of Computing at the University of Kent. I was made a Distinguished Scientist of the ACM in 2006, and an Honorary Fellow of the University of Glasgow in July 2005, the only computer scientist to have received this accolade. I received IBM Faculty Awards in 2003, 2004 and 2005. I was elected to AITO, Association Internationale pour les Technologies Objets, in 2014. I am the Sciences Faculty Director of Research and Enterprise, and a member of the Programming Languages and Systems Research Group. I was the Programme Chair for the European Conference on Object Oriented Programming (ECOOP) 2014 in Uppsala, Sweden.",
      "Key": "richardjones",
      "Name": "Richard Jones",
      "URL": "http://www.cs.kent.ac.uk/~rej",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/richardjones/bd211c51-4276-400e-9c27-15bfc67dcbcf/small.jpg"
    },
    {
      "Affiliation": "Imperial College London",
      "Key": "sophiadrossopoulou",
      "Name": "Sophia Drossopoulou",
      "URL": "https://wp.doc.ic.ac.uk/sd/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/sophiadrossopoulou/bd48088b-edc7-4e3d-8aaf-3b8df6c65521/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "manusridharan1",
      "Name": "Manu Sridharan"
    },
    {
      "Affiliation": "Brown University",
      "Bio": "I am a Professor of Computer Science at Brown University, Providence, RI, USA. You can learn more about me from my Web site.",
      "Key": "shriramkrishnamurthi",
      "Name": "Shriram Krishnamurthi",
      "URL": "http://cs.brown.edu/~sk/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/shriramkrishnamurthi/bd5925e0-a495-4a41-b84e-906b6e236341/small.jpg"
    },
    {
      "Affiliation": "Hasso Plattner Institute",
      "Bio": "I am a PhD student at the Hasso Plattner Institute at the University of Potsdam. I am part of the Software Architecture group led by Prof. Dr. Robert Hirschfeld. Since October 2011, I have also been part of the HPI Research School after getting my Master\u2019s degree in Software Engineering at the HPI, too.\nMy research activities include the area of building tools for programmers, especially data-driven ones for program comprehension tasks. For this, direct manipulation concepts, dynamic analysis, and cooperation of distributed teams in agile processes play an important role. Additionally, I investigate modularity concepts with respect to critical software quality metrics such as extensibility and maintainability while reasoning about interdependencies between languages and tools.",
      "Key": "marceltaeumel",
      "Name": "Marcel Taeumel",
      "URL": "http://www.taeumel.eu",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/marceltaeumel/bdbfebc7-43ee-4f07-9ecd-3fe55e17e763/small.jpg"
    },
    {
      "Affiliation": "Harvard University",
      "Bio": "Stephen Chong is an Associate Professor of Computer Science in the Harvard School of Engineering and Applied Sciences. Steve\u2019s research focuses on programming languages, information security, and the intersection of these two areas. He is the recipient of an NSF CAREER award, an AFOSR Young Investigator award, and a Sloan Research Fellowship. He received a PhD from Cornell University, and a bachelor\u2019s degree from Victoria University of Wellington, New Zealand.",
      "Key": "stephenchong",
      "Name": "Stephen Chong",
      "URL": "http://people.seas.harvard.edu/~chong/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/stephenchong/be5c5d33-d05f-44ee-8b42-716c6a7b1b1e/small.jpg"
    },
    {
      "Affiliation": "Delft University of Technology",
      "Key": "dannymgroenewegen",
      "Name": "Danny M. Groenewegen"
    },
    {
      "Affiliation": "Tohoku University",
      "Key": "katsuhiroueno",
      "Name": "Katsuhiro Ueno",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/katsuhiroueno/c0541351-f7c7-40ab-988a-8ee597a95381/small.jpg"
    },
    {
      "Affiliation": "IMDEA Software Institute",
      "Bio": "I am a tenure-track Assistant Research Professor at the IMDEA Software Institute. Before joining IMDEA, I was a postdoctoral fellow at the University of Cambridge, where I also got my Ph.D. My research interests are in software verfication, particularly, in developing reasoning techniques and automated verification tools for real-world concurrent systems software.",
      "Key": "alexeygotsman",
      "Name": "Alexey Gotsman",
      "URL": "http://software.imdea.org/~gotsman/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/alexeygotsman/c08504d7-ace4-4400-b0df-aa98196a030e/small.jpg"
    },
    {
      "Affiliation": "Australian National University, Data61, and Purdue University",
      "Bio": "I am a professor of computer science, with academic appointments at Purdue University (on leave from August 2015) and the Australian National University, contributing also as a researcher with Data61 (formerly NICTA). I studied computer science at the University of Adelaide, the University of Waikato, and the University of Massachusetts at Ahmerst, receiving BSc, MSc, and PhD degrees, respectively. My research interests lie in the area of programming language implementation, and I work on problems arising in object persistence, object databases, distribution, memory management (garbage collection), managed language runtimes, language virtual machines, optimizing compilers, and architectural support for programming languages and applications.\nI am a Life Member of the Association for Computing Machinery and a Member of the IEEE. I was named a Distinguished Scientist of the ACM in 2012.",
      "Key": "tonyhosking",
      "Name": "Tony Hosking",
      "URL": "https://hosking.github.io",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tonyhosking/c1bc7cbb-840c-42db-9f5f-da02b7e17044/small.jpg"
    },
    {
      "Affiliation": "The University of Sydney",
      "Key": "nicholashollingum",
      "Name": "Nicholas Hollingum"
    },
    {
      "Affiliation": "IBM Research Lab Zurich",
      "Key": "lydiaychen",
      "Name": "Lydia Y. Chen"
    },
    {
      "Affiliation": "Institute of Software Engineering and Compiler Construction",
      "Key": "alexanderbreckel",
      "Name": "Alexander Breckel"
    },
    {
      "Affiliation": "Johannes Kepler University, Linz, Austria",
      "Key": "manuelrigger",
      "Name": "Manuel Rigger",
      "URL": "http://ssw.jku.at/General/Staff/ManuelRigger/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/manuelrigger/47e268e9-158c-471f-a7e9-442216c54550/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "francescodagnino",
      "Name": "Francesco Dagnino"
    },
    {
      "Affiliation": "HPI, Germany",
      "Key": "tobiaspape",
      "Name": "Tobias Pape",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tobiaspape/05e8b3b4-2c7d-4349-af8a-15fa517a0036/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "adrianfrancalanza",
      "Name": "Adrian Francalanza"
    },
    {
      "Affiliation": "Microsoft Research",
      "Key": "benjaminlivshits",
      "Name": "Ben Livshits",
      "URL": "http://research.microsoft.com/en-us/um/people/livshits/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/benjaminlivshits/c88a8c0c-80df-4455-b438-b8373ef4d677/small.jpg"
    },
    {
      "Affiliation": "Eötvös Loránd University, Faculty of Informatics, Department of Programming Languages and Compilers",
      "Key": "gaborhorvath",
      "Name": "Gábor Horváth"
    },
    {
      "Affiliation": "Ritsumeikan University",
      "Key": "tetsuokamina",
      "Name": "Tetsuo Kamina",
      "URL": "http://www.fse.cs.ritsumei.ac.jp/~kamina/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tetsuokamina/c9984fbd-a38c-4f82-913d-2b9dd0c4b6e4/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "irisgaber",
      "Name": "Iris Gaber"
    },
    {
      "Affiliation": "Central Florida University",
      "Bio": "The long term goal of my research is to better understand how to solve programming problems: how to specify such problems, methods for thinking about such problems, notations for expressing solutions, and ways to check that the solutions are correct. In pursuing this goal, I have worked in two main areas: formal methods and programming languages. formal methods and programming languages.",
      "Key": "garyleavens",
      "Name": "Gary Leavens",
      "URL": "http://www.eecs.ucf.edu/~leavens",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/garyleavens/dfa2c000-4f7d-43b5-9d2b-38e6edd6002c/small.jpg"
    },
    {
      "Affiliation": "Stevens Institute of Technology",
      "Key": "davidnaumann",
      "Name": "David Naumann",
      "URL": "http://www.cs.stevens.edu/~naumann/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/davidnaumann/ca2793b4-7527-4cc2-a800-a6ee259e0a21/small.jpg"
    },
    {
      "Affiliation": "Semmle",
      "Bio": "I am a research engineer at Semmle Ltd. in Oxford. Previously, I was an assistant professor at the School of Computer Engineering of Nanyang Technological University in Singapore; a post-doctoral researcher at IBM T.J. Watson Research Center in New York; and a PhD student at the Department of Computer Science of Oxford University.",
      "Key": "maxschaefer",
      "Name": "Max Schaefer",
      "URL": "http://xiemaisi.github.io",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/maxschaefer/ca389fb8-7947-4c7b-ac76-e3f1f072ceaf/small.jpg"
    },
    {
      "Affiliation": "University of Texas at Austin",
      "Key": "sarfrazkhurshid",
      "Name": "Sarfraz Khurshid",
      "URL": "http://users.ece.utexas.edu/~khurshid/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/sarfrazkhurshid/ca9725f7-3646-4040-8508-05c57ca6b6aa/small.jpg"
    },
    {
      "Affiliation": "Peking University",
      "Key": "yingfeixiong",
      "Name": "Yingfei Xiong",
      "URL": "http://sei.pku.edu.cn/~xiongyf04/"
    },
    {
      "Affiliation": "FCT / Universidade Nova de Lisboa",
      "Key": "luiscaires",
      "Name": "Luís Caires",
      "URL": "http://ctp.di.fct.unl.pt/~lcaires/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/luiscaires/cc41dbba-b74e-41ee-90b1-d1e615408faf/small.jpg"
    },
    {
      "Affiliation": "University of Maryland, College Park",
      "Key": "phucnguyen",
      "Name": "Phúc Nguyễn",
      "URL": "http://cs.umd.edu/~pcn/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/phucnguyen/cceb356c-8624-47ba-ad80-7e8865cebb40/small.jpg"
    },
    {
      "Affiliation": "University of Chile",
      "Key": "jurajkubelka",
      "Name": "Juraj Kubelka"
    },
    {
      "Affiliation": "TU Darmstadt",
      "Key": "michaelpradel",
      "Name": "Michael Pradel",
      "URL": "http://mp.binaervarianz.de/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michaelpradel/cf700381-2364-48b1-b6e5-1faeffb82639/small.jpg"
    },
    {
      "Affiliation": "Università della Svizzera italiana",
      "Key": "robertsoule",
      "Name": "Robert Soulé",
      "URL": "http://www.inf.usi.ch/faculty/soule/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/robertsoule/cfff8e97-147b-46c3-9ddd-85bd864c8cfc/small.jpg"
    },
    {
      "Affiliation": "Mailonline",
      "Bio": "Renzo Borgatti is a developer currently working at the Mailonline on a large Clojure codebase. I started professionally around 2000 but I\u2019ve got my Commodore C16 sometimes in 1986. I\u2019ve done work/research for different industries, corporate and startups, Europe and USA. I moved between Java, Ruby, Objective-C and finally landed on Clojure.",
      "Key": "renzoborgatti",
      "Name": "Renzo Borgatti",
      "URL": "http://reborg.net",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/renzoborgatti/d0a92f1e-7317-4250-9564-4158da3b9881/small.jpg"
    },
    {
      "Affiliation": "Victoria University of Wellington",
      "Key": "michaelhomer",
      "Name": "Michael Homer",
      "URL": "http://ecs.vuw.ac.nz/~mwh",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michaelhomer/d0f1e3dc-74d6-4562-b07c-8e27e5cae71b/small.jpg"
    },
    {
      "Affiliation": "University of Passau",
      "Key": "svenapel",
      "Name": "Sven Apel",
      "URL": "http://www.infosun.fim.uni-passau.de/spl/apel/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/svenapel/d335ee57-b998-49ea-bd6e-3a84391fcf7f/small.jpg"
    },
    {
      "Affiliation": "Drexel University",
      "Key": "colingordon",
      "Name": "Colin Gordon",
      "URL": "https://cs.drexel.edu/~csgordon/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/colingordon/d373869e-7c3a-4a84-9e4e-d03f3606d5b3/small.jpg"
    },
    {
      "Affiliation": "University of Glasgow",
      "Key": "philtrinder",
      "Name": "Phil Trinder",
      "URL": "http://www.dcs.gla.ac.uk/~trinder/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/philtrinder/d3b45714-72ce-47fa-be17-2fff79a32451/small.jpg"
    },
    {
      "Affiliation": "ZeroTurnaround / University of Tartu",
      "Key": "tonispool",
      "Name": "Tõnis Pool",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/tonispool/89237610-da52-46f7-8042-219cfcf5eb15/small.jpg"
    },
    {
      "Affiliation": "Samsung Research America",
      "Bio": "Frank Tip is a Principal Engineer in the Frontier Computer Science Lab at Samsung Research America in San Jose, California and an Adjunct Professor at the David R. Cheriton School of Computer Science at the University of Waterloo. Previously, he was a Professor and Cheriton Research Chair in the David R. Cheriton School of Computer Science at the University of Waterloo (2012-2014), and a Research Staff Member and Manager at the Software Technology Department at the IBM T.J. Watson Research Center (1995-2012). He received his PhD in 1995 from the University of Amsterdam.",
      "Key": "franktip",
      "Name": "Frank Tip",
      "URL": "http://www.franktip.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/franktip/d5a8b37b-b602-4198-bbca-ac4e6215ee58/small.jpg"
    },
    {
      "Affiliation": "University of Kent",
      "Key": "michaelkolling",
      "Name": "Michael Kölling",
      "URL": "https://www.cs.kent.ac.uk/people/staff/mik/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michaelkolling/d623106c-4e82-4082-9a19-e3553ee07672/small.jpg"
    },
    {
      "Affiliation": "MIT",
      "Key": "jodiechen",
      "Name": "Jodie Chen"
    },
    {
      "Affiliation": "LIRMM, Université de Montpellier",
      "Key": "rolandducournau",
      "Name": "Roland Ducournau",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/rolandducournau/d6c0260c-185b-4429-a79e-90ae6e1b1282/small.jpg"
    },
    {
      "Affiliation": "Royal Holloway University of London",
      "Key": "matthewhague",
      "Name": "Matthew Hague"
    },
    {
      "Affiliation": "HARC / Y Combinator Research",
      "Key": "alessandrowarth",
      "Name": "Alessandro Warth",
      "URL": "http://tinlizzie.org/~awarth/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/alessandrowarth/d766fa32-aa3d-4bb3-b3ba-c58039407f3f/small.jpg"
    },
    {
      "Affiliation": "",
      "Bio": "Yuan Yu is a research scientist at Google Research, working on the Google Brain project. His current research focus is on programming abstractions, compilers, and runtimes for large-scale parallel and distributed computing. Prior to joining Google, he was a researcher at Microsoft Research and DEC/Compaq Systems Research Center.",
      "Key": "yuanyu",
      "Name": "Yuan Yu",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/yuanyu/d7e2b687-355c-43e2-869a-c5f07cb5d35c/small.jpg"
    },
    {
      "Affiliation": "KTH Royal Institute of Technology",
      "Bio": "My areas of research are programming languages, type systems, and concurrent/distributed programming.\nPreviously, I was a researcher, software engineer, and consultant at Typesafe. Prior to Typesafe, I was a post-doctoral fellow in the Pervasive Parallelism Lab at Stanford University and in the Programming Methods Lab (LAMP) at EPFL, Switzerland. Prior to that I was a PhD student of Martin Odersky. My main research interests are in the design and implementation of programming languages and managed runtime environments to support concurrent and parallel software. I received a PhD in Computer Science from EPFL in Lausanne, Switzerland, in 2010.\nI am a top-10 contributor of the Scala project. Recently, I have been working on Scala 2.10 futures (SIP-14) as well as Scala\u2019s upcoming Async feature (SIP-22) for asynchronous and concurrent programming.",
      "Key": "philipphaller",
      "Name": "Philipp Haller",
      "URL": "http://www.csc.kth.se/~phaller/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/philipphaller/d849ca98-9227-4990-bdce-051715793721/small.jpg"
    },
    {
      "Affiliation": "Peking University",
      "Key": "luzhang",
      "Name": "Lu Zhang"
    },
    {
      "Affiliation": "Microsoft Research",
      "Bio": "I am a programming language researcher at Microsoft Research Asia\u2019s Systems Research Group who focuses on design, objects, IDEs, live programming, and how we could program with touch.",
      "Key": "seanmcdirmid",
      "Name": "Sean McDirmid",
      "URL": "http://research.microsoft.com/en-us/people/smcdirm/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/seanmcdirmid/d85dbc0e-c0e4-4c3c-abf8-e59f46fbb59f/small.jpg"
    },
    {
      "Affiliation": "University of York",
      "Key": "mikedodds",
      "Name": "Mike Dodds",
      "URL": "http://www-users.cs.york.ac.uk/~miked/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/mikedodds/d898fde9-913a-4dde-938a-33c1f486584f/small.jpg"
    },
    {
      "Affiliation": "Imperial College London, UK",
      "Bio": "Nobuko Yoshida is Professor of Computing. She has applied session types to Web services and programming languages, and introduced multiparty session types. Based on Multiparty session types, she established JBoss Red Hat Scribble project. She was awarded a CNRS visiting fellowship and visiting professorship at Paris VII. She is an editor of Journal of Logical Algebraic Methods in Programming, the chief editor of The Computer-aided Verification and Concurrency Column for EATCS Bulletin and the editor of Acta Informatica. She has served as a PC member for over 50 conferences in the past five years. She was regularly invited to give the key note talks \u2013 recent invited talks include 8th International Symposium on Trustworthy Global Computing (TGC 2013) at Buenos Aires and Joint 25th International Conference on Rewriting Techniques and Applications and 12th International Conference on Typed Lambda Calculi and Applications in 2014. She is a member of IFIP 2.4, and the JBoss Red Hat Savara and Scribble Projects. Her industry partners include Cognizant, Red Hat, VMware, Pivotal and Ocean Observatories Initiative.",
      "Key": "nobukoyoshida",
      "Name": "Nobuko Yoshida",
      "URL": "http://www.doc.ic.ac.uk/~yoshida/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/nobukoyoshida/d8aec887-27c4-4e9b-86ae-6ab4783541ad/small.jpg"
    },
    {
      "Affiliation": "None",
      "Bio": "Sean\u2019s been convinced there are better ways to develop applications across the stack for years, and built time-traveling debuggers, interface builders, layout tools, and graphic design tools in his quest to explore the space. His company was the first to deploy ClojureScript\u2019s Om library to a production app in early 2014, he helped lay the architecture for CircleCI\u2019s open-source frontend app and https://www.precursorapp.com.",
      "Key": "seangrove",
      "Name": "Sean Grove",
      "URL": "https://www.riseos.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/seangrove/daa3bd76-2ef3-4bdf-a351-84e2e7e1775b/small.jpg"
    },
    {
      "Affiliation": "KAIST",
      "Bio": "I am an Associate Professor in the School of Computing at the Korea Advanced Institute of Science and Technology, Korea.\nResearch Interests: Scalable analysis framework for JavaScript, analysis and performance enhancement of medical image processing, programming environments for debugging and testing, proof assistants for programming languages and program analyses",
      "Key": "sukyoungryu",
      "Name": "Sukyoung Ryu",
      "URL": "http://plrg.kaist.ac.kr/ryu",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/sukyoungryu/daa7302c-5574-46dd-b897-6a6820bf2968/small.jpg"
    },
    {
      "Affiliation": "Zalando",
      "Bio": "Kolja Wilcke has worked alternatingly as an illustrator and as a frontend developer, currently with Zalando STUPS. Of late, he took an interest in functional programming and ClojureScript. He also enjoys learning languages outside of the realm of programming.",
      "Key": "koljawilcke",
      "Name": "Kolja Wilcke",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/koljawilcke/dac1cab0-de99-4b23-9b15-46977944d5ff/small.jpg"
    },
    {
      "Affiliation": "",
      "Bio": "Larry Wall was educated at various places including the Cornish School of Music, the Seattle Youth Symphony, Seattle Pacific University, Multnomah School of the Bible, SIL International, U.C. Berkeley, and UCLA. Though trained primarily in music, chemistry, and linguistics, Larry has been working with computers for the last 40 years or so. He is most famous for writing rn, patch, and the Perl programming language, but prefers to think of himself as a cultural hacker whose vocation in life is to bring a bit of joy into the dreary existence of programmers. For various definitions of \u201cwork for\u201d, Larry has worked for Seattle Pacific, MusiComedy Northwest, System Development Corporation, Burroughs, Unisys, the NSA, Telos, ConTel, GTE, JPL, NetLabs, Seagate, Tim O\u2019Reilly, the Perl Foundation, Broadcom, and himself. He is currently serving as Artist in Residence for craigslist.",
      "Key": "larrywall",
      "Name": "Larry Wall",
      "URL": "http://www.wall.org/~larry/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/larrywall/db14cae8-161f-4e28-bdc0-f970c8911ea7/small.jpg"
    },
    {
      "Affiliation": "Federal University of Pernambuco",
      "Key": "henriquerebelo",
      "Name": "Henrique Rebelo",
      "URL": "http://www.cin.ufpe.br/~hemr/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/henriquerebelo/db6849a4-59a2-430b-b9c4-8c2d50968d67/small.jpg"
    },
    {
      "Affiliation": "University of Illinois at Urbana-Champaign",
      "Key": "taoxie",
      "Name": "Tao Xie",
      "URL": "http://taoxie.cs.illinois.edu/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/taoxie/dc0e9fbb-16ea-40cc-9a28-d0200238bcf4/small.jpg"
    },
    {
      "Affiliation": "Universidad de los Andes",
      "Key": "nicolascardozo",
      "Name": "Nicolás Cardozo",
      "URL": "http://www.scss.tcd.ie/~cardozon/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/nicolascardozo/4bf0b997-c8f9-4d9f-ba4b-7379d19ab2a3/small.jpg"
    },
    {
      "Affiliation": "Humboldt-Universität zu Berlin",
      "Bio": "J&ouml;rgen Brandt is a PhD student at the Humboldt-Universit&auml;t in Berlin since 2013. His research interests include next generation sequencing, scientific workflows and functional programming languages. He graduated in Computer Science with a specialization on intelligent systems at Technische Universit&auml;t Berlin in 2011 and in Information Technology and Networked Systems at Hochschule f&uuml;r Technik und Wirtschaft in 2008.",
      "Key": "jorgenbrandt",
      "Name": "Jörgen Brandt",
      "URL": "http://www.cuneiform-lang.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jorgenbrandt/dcb9bd85-d923-4f9f-a7a3-0155c21368c5/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "lindsaygoodwin",
      "Name": "Lindsay Goodwin"
    },
    {
      "Affiliation": "Université Catholique de Louvain",
      "Bio": "I have been to both academia and the industry. I like both the theory and the practice of programming languages. What I love most is to mix the two.",
      "Key": "seyedhosseinhaeri",
      "Name": "Seyed Hossein Haeri",
      "URL": "http://www.uclouvain.be/hossein.haeri",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/seyedhosseinhaeri/ddb912e8-9bd3-4fa2-b93d-73fdb3fbec31/small.jpg"
    },
    {
      "Affiliation": "National Institute of Advanced Industrial Science and Technology, Japan",
      "Key": "junkato",
      "Name": "Jun Kato",
      "URL": "http://junkato.jp",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/junkato/946564ad-0347-4e3c-8dbb-625e3449c713/small.jpg"
    },
    {
      "Affiliation": "Peking University",
      "Key": "junli",
      "Name": "Jun Li"
    },
    {
      "Affiliation": "None (this is a free time project)",
      "Bio": "After some years of musical education Oskar Wickstr&ouml;m began his journey into the world of software development as a self-taught programmer. He started a company practicing web design and development for small businesses. He now works with software analysis and repository mining at Empear, along with various open source projects on his free time.\nAmong the technical topics that interest Oskar are functional programming, systems design and programming languages. His more aestetic side, which mostly involves making music, draws him towards graphics and UI design every now and then. He\u2019s a bit of a restless soul, but it also means he gets a lot done.",
      "Key": "oskarwickstrom",
      "Name": "Oskar Wickström",
      "URL": "https://owickstrom.github.io/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/oskarwickstrom/de218570-64fa-46a9-95c8-27eccd604610/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "annabelsatin",
      "Name": "Annabel Satin",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/annabelsatin/de3bb293-96c3-4a34-98b2-e7c46f9e53e8/small.jpg"
    },
    {
      "Affiliation": "University of Illinois at Urbana-Champaign",
      "Key": "grigorerosu",
      "Name": "Grigore Rosu",
      "URL": "http://fsl.cs.illinois.edu/index.php/Grigore_Rosu",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/grigorerosu/de8d317e-c580-459f-a44e-576e9a4f6b3a/small.jpg"
    },
    {
      "Affiliation": "The Johns Hopkins University",
      "Key": "leandrofacchinetti",
      "Name": "Leandro Facchinetti"
    },
    {
      "Affiliation": "Twitter",
      "Key": "andrewbragdon",
      "Name": "Andrew Bragdon",
      "URL": "http://www.andrewbragdon.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/andrewbragdon/dede6f01-3955-4abc-a148-765f46595d8d/small.jpg"
    },
    {
      "Affiliation": "Chalmers University of Technology",
      "Key": "matthiastichy",
      "Name": "Matthias Tichy",
      "URL": "http://www.cse.chalmers.se/~tichy/"
    },
    {
      "Affiliation": "Oregon State University",
      "Key": "martinerwig",
      "Name": "Martin Erwig",
      "URL": "http://web.engr.oregonstate.edu/~erwig/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/martinerwig/dfe4f738-b2df-4037-a60e-036123594ef1/small.jpg"
    },
    {
      "Affiliation": "King's College London",
      "Bio": "I am a programmer and Reader in Software Development in the Department of Informatics at King\u2019s College London where I lead the Software Development Team. I am an EPSRC Fellow. I co-founded Elbatrop.",
      "Key": "laurietratt",
      "Name": "Laurence Tratt",
      "URL": "http://tratt.net/laurie/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/laurietratt/e1b23f1a-fac9-4566-856c-a8fea953adb2/small.jpg"
    },
    {
      "Affiliation": "FoAM / University of Leeds",
      "Key": "alexmclean",
      "Name": "Alex McLean",
      "URL": "http://slab.org/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/alexmclean/e31d00a4-b0b9-4007-85f9-4ef3c01d46fd/small.jpg"
    },
    {
      "Affiliation": "University of Washington",
      "Bio": "Emina Torlak is an Assistant Professor at the University of Washington, working at the intersection of programming languages, formal methods, and software engineering. She received her Bachelors (2003), Masters (2004), and Ph.D. (2009) degrees from MIT, and subsequently worked at IBM Research, LogicBlox, and as a research scientist at U.C. Berkeley. Her research aims to help people create better software more easily. As part of this agenda, she develops new languages and tools for computer-aided design, verification, and synthesis of software. Emina is the creator of the Kodkod constraint solver, which has been used in over 70 academic and industrial tools for software engineering. Her current work integrates constraint solvers into the Rosette programming language, which enables easy creation of solver-based tools for all kinds of systems, from radiotherapy machines to automated algebra tutors. Emina is a Sloan Research Fellow (2016) and a recepient of the AITO Dahl-Nygaard Junior Prize (2016).",
      "Key": "eminatorlak",
      "Name": "Emina Torlak",
      "URL": "http://people.csail.mit.edu/emina/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/eminatorlak/e32cf5a6-837c-42ed-9b8f-5a179d4d3a36/small.jpg"
    },
    {
      "Affiliation": "MIT CSAIL",
      "Bio": "Frank Wang is a 4th year PhD student at MIT focusing on building secure systems. He is advised by Nickolai Zeldovich and James Mickens. He did his undergraduate at Stanford, focusing on cryptography. He runs the MIT security seminar and is a member of the student team at Roughdraft Ventures, which provides small capital to early stage student startups. He has interned at the security teams at Google and Facebook as well as consulted for various security companies, such as Qualys.",
      "Key": "frankwang",
      "Name": "Frank Wang",
      "URL": "https://www.frankwang.org",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/frankwang/e3a659f1-b874-443b-8a08-cde91a003253/small.jpg"
    },
    {
      "Affiliation": "Imperial College London",
      "Key": "philippagardner",
      "Name": "Philippa Gardner",
      "URL": "http://www.doc.ic.ac.uk/~pg/"
    },
    {
      "Affiliation": "Hasso Plattner Institute",
      "Key": "patrickrein",
      "Name": "Patrick Rein"
    },
    {
      "Affiliation": "Google",
      "Key": "benltitzer",
      "Name": "Ben L. Titzer",
      "URL": "http://research.google.com/pubs/BenTitzer.html",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/benltitzer/e5311459-86cf-4bdc-8903-9232fe8e2907/small.jpg"
    },
    {
      "Affiliation": "KU Leuven",
      "Key": "jespercockx",
      "Name": "Jesper Cockx",
      "URL": "https://distrinet.cs.kuleuven.be/people/jesper",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jespercockx/113f5ec5-aa52-443e-93e2-e7d8d136577b/small.jpg"
    },
    {
      "Affiliation": "IBM Thomas J. Watson Research Center",
      "Bio": "I am a Research Staff Member at Thomas J. Watson Research Center, IBM, Hawthorne, NY USA.",
      "Key": "mandanavaziri",
      "Name": "Mandana Vaziri",
      "URL": "http://researcher.watson.ibm.com/researcher/view.php?person=us-mvaziri",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/mandanavaziri/e65b0602-0136-446e-9e58-48dafbe5ad8b/small.jpg"
    },
    {
      "Affiliation": "Université de Montréal",
      "Key": "marcfeeley",
      "Name": "Marc Feeley",
      "URL": "http://www.iro.umontreal.ca/~feeley/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/marcfeeley/e7d31a6c-9e51-4735-8c89-58530982dac8/small.jpg"
    },
    {
      "Affiliation": "Carnegie Mellon University",
      "Bio": "Limin is Assistant Research Professor, ECE &amp; INI at Carnegie Mellon University. Her research interests are Language-based security, programming language, logic, program verification.",
      "Key": "liminjia",
      "Name": "Limin Jia",
      "URL": "https://www.andrew.cmu.edu/user/liminjia/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/liminjia/e81f3dbb-4799-4876-affd-4d342ec6bd64/small.jpg"
    },
    {
      "Affiliation": "Tokyo Institute of Technology",
      "Key": "hidehikomasuhara",
      "Name": "Hidehiko Masuhara",
      "URL": "http://prg.is.titech.ac.jp/people/masuhara/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/hidehikomasuhara/e8be7fcd-4f25-4d02-83dc-217c74aa22c9/small.jpg"
    },
    {
      "Affiliation": "University of California at Los Angeles, USA",
      "Key": "alankay",
      "Name": "Alan Kay"
    },
    {
      "Affiliation": "Lasige / Faculty of Sciences, Universidade de Lisboa",
      "Key": "joanacampos",
      "Name": "Joana Campos",
      "URL": "http://web.ist.utl.pt/~joana.campos/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/joanacampos/e955cde7-5198-4647-80ff-e1e4605524cf/small.jpg"
    },
    {
      "Affiliation": "University of Washington, USA",
      "Bio": "Dan Grossman is a Professor in the Department of Computer Science &amp; Engineering at the University of Washington where he has been a faculty member since 2003. He holds the J. Ray Bowen Professorship for Innovation in Engineering Education. He is his department\u2019s Associate Chair for Education.\nDan completed his Ph.D. at Cornell University and his undergraduate studies at Rice University. His research interests lie in the area of programming languages, ranging from theory to design to implementation, with a focus on improving software quality. In recent years, he has focused on better techniques for expressing, analyzing, and executing multithreaded programs. He has collaborated actively with researchers in several other disciplines of computer science, particularly computer architecture on problems at the hardware/software interface including approximate programming.\nDan has served on roughly thirty conference and workshop program committees. He has served on the ACM SIGPLAN Executive Committee and the Steering Committee for the ACM / IEEE-CS 2013 Computer Science Curriculum. He currently serves on the CRA Board and the ACM Education Board.\nDan is the instructor for a popular MOOC on undergraduate topics in programming languages and functional programming.\nDan is the proud and obsessed father of two sons, born December 2013 and September 2015. Prior to that all-encompassing-change, Dan enjoyed playing (poorly) and watching ice hockey, (road) bicycling, hiking, non-fiction, and enjoying good food, beer, and live theatre. Now he usually manages to read one book a month. Dan lives with a dog that was born on the streets of Brazil. Dan has never had a cavity.",
      "Key": "dangrossman",
      "Name": "Dan Grossman",
      "URL": "http://homes.cs.washington.edu/~djg/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/dangrossman/e95af5ee-ac81-4b5b-8fd6-fbb071f43be4/small.jpg"
    },
    {
      "Affiliation": "Ulm University, Germany ",
      "Key": "benjaminerb",
      "Name": "Benjamin Erb",
      "URL": "http://www.uni-ulm.de/in/vs/~erb",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/benjaminerb/929f2deb-3be8-4a70-aaf6-4ca0f42149ec/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "stefanreichhart",
      "Name": "Stefan Reichhart"
    },
    {
      "Affiliation": "Trinity College Dublin, Ireland",
      "Key": "davidgregg",
      "Name": "David Gregg",
      "URL": "https://www.cs.tcd.ie/David.Gregg/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/davidgregg/ebdaf0eb-e701-4eea-95e6-54d82e57c248/small.jpg"
    },
    {
      "Affiliation": "Federal University of Alagoas (UFAL)",
      "Bio": "M&aacute;rcio Ribeiro is an Assistant Professor in the Computing Institute at Federal University of Alagoas. He holds a Doctoral degree in Computer Science from the Federal University of Pernambuco (2012). He also holds the ACM SIGPLAN John Vlissides Award (2010). This award refers to the best PhD proposal presented in the OOPSLA Doctoral Symposium, \u201cshowing significant promise in applied software research.\u201d In addition, his PhD thesis has been awarded as the best one in Computer Science of Brazil in 2012. He is a faculty member at the Graduate Program in Informatics (PPGI) and has experience in Software Engineering. His main research interests are on Software Product Lines, Object/Aspect/Feature-Oriented Programming, Software Modularity, and Static Analyses. In 2014, he was the General Chair of the Brazilian Conference on Software (CBSoft), the most important event in Software of Brazil. More on Ribeiro can be found at http://www.ic.ufal.br/professor/marcio/",
      "Key": "marcioribeiro",
      "Name": "Márcio Ribeiro",
      "URL": "https://sites.google.com/a/ic.ufal.br/marcio/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/marcioribeiro/ed0eca63-6608-4417-913e-a0805484dfce/small.jpg"
    },
    {
      "Affiliation": "IBM",
      "Key": "danielheidinga",
      "Name": "Daniel Heidinga"
    },
    {
      "Affiliation": "",
      "Key": "gurvancabon",
      "Name": "Gurvan Cabon"
    },
    {
      "Affiliation": "Karlsruhe Institute of Technology",
      "Key": "vladimirklebanov",
      "Name": "Vladimir Klebanov",
      "URL": "http://formal.iti.kit.edu/~klebanov/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/vladimirklebanov/ed412675-3d2d-413b-87a9-3602ae63c38b/small.jpg"
    },
    {
      "Affiliation": "University of Maryland, College Park",
      "Key": "daviddarais",
      "Name": "David Darais",
      "URL": "http://david.darais.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/daviddarais/84b89731-ca3c-4d97-9540-4ce4db09d1d1/small.jpg"
    },
    {
      "Affiliation": "King's College London ",
      "Bio": "I am researcher in Computer Science with Laurence Tratt as a member of the Software Development Team at King\u2019s College London since 2013. I live in Hamburg. Before, I was at Hasso-Plattner-Institute Potsdam with Robert Hirschfeld and Heinrich-Heine-Universit&auml;t D&uuml;sseldorf with Michael Leuschel.\nMy main research interests are techniques for the efficient implementation of dynamic programming languages. I am interested in tracing JITs, optimizations, partial evaluation, particularly at runtime. I am a member of the Python Software Foundation.",
      "Key": "carlfriedrichbolz",
      "Name": "Carl Friedrich Bolz",
      "URL": "http://cfbolz.de/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/carlfriedrichbolz/ef3ea68a-4eec-4490-95a3-6386f14eaa74/small.jpg"
    },
    {
      "Affiliation": "SAP Innovation Center Potsdam",
      "Bio": "Michael is a researcher and development manager with the SAP Innovation Center Potsdam and its Chairman Projects team. Before joining SAP in 2014, he was a postdoctoral researcher and Ph.D. student in computer science with the Software Architecture Group, led by Prof. Dr. Robert Hirschfeld, at the Hasso-Plattner-Institute (University of Potsdam).\nHis main research focuses on software engineering, maintenance, and reverse engineering. In particular, he is interested in debugging, dynamic analysis, and program comprehension. \nHe received a doctoral degree in computer science (2013) from the University of Potsdam, Germany. From 2008 to 2012, he was a member of the Hasso Plattner Institute Research School on \u201cService-oriented Systems Engineering\u201d.",
      "Key": "michaelperscheid",
      "Name": "Michael Perscheid",
      "URL": "http://michaelperscheid.de/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/michaelperscheid/f0a71a32-892c-48c3-b052-3d347b5e846e/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "christiancolombo",
      "Name": "Christian Colombo"
    },
    {
      "Affiliation": "",
      "Key": "matthewhuebert",
      "Name": "Matthew Huebert"
    },
    {
      "Affiliation": "University of East Anglia",
      "Key": "joostnoppen",
      "Name": "Joost Noppen"
    },
    {
      "Affiliation": "University of Montreal",
      "Key": "maximechevalierboisvert",
      "Name": "Maxime Chevalier-Boisvert",
      "URL": "http://pointersgonewild.com/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/maximechevalierboisvert/f261df22-6ef1-4d94-91f0-33444d486bb4/small.jpg"
    },
    {
      "Affiliation": "TU Darmstadt",
      "Key": "karimali",
      "Name": "Karim Ali",
      "URL": "http://karimali.ca",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/karimali/f2959cbf-d957-4eaa-bc48-9af76e9eeca6/small.jpg"
    },
    {
      "Affiliation": "University of Washington",
      "Key": "johntoman",
      "Name": "John Toman"
    },
    {
      "Affiliation": "University of Bern, Switzerland",
      "Bio": "Andrei Chiș is a PhD student at University of Bern in the Software Composition Group. Prior to this, he got a master and a bachelor degree in software engineering from the \u201cPolitehnica\u201d University of Timișoara, under the supervision of Radu Marinescu, with theses in the area of software visualisation. \nHe maintains that development environments have to be moldable, that is, they have to be aware of the application under development and the developer\u2019s tasks and enable rapid and effective customization to new applications and development tasks. His current research focuses on build new solutions that make that vision possible as part of the Glamorous Toolkit team. He is also a contributor to Pharo, a live, Smalltalk-inspired programming language and environment, and Moose, a platform for software and data analysis.",
      "Key": "andreichis",
      "Name": "Andrei Chiş",
      "URL": "http://www.andreichis.com",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/andreichis/edd5b495-d66c-4f9e-9783-822d31d9507e/small.jpg"
    },
    {
      "Affiliation": "Indiana University",
      "Key": "andrekuhlenschmidt",
      "Name": "Andre Kuhlenschmidt"
    },
    {
      "Affiliation": "Hasso Plattner Institute",
      "Key": "jenslincke",
      "Name": "Jens Lincke",
      "URL": "http://www.hpi.uni-potsdam.de/hirschfeld/people/lincke/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jenslincke/f507e2bf-2bef-47a3-bfb0-17c8053cece4/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "georgesyounes",
      "Name": "Georges Younes"
    },
    {
      "Affiliation": "University of New Brunswick",
      "Key": "davidbremner",
      "Name": "David Bremner"
    },
    {
      "Affiliation": "Facebook",
      "Bio": "I love static program analysis. I\u2019ve been designing and implementing widely used static analysis tools. I published papers in the most important research conferences and gave talks at main industrial conferences as e.g., Build.",
      "Key": "francescologozzo",
      "Name": "Francesco Logozzo",
      "URL": "https://it.linkedin.com/in/francesco-logozzo-4106386",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/francescologozzo/f70bf450-fed8-4488-88cb-579091e43a4d/small.jpg"
    },
    {
      "Affiliation": "Lund University",
      "Bio": "I am a Professor in Computer Science at Lund University, Sweden. I head the JastAdd project, where we develop declarative techniques and metatools for generating extensible language tools, like compilers, visual program editors, and source code analyzers. In particular, we develop the JastAdd metacompiler, see http://jastadd.org. JastAdd is based on reference attribute grammars, which is a combination of declarative object-oriented programming and attribute grammars. The most well-known application of JastAdd is ExtendJ, an extensible Java compiler (previously known as JastAddJ). ExtendJ has been used in a variety of projects to build new languages on top of Java, to experiment with new language constructs, and to analyze Java source code. Other mature applications of JastAdd include languages for simulation and control like Modelica, Optimica, and GrafChart.",
      "Key": "gorelhedin",
      "Name": "Gorel Hedin",
      "URL": "http://cs.lth.se/gorel_hedin",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/gorelhedin/f76867da-5215-40e6-a3aa-890c70072512/small.jpg"
    },
    {
      "Affiliation": "Microsoft Research",
      "Bio": "Sebastian Burckhardt was born and raised in Basel, Switzerland, where he studied Mathematics at the local University. During an exchange year at Brandeis University, he discovered his affinity to Computer Science and immigrated to the United States. After a few years of industry experience at IBM, he returned to academia and earned his PhD in Computer Science at the University of Pennsylvania. Since then, he has worked as a researcher at Microsoft Research in Redmond. His general research interest is the study of programming models for of concurrent, parallel, and distributed systems. More specific interests include consistency models, concurrency testing, self-adjusting computation, and the concurrent revisions programming model.",
      "Key": "sebastianburckhardt",
      "Name": "Sebastian Burckhardt",
      "URL": "http://research.microsoft.com/en-us/people/sburckha/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/sebastianburckhardt/f7727795-0024-4bdd-8c17-ff2099fa4ebd/small.jpg"
    },
    {
      "Affiliation": "TU Darmstadt, Germany",
      "Key": "jibeshpatra",
      "Name": "Jibesh Patra",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jibeshpatra/89e542e1-15c6-4574-a2e0-f257402d118c/small.jpg"
    },
    {
      "Affiliation": "Aalborg University",
      "Key": "bentthomsen",
      "Name": "Bent Thomsen",
      "URL": "http://people.cs.aau.dk/~bt/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/bentthomsen/f7b273c2-93bc-4d52-a0cd-7610ce88ae23/small.jpg"
    },
    {
      "Affiliation": "Tokyo City University",
      "Key": "nobuhikoogura",
      "Name": "Nobuhiko Ogura",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/nobuhikoogura/93469c11-201e-445c-8138-4e1325cce699/small.jpg"
    },
    {
      "Affiliation": "Universidade Nova Lisboa",
      "Key": "carlaferreira",
      "Name": "Carla Ferreira",
      "URL": "http://ctp.di.fct.unl.pt/~cf/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/carlaferreira/f8ecbb65-eb89-4632-bf84-1e29f06a8cf9/small.jpg"
    },
    {
      "Affiliation": "Université Catholique de Louvain, Belgium",
      "Bio": "Kim Mens is full Professor in Computer Science at UCL university in Belgium, where he leads the RELEASeD research laboratory on software evolution and software development technology. He holds the degrees of Licentiate in Mathematics, Licentiate in Computer Science, and PhD in Computer Science. His main research interests include software development, software maintenance, software evolution and context-oriented programming with a particular emphasis on programming languages and tool support.",
      "Key": "kimmens",
      "Name": "Kim Mens",
      "URL": "http://www.uclouvain.be/kim.mens",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/kimmens/f8ef18ca-0793-4f37-8fa8-f5ec2c137c87/small.jpg"
    },
    {
      "Affiliation": "Vrije Universiteit Brussel",
      "Key": "laurephilips",
      "Name": "Laure Philips"
    },
    {
      "Affiliation": "CDG Labs",
      "Key": "jonathanedwards",
      "Name": "Jonathan Edwards",
      "URL": "http://alarmingdevelopment.org/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/jonathanedwards/fd5775b6-98f3-483f-b326-4e72542b6fca/small.jpg"
    },
    {
      "Affiliation": "Victoria University of Wellington",
      "Key": "davidpearce",
      "Name": "David Pearce",
      "URL": "http://homepages.ecs.vuw.ac.nz/~djp/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/davidpearce/fda6716e-da67-4ab2-aa41-3d189aad83fd/small.jpg"
    },
    {
      "Affiliation": "Centrum Wiskunde & Informatica, Leiden University",
      "Key": "franksdeboer",
      "Name": "Frank S. de Boer",
      "URL": "http://homepages.cwi.nl/~frb/",
      "URLphoto": "http://2016.ecoop.org/getProfileImage/franksdeboer/ffdb7b27-277c-4985-a5c6-4cf6961ab4c7/small.jpg"
    }
  ],
  "Sessions": [
    {
      "Abstract": "Welcome to the 1st VORTEX Workshop on Runtime Verification  \n   \n \n\nRuntime verification (RV) is an approach to software verification which is concerned with monitoring and analysis of software and hardware system executions.\nIn recent years RV has gained more and more consensus as an effective and promising approach to ensure software reliability, bridging a gap between formal verification, and conventional testing; furthermore, monitoring a system during runtime execution offers additional opportunities for addressing error recovery, self-adaptation, and other issues that go beyond software reliability. The goal of the first edition of this workshop is to bring together researchers working on RV for object-oriented languages, and systems, on topics covering either theoretical, or practical aspects, or, preferably, both. More specifically, topics of interest include, but are not limited to, the following ones:  \n \n combination of static and dynamic analyses \n industrial applications \n monitor construction and synthesis techniques \n monitoring concurrent/distributed systems \n program adaptation \n runtime enforcement, fault detection, recovery and repair \n RV for safety and security \n specification formalisms and formal underpinning of RV \n specification mining \n tool development \n\nDepending on the quality and the overall number of accepted papers, after the workshop authors of selected papers will be invited to submit an extended version for a special issue hosted by the online open-access Journal Frontiers in ICT (Specialty Formal Methods, http://journal.frontiersin.org/journal/all/section/formal-methods).",
      "Day": "2016-07-18",
      "Items": [
        "vortex-2016-extracting-runtime-monitors-from-tests-an-overview-and-a-way-forward",
        "vortex-2016-runtime-checks-as-nominal-types",
        "vortex-2016-the-early-bird-catches-the-worm-first-verify-then-monitor-",
        "vortex-2016-closing-remarks"
      ],
      "Key": "80d68553-d1cb-4318-822d-447ecce4e245",
      "Location": "Saba",
      "Time": "13:50 - 15:20",
      "Title": "VORTEX: Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 1st VORTEX Workshop on Runtime Verification  \n   \n \n\nRuntime verification (RV) is an approach to software verification which is concerned with monitoring and analysis of software and hardware system executions.\nIn recent years RV has gained more and more consensus as an effective and promising approach to ensure software reliability, bridging a gap between formal verification, and conventional testing; furthermore, monitoring a system during runtime execution offers additional opportunities for addressing error recovery, self-adaptation, and other issues that go beyond software reliability. The goal of the first edition of this workshop is to bring together researchers working on RV for object-oriented languages, and systems, on topics covering either theoretical, or practical aspects, or, preferably, both. More specifically, topics of interest include, but are not limited to, the following ones:  \n \n combination of static and dynamic analyses \n industrial applications \n monitor construction and synthesis techniques \n monitoring concurrent/distributed systems \n program adaptation \n runtime enforcement, fault detection, recovery and repair \n RV for safety and security \n specification formalisms and formal underpinning of RV \n specification mining \n tool development \n\nDepending on the quality and the overall number of accepted papers, after the workshop authors of selected papers will be invited to submit an extended version for a special issue hosted by the online open-access Journal Frontiers in ICT (Specialty Formal Methods, http://journal.frontiersin.org/journal/all/section/formal-methods).",
      "Day": "2016-07-18",
      "Items": [
        "vortex-2016-opening-remarks",
        "vortex-2016-starvoors-a-framework-for-static-and-runtime-verification-of-data-and-control-properties-",
        "vortex-2016-runtime-verification-with-data",
        "vortex-2016-runtime-verification-of-safe-advisories-in-the-next-generation-airborne-collision-avoidance-system",
        "vortex-2016-monitoring-javascript-programs-with-jalangi"
      ],
      "Key": "8de7e957-dea3-4b6c-a55b-7f8bfe920823",
      "Location": "Saba",
      "Time": "10:05 - 12:25",
      "Title": "VORTEX: Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 7th International Workshop on Aliasing, Capabilities and Ownership \n   \n \n\nThe power of objects lies in the flexibility of their interconnection structure. But this flexibility comes at a cost. Because an object can be modified via any alias, object-oriented programs are hard to understand, maintain, and analyse. Aliasing makes objects depend on their environment in unpredictable ways, breaking the encapsulation necessary for reliable software components, making it difficult to reason about and optimise programs, obscuring the interactions between objects, and introducing security problems.\nAliasing is a fundamental difficulty, but we accept its presence. Instead we seek techniques for describing, reasoning about, restricting, analysing, and preventing the connections between objects and/or the interactions between them. Promising approaches to these problems are based on ownership, capabilities, separation logic, uniqueness, sharing control, escape analysis, argument independence, read-only references, effects systems, and access control mechanisms.",
      "Day": "2016-07-18",
      "Items": [
        "iwaco-2016-third-talk",
        "iwaco-2016-first-paper-kappa-insights-current-status-and-future-work",
        "iwaco-2016-second-paper-abstract-data-types-in-object-capability-systems"
      ],
      "Key": "406d4bf7-f397-49f7-9eb4-1185ad6e09a0",
      "Location": "Quasimodo",
      "Time": "16:00 - 17:30",
      "Title": "IWACO: Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 5th Annual Workshop on Tools for JavaScript Analysis! \n   \n \n\nJavaScript has become ubiquitous: not only is it the lingua franca of the Web platform, but it is also increasingly being used for developing server-side applications and for writing platform-independent mobile applications. Consequently, it is now the focus of many strands of research work in static and dynamic program analysis, automated testing, security analysis and refactoring, to name just a few. At the same time, there is a strong interest from industry in providing better development tools for JavaScript programmers, such as debuggers and smart IDEs.\nAll these projects need to overcome similar challenges: How to delineate the program in a dynamic setting like a web page, how to deal with the extensive native APIs and framework libraries most JavaScript code relies on, how to handle non-determinism of concurrency and asynchronous events, and what to do about the language\u2019s extraordinarily dynamic features like eval or reflection over object structure.\nJSTools will bring together participants from academia and industry working on analysis of JavaScript and its dialects to share ideas and problems, with a focus on presentations of shareable infrastructure created by the participants. We also aim to involve developers working on JavaScript dialects such as TypeScript to share their perspective.",
      "Day": "2016-07-19",
      "Items": [
        "jstools-2016-verification-of-communication-in-web-applications",
        "jstools-2016-fishing-for-javascript-bugs-at-the-shallow-end",
        "jstools-2016-closing"
      ],
      "Key": "d25e5795-587f-4ebc-865c-e206c02a06b2",
      "Location": "Alfieri",
      "Time": "16:00 - 17:30",
      "Title": "JSTools: Session 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 5th Annual Workshop on Tools for JavaScript Analysis! \n   \n \n\nJavaScript has become ubiquitous: not only is it the lingua franca of the Web platform, but it is also increasingly being used for developing server-side applications and for writing platform-independent mobile applications. Consequently, it is now the focus of many strands of research work in static and dynamic program analysis, automated testing, security analysis and refactoring, to name just a few. At the same time, there is a strong interest from industry in providing better development tools for JavaScript programmers, such as debuggers and smart IDEs.\nAll these projects need to overcome similar challenges: How to delineate the program in a dynamic setting like a web page, how to deal with the extensive native APIs and framework libraries most JavaScript code relies on, how to handle non-determinism of concurrency and asynchronous events, and what to do about the language\u2019s extraordinarily dynamic features like eval or reflection over object structure.\nJSTools will bring together participants from academia and industry working on analysis of JavaScript and its dialects to share ideas and problems, with a focus on presentations of shareable infrastructure created by the participants. We also aim to involve developers working on JavaScript dialects such as TypeScript to share their perspective.",
      "Day": "2016-07-19",
      "Items": [
        "jstools-2016-morning-remarks",
        "jstools-2016-monitoring-javascript-programs-with-jalangi",
        "jstools-2016-so-you-want-to-build-memory-tooling-for-javascript-",
        "jstools-2016-sound-type-inference-for-javascript"
      ],
      "Key": "5f990dc2-8160-4140-9559-09b487abb4f2",
      "Location": "Alfieri",
      "Time": "10:05 - 12:25",
      "Title": "JSTools: Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 5th Annual Workshop on Tools for JavaScript Analysis! \n   \n \n\nJavaScript has become ubiquitous: not only is it the lingua franca of the Web platform, but it is also increasingly being used for developing server-side applications and for writing platform-independent mobile applications. Consequently, it is now the focus of many strands of research work in static and dynamic program analysis, automated testing, security analysis and refactoring, to name just a few. At the same time, there is a strong interest from industry in providing better development tools for JavaScript programmers, such as debuggers and smart IDEs.\nAll these projects need to overcome similar challenges: How to delineate the program in a dynamic setting like a web page, how to deal with the extensive native APIs and framework libraries most JavaScript code relies on, how to handle non-determinism of concurrency and asynchronous events, and what to do about the language\u2019s extraordinarily dynamic features like eval or reflection over object structure.\nJSTools will bring together participants from academia and industry working on analysis of JavaScript and its dialects to share ideas and problems, with a focus on presentations of shareable infrastructure created by the participants. We also aim to involve developers working on JavaScript dialects such as TypeScript to share their perspective.",
      "Day": "2016-07-19",
      "Items": [
        "jstools-2016-frozen-realms-confining-effects-for-safer-javascript-plugins",
        "jstools-2016-javascript-verification",
        "jstools-2016-what-went-wrong-automatic-triage-of-precision-loss-during-static-analysis-of-javascript"
      ],
      "Key": "26dfad71-5efe-493d-be70-9c4a353e0436",
      "Location": "Alfieri",
      "Time": "13:50 - 15:20",
      "Title": "JSTools: Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 7th International Workshop on Aliasing, Capabilities and Ownership \n   \n \n\nThe power of objects lies in the flexibility of their interconnection structure. But this flexibility comes at a cost. Because an object can be modified via any alias, object-oriented programs are hard to understand, maintain, and analyse. Aliasing makes objects depend on their environment in unpredictable ways, breaking the encapsulation necessary for reliable software components, making it difficult to reason about and optimise programs, obscuring the interactions between objects, and introducing security problems.\nAliasing is a fundamental difficulty, but we accept its presence. Instead we seek techniques for describing, reasoning about, restricting, analysing, and preventing the connections between objects and/or the interactions between them. Promising approaches to these problems are based on ownership, capabilities, separation logic, uniqueness, sharing control, escape analysis, argument independence, read-only references, effects systems, and access control mechanisms.",
      "Chairs": ["paleyli"],
      "ChairsString": "Paley Li",
      "Day": "2016-07-18",
      "Items": [
        "iwaco-2016-keynote",
        "iwaco-2016-third-paper-towards-enabling-low-level-memory-optimisations-at-the-high-level-with-ownership-annotations",
        "iwaco-2016-second-talk"
      ],
      "Key": "0811b720-f03a-4853-96c8-943778fccc14",
      "Location": "Quasimodo",
      "Time": "13:50 - 15:20",
      "Title": "IWACO: Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 8th International Workshop on Context-Oriented Programming \n   \n \n\nContext information plays an increasingly important role in our information-centric world. Software systems must adapt to changing contexts over time, and must change even while they are running. Unfortunately, mainstream programming languages and development environments do not support this kind of dynamic change very well, leading developers to implementing complex designs to anticipate various dimensions of variability.\nContext-oriented Programming (COP) directly supports variability depending on a wide range of dynamic attributes. In effect, it should be possible to dispatch run-time behavior on any property of the execution context. By now, several researchers have been working on notions approaching that idea, and implementations ranging from first prototypes to mature platform extensions used in commercial deployments have illustrated how multidimensional dispatch can indeed be supported effectively to achieve expressive run-time variation in behavior. \n(Flyer)",
      "Day": "2016-07-19",
      "Items": [
        "cop-2016-a-context-oriented-software-architecture",
        "cop-2016-detecting-invalid-layer-combinations-using-control-flow-analysis-for-android",
        "cop-2016-transaction-layers-controlling-granularity-of-change-in-live-programming-environments-using-cop"
      ],
      "Key": "92eb267c-27db-4b02-8b61-9d990d3ff04d",
      "Location": "Quasimodo",
      "Time": "13:50 - 15:20",
      "Title": "COP: Research Papers 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 7th International Workshop on Aliasing, Capabilities and Ownership \n   \n \n\nThe power of objects lies in the flexibility of their interconnection structure. But this flexibility comes at a cost. Because an object can be modified via any alias, object-oriented programs are hard to understand, maintain, and analyse. Aliasing makes objects depend on their environment in unpredictable ways, breaking the encapsulation necessary for reliable software components, making it difficult to reason about and optimise programs, obscuring the interactions between objects, and introducing security problems.\nAliasing is a fundamental difficulty, but we accept its presence. Instead we seek techniques for describing, reasoning about, restricting, analysing, and preventing the connections between objects and/or the interactions between them. Promising approaches to these problems are based on ownership, capabilities, separation logic, uniqueness, sharing control, escape analysis, argument independence, read-only references, effects systems, and access control mechanisms.",
      "Day": "2016-07-18",
      "Items": ["iwaco-2016-closing-remarks"],
      "Key": "92d817f7-0f51-4ecc-b2bc-0a8e9ab89273",
      "Location": "Quasimodo",
      "Time": "17:40 - 18:30",
      "Title": "IWACO: Session 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 8th International Workshop on Context-Oriented Programming \n   \n \n\nContext information plays an increasingly important role in our information-centric world. Software systems must adapt to changing contexts over time, and must change even while they are running. Unfortunately, mainstream programming languages and development environments do not support this kind of dynamic change very well, leading developers to implementing complex designs to anticipate various dimensions of variability.\nContext-oriented Programming (COP) directly supports variability depending on a wide range of dynamic attributes. In effect, it should be possible to dispatch run-time behavior on any property of the execution context. By now, several researchers have been working on notions approaching that idea, and implementations ranging from first prototypes to mature platform extensions used in commercial deployments have illustrated how multidimensional dispatch can indeed be supported effectively to achieve expressive run-time variation in behavior. \n(Flyer)",
      "Day": "2016-07-19",
      "Items": [
        "cop-2016-classes-as-layers-rewriting-design-patterns-with-cop-alternative-implementations-of-decorator-observer-and-visitor",
        "cop-2016-consistent-unanticipated-adaptation-for-context-dependent-applications",
        "cop-2016-optimizing-sideways-composition-fast-context-oriented-programming-in-contextpypy"
      ],
      "Key": "8895ed37-09e9-475c-8a2e-c9a6fe21acb4",
      "Location": "Quasimodo",
      "Time": "10:05 - 12:25",
      "Title": "COP: Research Papers 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 8th International Workshop on Context-Oriented Programming \n   \n \n\nContext information plays an increasingly important role in our information-centric world. Software systems must adapt to changing contexts over time, and must change even while they are running. Unfortunately, mainstream programming languages and development environments do not support this kind of dynamic change very well, leading developers to implementing complex designs to anticipate various dimensions of variability.\nContext-oriented Programming (COP) directly supports variability depending on a wide range of dynamic attributes. In effect, it should be possible to dispatch run-time behavior on any property of the execution context. By now, several researchers have been working on notions approaching that idea, and implementations ranging from first prototypes to mature platform extensions used in commercial deployments have illustrated how multidimensional dispatch can indeed be supported effectively to achieve expressive run-time variation in behavior. \n(Flyer)",
      "Day": "2016-07-19",
      "Items": [
        "cop-2016-opening",
        "cop-2016-keynote"
      ],
      "Key": "bc8e0d74-40df-4178-b28c-09f3588a2167",
      "Location": "Quasimodo",
      "Time": "08:45 - 09:45",
      "Title": "COP: Opening and Keynote",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Whether you are programming a rich web application in JavaScript that mutates state in the client\u2019s browser, or you are building a massively deployed mobile application that will operate with client state at the device, it\u2019s undeniable that you are building a distributed system!\nTwo major challenges of programming distributed systems are concurrency and partial failure. Concurrency of operations can introduce accidental nondeterminism: computations may result in different outcomes with the same inputs given scheduling differences in the underlying system unless a synchronization mechanism is used to enforce some order. Synchronization is typically expensive, and reduces the efficiency of user applications. Partial failure, or the failure of one or more components in a distributed system at one time, introduces the challenge of knowing, when an operation fails, which components of the operation completed successfully. To solve these problems in practice on an unreliable, asynchronous network, atomic commit protocols and timeouts as failure detection are typically used. \nBecause of these challenges, early approaches to providing programming abstractions for distributed computing that ignored them were inherently misguided: the canonical example being the Remote Procedure Call, still widely deployed in industry.\nThe goal of this workshop is to discuss new approaches to distributed programming that provide efficient execution and the elimination of accidental nondeterminism resulting from concurrency and partial failure. It will bring together both practitioners and theoreticians from many disciplines: database theory, distributed systems, systems programming, programming languages, data-centric programming, web application development, and verification, to discuss the state-of-the-art of distributed programming, advancement of the state-of-the-art and paths forward to better application of theory in practice.\nThe main objectives of this workshop are the following: \n \n To review the state-of-the-art research in languages, models, and systems for distributed programming; \n To identify areas of critical need where research can advance the state of the art; \n To create a forum for discussion; \n To present open problems from practitioners with an aim towards motivating academic research on relevant problems faced by industry. \n\nIn the spirit of both ECOOP and Curry On, this workshop aims at favoring a multidisciplinary perspective by bringing together researchers, developers, and practitioners from both academia and industry. \n \n \n   \n      \n      \n    PMLDC is sponsored by the SyncFree project in the European Union Seventh Framework Programme and by the Google Cloud Platform.",
      "Day": "2016-07-17",
      "Items": [
        "pmldc-2016-implicitly-distributing-pervasively-concurrent-programs",
        "pmldc-2016-static-type-checking-for-the-kompics-component-model-kola-the-kompics-language",
        "pmldc-2016-towards-aggregate-programming-in-scala",
        "pmldc-2016-building-distributed-applications-with-data-and-time-frames",
        "pmldc-2016-fractional-permissions-for-race-free-mutable-references-in-a-dataflow-intermediate-language"
      ],
      "Key": "85315580-c9ea-4d77-98ce-8279aefa0c5d",
      "Location": "Montale",
      "Time": "10:00 - 12:30",
      "Title": "PMLDC: Session 1: Programming Languages",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to LIVE 2016, a workshop on live programming systems \n   \n \n\nSlack will be used during the workshop. If you plan to attend, please email smcdirm@microsoft.com so we can send you an invite. \nLive programming systems abandon the traditional edit-compile-run cycle in favor of fluid user experiences that encourages powerful new ways of \u201cthinking to code\u201d and enables programmers to see and understand their program executions. Programming today requires much mental effort with broken stuttering feedback loops: programmers carefully plan their abstractions, simulating program execution in their heads; the computer is merely a receptacle for the resulting code with a means of executing that code. Live programming aims to create a tighter more fluid feedback loop between the programmer and computer, allowing the computer to augment more of the programming process by, for example, allowing programmers to progressively mine abstractions from concrete examples and providing continuous feedback about how their code will execute. Meanwhile, under the radar of the PL community at-large, a nascent community has formed around the related idea of \u201clive coding\u201d\u2014live audiovisual performances which use computers and algorithms as instruments and include live audiences in their programming experiences. This workshop focuses on exploring notions and degrees of live programming as they relate to development, creative activities, learning, and performance. We are interested in methodologies, tools, demos, infrastructures, language designs, and questions that stimulate interest and understanding in live programming.\nFollowing up on the success of the first LIVE workshop at ICSE 2013, LIVE 2016 solicits high quality submissions on live programming and will discuss how to move forward with this topic to enable better programming experiences.",
      "Day": "2016-07-17",
      "Items": [
        "live-2016-leveraging-live-programming-in-the-classroom-an-experience-report",
        "live-2016-live-tuning-expanding-live-programming-benefits-to-non-programmers",
        "live-2016-sintr-experimenting-with-liveness-at-scale",
        "live-2016-discussion-c"
      ],
      "Key": "996e6882-8e36-4976-9f75-779473bd3c80",
      "Location": "Foscolo",
      "Time": "16:00 - 18:20",
      "Title": "LIVE: Fall",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Whether you are programming a rich web application in JavaScript that mutates state in the client\u2019s browser, or you are building a massively deployed mobile application that will operate with client state at the device, it\u2019s undeniable that you are building a distributed system!\nTwo major challenges of programming distributed systems are concurrency and partial failure. Concurrency of operations can introduce accidental nondeterminism: computations may result in different outcomes with the same inputs given scheduling differences in the underlying system unless a synchronization mechanism is used to enforce some order. Synchronization is typically expensive, and reduces the efficiency of user applications. Partial failure, or the failure of one or more components in a distributed system at one time, introduces the challenge of knowing, when an operation fails, which components of the operation completed successfully. To solve these problems in practice on an unreliable, asynchronous network, atomic commit protocols and timeouts as failure detection are typically used. \nBecause of these challenges, early approaches to providing programming abstractions for distributed computing that ignored them were inherently misguided: the canonical example being the Remote Procedure Call, still widely deployed in industry.\nThe goal of this workshop is to discuss new approaches to distributed programming that provide efficient execution and the elimination of accidental nondeterminism resulting from concurrency and partial failure. It will bring together both practitioners and theoreticians from many disciplines: database theory, distributed systems, systems programming, programming languages, data-centric programming, web application development, and verification, to discuss the state-of-the-art of distributed programming, advancement of the state-of-the-art and paths forward to better application of theory in practice.\nThe main objectives of this workshop are the following: \n \n To review the state-of-the-art research in languages, models, and systems for distributed programming; \n To identify areas of critical need where research can advance the state of the art; \n To create a forum for discussion; \n To present open problems from practitioners with an aim towards motivating academic research on relevant problems faced by industry. \n\nIn the spirit of both ECOOP and Curry On, this workshop aims at favoring a multidisciplinary perspective by bringing together researchers, developers, and practitioners from both academia and industry. \n \n \n   \n      \n      \n    PMLDC is sponsored by the SyncFree project in the European Union Seventh Framework Programme and by the Google Cloud Platform.",
      "Day": "2016-07-17",
      "Items": [
        "pmldc-2016-the-consistency-babel",
        "pmldc-2016-data-centric-consistency-policies-a-programming-model-for-distributed-applications-with-tunable-consistency",
        "pmldc-2016-on-the-potential-of-event-sourcing-for-retroactive-actor-based-programming"
      ],
      "Key": "ac682a73-13e7-49e0-9813-f80ce064d0ba",
      "Location": "Montale",
      "Time": "16:00 - 17:30",
      "Title": "PMLDC: Session 3: Consistency",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Doctoral Symposium provides a forum for both early- and late-stage PhD students to present their research and get detailed feedback and advice. The main objectives of this event are: \n \n to allow PhD students to practice writing clearly and to present their research proposal effectively \n to get constructive feedback from other researchers \n to build bridges for potential research collaboration \n to contribute to the conference goals through interaction with other researchers at the main conference. \n\nEvent Format\nThis is a full-day event of interactive presentations. The day will start with a series of lightning talks when each PhD student gives an \u201celevator pitch\u201d of their research and continue with formal presentations by the PhD students and presentation discussions. Besides the formal presentations and discussions in sessions, there will be plenty of opportunities for informal interactions during breaks, lunch and (possibly) dinner. It is also planned that members of the academic panel will give short presentations and other research community members will give talks on a variety of topics related to PhD studies and doing research.",
      "Day": "2016-07-17",
      "Items": [
        "ecoop-2016-doctoral-symposium-welcome",
        "ecoop-2016-doctoral-symposium-elevator-pitches",
        "ecoop-2016-doctoral-symposium-research-proposal-live-programming-environments-for-reactive-mvu-applications"
      ],
      "Key": "d708ef1e-911f-4cc1-af74-92b08e46bb73",
      "Location": "Belli",
      "Time": "08:45 - 09:45",
      "Title": "Doctoral Symposium: Opening",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 1st Workshop on the Grace Programming Language \n   \n \n\nThe Grace Object-Oriented Educational Programming Language design project was started at ECOOP in Slovenia to design a new OO language for teaching and research. This workshop will allow the core project team to present their results back to the community: a specification, reference implementation, and experience teaching with Grace. The workshop will also allow the Grace project to gain feedback on the current design and implementation, and to plan for the future.",
      "Day": "2016-07-19",
      "Items": [
        "grace-2016-experience-teaching-with-grace",
        "grace-2016-recent-changes-and-language-design-issues-in-grace",
        "grace-2016-pyret"
      ],
      "Key": "a0debc20-2b81-4eeb-9341-c379904a03dd",
      "Location": "Saba",
      "Time": "10:05 - 12:25",
      "Title": "GRACE: Grace",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 5th Script To Program Evolution Workshop \n   \n \n\nIn recent years there has been increased interest in scripting languages, the migration from scripts to large programs, and the interplay between typed and untyped code. New languages such as TypeScript, Hack, Dart, Typed Racket, and GradualTalk, to name a few, have begun to explore the integration of dynamic and static typing within the same language.\nScripting languages are lightweight, dynamic programming languages designed to maximize productivity by offering high-level abstractions and reducing the syntactic overhead found in most system\u2019s languages. The rising popularity of scripting languages has many underlying causes: they allow partial execution of programs, permitting easy unit testing, interactive experimentation, and even demoing of software at all times; their support for powerful and flexible high-level datatypes and dynamic typing admits quick interim solutions that can later be revised; etc. In short, scripting languages optimize developement time rather than machine time, a good approach early in the software development life cycle.\nHowever, once the understanding of the system has reached a critical point and requirements have stabilized, scripting languages become less appealing. The compromises made to optimize development time make it harder to reason about program correctness, harder to do semantic-preserving refactorings, and harder to optimize execution speed. The lack of type information makes the code harder to navigate.\nThe concept of gradual typing has been proposed, in which the programmer controls which portions of the program are dynamically typed and which portions are statically typed. Over the last decade there has been significant progress on the theory and practice of gradual typing, but there are still many open questions and unexplored points in the design space.",
      "Day": "2016-07-17",
      "Items": [
        "stop-2016-invite-speaker-gilad-bracha",
        "stop-2016-beyond-types-extending-the-gradual-guarantee",
        "stop-2016-gradual-typing-for-delimited-continuations",
        "stop-2016-automating-gradual-typing"
      ],
      "Key": "8b552d73-c53d-4ea0-8e1c-50a4e158f662",
      "Location": "Alfieri",
      "Time": "10:05 - 12:25",
      "Title": "STOP: Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Doctoral Symposium provides a forum for both early- and late-stage PhD students to present their research and get detailed feedback and advice. The main objectives of this event are: \n \n to allow PhD students to practice writing clearly and to present their research proposal effectively \n to get constructive feedback from other researchers \n to build bridges for potential research collaboration \n to contribute to the conference goals through interaction with other researchers at the main conference. \n\nEvent Format\nThis is a full-day event of interactive presentations. The day will start with a series of lightning talks when each PhD student gives an \u201celevator pitch\u201d of their research and continue with formal presentations by the PhD students and presentation discussions. Besides the formal presentations and discussions in sessions, there will be plenty of opportunities for informal interactions during breaks, lunch and (possibly) dinner. It is also planned that members of the academic panel will give short presentations and other research community members will give talks on a variety of topics related to PhD studies and doing research.",
      "Day": "2016-07-17",
      "Items": [
        "ecoop-2016-doctoral-symposium-user-centric-static-analysis",
        "ecoop-2016-doctoral-symposium-domain-based-simulation-modelling-to-enable-continuous-testing-for-software-development-in-the-chemical-industry",
        "ecoop-2016-doctoral-symposium-coffee-break",
        "ecoop-2016-doctoral-symposium-language-design-for-validatable-information-system-specifications",
        "ecoop-2016-doctoral-symposium-compositional-and-mechanically-verified-program-analyzers"
      ],
      "Key": "cd1b2799-391c-40f9-9e37-423ebb10fdf2",
      "Location": "Belli",
      "Time": "10:05 - 12:25",
      "Title": "Doctoral Symposium: Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the18th Workshop onFormal Techniques for Java-like Programs \n   \n \n\nFormal techniques can help analyze programs, precisely describe program behavior, and verify program properties. Languages such as Java, C#, and Scala are interesting targets for formal techniques due to their ubiquity and large installed base, stable and well-defined interfaces and platforms, powerful (but also complex) libraries. The rising deployment in smart cards and mobile computing raises concerns about security and demands new methods to counter new possibilities for abuse.\nWork on formal techniques and tools and work on the formal underpinnings of programming languages themselves naturally complement each other. This workshop aims to bring together people working in both fields, on topics such as: \n \n Language semantics \n Specification techniques and languages \n Verification of program properties \n Verification logics \n Dynamic program analysis \n Static program analysis \n Type systems \n Security \n\nThe workshop welcomes a wide range of submissions, such as technical contributions, case studies, challenge proposals, and position papers. Just as the number and the feature set of Java-like languages is expanding, the term \u201cJava-like\u201d is also to be understood broadly.\nFor further details see call for papers.\nWith inquiries contact Vladimir Klebanov klebanov@kit.edu",
      "Chairs": ["vladimirklebanov"],
      "ChairsString": "Vladimir Klebanov",
      "Day": "2016-07-19",
      "Items": [
        "ftfjp-2016-tool-demonstration-the-verifast-verification-system-for-java-and-c",
        "ftfjp-2016-partial-solutions-to-verifythis-2016-challenges-2-and-3-using-verifast",
        "ftfjp-2016-coupling-catch-clauses-with-local-declarations",
        "ftfjp-2016-towards-modular-reasoning-for-context-oriented-programs",
        "ftfjp-2016-permission-and-authority-revisited-towards-a-formalization"
      ],
      "Key": "5bda9e5d-a647-4780-a408-ddc414a79899",
      "Location": "Belli",
      "Time": "16:00 - 18:30",
      "Title": "FTfJP: Session 4",
      "Type": "Accepted papers"
    },
    {
      "Abstract": "Welcome to the 5th Script To Program Evolution Workshop \n   \n \n\nIn recent years there has been increased interest in scripting languages, the migration from scripts to large programs, and the interplay between typed and untyped code. New languages such as TypeScript, Hack, Dart, Typed Racket, and GradualTalk, to name a few, have begun to explore the integration of dynamic and static typing within the same language.\nScripting languages are lightweight, dynamic programming languages designed to maximize productivity by offering high-level abstractions and reducing the syntactic overhead found in most system\u2019s languages. The rising popularity of scripting languages has many underlying causes: they allow partial execution of programs, permitting easy unit testing, interactive experimentation, and even demoing of software at all times; their support for powerful and flexible high-level datatypes and dynamic typing admits quick interim solutions that can later be revised; etc. In short, scripting languages optimize developement time rather than machine time, a good approach early in the software development life cycle.\nHowever, once the understanding of the system has reached a critical point and requirements have stabilized, scripting languages become less appealing. The compromises made to optimize development time make it harder to reason about program correctness, harder to do semantic-preserving refactorings, and harder to optimize execution speed. The lack of type information makes the code harder to navigate.\nThe concept of gradual typing has been proposed, in which the programmer controls which portions of the program are dynamically typed and which portions are statically typed. Over the last decade there has been significant progress on the theory and practice of gradual typing, but there are still many open questions and unexplored points in the design space.",
      "Day": "2016-07-17",
      "Items": [
        "stop-2016-opening-remarks",
        "stop-2016-invited-speaker-jeff-foster"
      ],
      "Key": "2b27a187-d454-4d21-9ef6-ad2dcf872083",
      "Location": "Alfieri",
      "Time": "08:45 - 09:45",
      "Title": "STOP: Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the18th Workshop onFormal Techniques for Java-like Programs \n   \n \n\nFormal techniques can help analyze programs, precisely describe program behavior, and verify program properties. Languages such as Java, C#, and Scala are interesting targets for formal techniques due to their ubiquity and large installed base, stable and well-defined interfaces and platforms, powerful (but also complex) libraries. The rising deployment in smart cards and mobile computing raises concerns about security and demands new methods to counter new possibilities for abuse.\nWork on formal techniques and tools and work on the formal underpinnings of programming languages themselves naturally complement each other. This workshop aims to bring together people working in both fields, on topics such as: \n \n Language semantics \n Specification techniques and languages \n Verification of program properties \n Verification logics \n Dynamic program analysis \n Static program analysis \n Type systems \n Security \n\nThe workshop welcomes a wide range of submissions, such as technical contributions, case studies, challenge proposals, and position papers. Just as the number and the feature set of Java-like languages is expanding, the term \u201cJava-like\u201d is also to be understood broadly.\nFor further details see call for papers.\nWith inquiries contact Vladimir Klebanov klebanov@kit.edu",
      "Chairs": ["vladimirklebanov"],
      "ChairsString": "Vladimir Klebanov",
      "Day": "2016-07-19",
      "Items": [
        "ftfjp-2016-opening",
        "ftfjp-2016-java-generics-are-turing-complete"
      ],
      "Key": "3f86d6dd-495e-4b53-a3b7-03e1457cc87b",
      "Location": "Belli",
      "Time": "10:05 - 11:00",
      "Title": "FTfJP: Invited talk",
      "Type": "Accepted papers"
    },
    {
      "Abstract": "Welcome to LIVE 2016, a workshop on live programming systems \n   \n \n\nSlack will be used during the workshop. If you plan to attend, please email smcdirm@microsoft.com so we can send you an invite. \nLive programming systems abandon the traditional edit-compile-run cycle in favor of fluid user experiences that encourages powerful new ways of \u201cthinking to code\u201d and enables programmers to see and understand their program executions. Programming today requires much mental effort with broken stuttering feedback loops: programmers carefully plan their abstractions, simulating program execution in their heads; the computer is merely a receptacle for the resulting code with a means of executing that code. Live programming aims to create a tighter more fluid feedback loop between the programmer and computer, allowing the computer to augment more of the programming process by, for example, allowing programmers to progressively mine abstractions from concrete examples and providing continuous feedback about how their code will execute. Meanwhile, under the radar of the PL community at-large, a nascent community has formed around the related idea of \u201clive coding\u201d\u2014live audiovisual performances which use computers and algorithms as instruments and include live audiences in their programming experiences. This workshop focuses on exploring notions and degrees of live programming as they relate to development, creative activities, learning, and performance. We are interested in methodologies, tools, demos, infrastructures, language designs, and questions that stimulate interest and understanding in live programming.\nFollowing up on the success of the first LIVE workshop at ICSE 2013, LIVE 2016 solicits high quality submissions on live programming and will discuss how to move forward with this topic to enable better programming experiences.",
      "Day": "2016-07-17",
      "Items": [
        "live-2016-live-programming-by-example-using-direct-manipulation-for-live-program-synthesis",
        "live-2016-live-literals",
        "live-2016-liveness-for-verification",
        "live-2016-discussion-b"
      ],
      "Key": "eccb3b0d-4ee8-4e8f-8a64-3f2898074163",
      "Location": "Foscolo",
      "Time": "13:50 - 15:20",
      "Title": "LIVE: Summer",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 1st Workshop on the Grace Programming Language \n   \n \n\nThe Grace Object-Oriented Educational Programming Language design project was started at ECOOP in Slovenia to design a new OO language for teaching and research. This workshop will allow the core project team to present their results back to the community: a specification, reference implementation, and experience teaching with Grace. The workshop will also allow the Grace project to gain feedback on the current design and implementation, and to plan for the future.",
      "Day": "2016-07-19",
      "Items": ["grace-2016-overview-of-the-grace-project-and-language"],
      "Key": "578c7e7b-c43c-4b12-986b-f14a05488e1c",
      "Location": "Saba",
      "Time": "08:45 - 09:45",
      "Title": "GRACE: Opening session",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Doctoral Symposium provides a forum for both early- and late-stage PhD students to present their research and get detailed feedback and advice. The main objectives of this event are: \n \n to allow PhD students to practice writing clearly and to present their research proposal effectively \n to get constructive feedback from other researchers \n to build bridges for potential research collaboration \n to contribute to the conference goals through interaction with other researchers at the main conference. \n\nEvent Format\nThis is a full-day event of interactive presentations. The day will start with a series of lightning talks when each PhD student gives an \u201celevator pitch\u201d of their research and continue with formal presentations by the PhD students and presentation discussions. Besides the formal presentations and discussions in sessions, there will be plenty of opportunities for informal interactions during breaks, lunch and (possibly) dinner. It is also planned that members of the academic panel will give short presentations and other research community members will give talks on a variety of topics related to PhD studies and doing research.",
      "Day": "2016-07-17",
      "Items": [
        "ecoop-2016-doctoral-symposium-how-to-get-your-ph-d-done",
        "ecoop-2016-doctoral-symposium-concept-parameters-as-a-new-mechanism-of-generic-programming-for-c-language",
        "ecoop-2016-doctoral-symposium-exploring-optional-security-typing"
      ],
      "Key": "78a5c1a1-6ae7-4bfc-ad70-e7da69d33859",
      "Location": "Belli",
      "Time": "13:50 - 15:20",
      "Title": "Doctoral Symposium: Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 1st Workshop on the Grace Programming Language \n   \n \n\nThe Grace Object-Oriented Educational Programming Language design project was started at ECOOP in Slovenia to design a new OO language for teaching and research. This workshop will allow the core project team to present their results back to the community: a specification, reference implementation, and experience teaching with Grace. The workshop will also allow the Grace project to gain feedback on the current design and implementation, and to plan for the future.",
      "Day": "2016-07-19",
      "Items": ["grace-2016-discussion-next-steps-with-grace"],
      "Key": "aef19999-e951-4a93-9ada-4882fbb42eab",
      "Location": "Saba",
      "Time": "16:00 - 17:30",
      "Title": "GRACE: Discussion",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Whether you are programming a rich web application in JavaScript that mutates state in the client\u2019s browser, or you are building a massively deployed mobile application that will operate with client state at the device, it\u2019s undeniable that you are building a distributed system!\nTwo major challenges of programming distributed systems are concurrency and partial failure. Concurrency of operations can introduce accidental nondeterminism: computations may result in different outcomes with the same inputs given scheduling differences in the underlying system unless a synchronization mechanism is used to enforce some order. Synchronization is typically expensive, and reduces the efficiency of user applications. Partial failure, or the failure of one or more components in a distributed system at one time, introduces the challenge of knowing, when an operation fails, which components of the operation completed successfully. To solve these problems in practice on an unreliable, asynchronous network, atomic commit protocols and timeouts as failure detection are typically used. \nBecause of these challenges, early approaches to providing programming abstractions for distributed computing that ignored them were inherently misguided: the canonical example being the Remote Procedure Call, still widely deployed in industry.\nThe goal of this workshop is to discuss new approaches to distributed programming that provide efficient execution and the elimination of accidental nondeterminism resulting from concurrency and partial failure. It will bring together both practitioners and theoreticians from many disciplines: database theory, distributed systems, systems programming, programming languages, data-centric programming, web application development, and verification, to discuss the state-of-the-art of distributed programming, advancement of the state-of-the-art and paths forward to better application of theory in practice.\nThe main objectives of this workshop are the following: \n \n To review the state-of-the-art research in languages, models, and systems for distributed programming; \n To identify areas of critical need where research can advance the state of the art; \n To create a forum for discussion; \n To present open problems from practitioners with an aim towards motivating academic research on relevant problems faced by industry. \n\nIn the spirit of both ECOOP and Curry On, this workshop aims at favoring a multidisciplinary perspective by bringing together researchers, developers, and practitioners from both academia and industry. \n \n \n   \n      \n      \n    PMLDC is sponsored by the SyncFree project in the European Union Seventh Framework Programme and by the Google Cloud Platform.",
      "Day": "2016-07-17",
      "Items": [
        "pmldc-2016-opening-remark",
        "pmldc-2016-we-are-all-distributed-system-engineers"
      ],
      "Key": "093b7d89-e214-446a-83fd-b8d78452feb7",
      "Location": "Montale",
      "Time": "08:45 - 09:45",
      "Title": "PMLDC: Invited talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Doctoral Symposium provides a forum for both early- and late-stage PhD students to present their research and get detailed feedback and advice. The main objectives of this event are: \n \n to allow PhD students to practice writing clearly and to present their research proposal effectively \n to get constructive feedback from other researchers \n to build bridges for potential research collaboration \n to contribute to the conference goals through interaction with other researchers at the main conference. \n\nEvent Format\nThis is a full-day event of interactive presentations. The day will start with a series of lightning talks when each PhD student gives an \u201celevator pitch\u201d of their research and continue with formal presentations by the PhD students and presentation discussions. Besides the formal presentations and discussions in sessions, there will be plenty of opportunities for informal interactions during breaks, lunch and (possibly) dinner. It is also planned that members of the academic panel will give short presentations and other research community members will give talks on a variety of topics related to PhD studies and doing research.",
      "Day": "2016-07-17",
      "Items": [
        "ecoop-2016-doctoral-symposium-sulong-memory-safe-and-efficient-execution-of-llvm-based-languages",
        "ecoop-2016-doctoral-symposium-papers-vs-artefacts",
        "ecoop-2016-doctoral-symposium-phd-reflections"
      ],
      "Key": "e00c1be8-7f21-43ac-ac4c-a35a0c904298",
      "Location": "Belli",
      "Time": "16:00 - 17:30",
      "Title": "Doctoral Symposium: Session 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to LIVE 2016, a workshop on live programming systems \n   \n \n\nSlack will be used during the workshop. If you plan to attend, please email smcdirm@microsoft.com so we can send you an invite. \nLive programming systems abandon the traditional edit-compile-run cycle in favor of fluid user experiences that encourages powerful new ways of \u201cthinking to code\u201d and enables programmers to see and understand their program executions. Programming today requires much mental effort with broken stuttering feedback loops: programmers carefully plan their abstractions, simulating program execution in their heads; the computer is merely a receptacle for the resulting code with a means of executing that code. Live programming aims to create a tighter more fluid feedback loop between the programmer and computer, allowing the computer to augment more of the programming process by, for example, allowing programmers to progressively mine abstractions from concrete examples and providing continuous feedback about how their code will execute. Meanwhile, under the radar of the PL community at-large, a nascent community has formed around the related idea of \u201clive coding\u201d\u2014live audiovisual performances which use computers and algorithms as instruments and include live audiences in their programming experiences. This workshop focuses on exploring notions and degrees of live programming as they relate to development, creative activities, learning, and performance. We are interested in methodologies, tools, demos, infrastructures, language designs, and questions that stimulate interest and understanding in live programming.\nFollowing up on the success of the first LIVE workshop at ICSE 2013, LIVE 2016 solicits high quality submissions on live programming and will discuss how to move forward with this topic to enable better programming experiences.",
      "Day": "2016-07-17",
      "Items": [
        "live-2016-the-talk",
        "live-2016-paper-4-title-live-language-development",
        "live-2016-live-programming-with-code-portals",
        "live-2016-live-end-user-programming-a-demo-manifesto",
        "live-2016-discussion-a"
      ],
      "Key": "1b9c1ab2-50bb-40a9-bb54-d962ef52fc86",
      "Location": "Foscolo",
      "Time": "10:05 - 12:25",
      "Title": "LIVE: Spring",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 1st Workshop on the Grace Programming Language \n   \n \n\nThe Grace Object-Oriented Educational Programming Language design project was started at ECOOP in Slovenia to design a new OO language for teaching and research. This workshop will allow the core project team to present their results back to the community: a specification, reference implementation, and experience teaching with Grace. The workshop will also allow the Grace project to gain feedback on the current design and implementation, and to plan for the future.",
      "Day": "2016-07-19",
      "Items": [
        "grace-2016-spoofax-grace",
        "grace-2016-traitorous-traits",
        "grace-2016-tooling-matters-why-grace-needs-a-good-ide"
      ],
      "Key": "26b93621-3aa7-4559-b69a-254597dadbc2",
      "Location": "Saba",
      "Time": "13:50 - 15:20",
      "Title": "GRACE: Contributed Papers",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the18th Workshop onFormal Techniques for Java-like Programs \n   \n \n\nFormal techniques can help analyze programs, precisely describe program behavior, and verify program properties. Languages such as Java, C#, and Scala are interesting targets for formal techniques due to their ubiquity and large installed base, stable and well-defined interfaces and platforms, powerful (but also complex) libraries. The rising deployment in smart cards and mobile computing raises concerns about security and demands new methods to counter new possibilities for abuse.\nWork on formal techniques and tools and work on the formal underpinnings of programming languages themselves naturally complement each other. This workshop aims to bring together people working in both fields, on topics such as: \n \n Language semantics \n Specification techniques and languages \n Verification of program properties \n Verification logics \n Dynamic program analysis \n Static program analysis \n Type systems \n Security \n\nThe workshop welcomes a wide range of submissions, such as technical contributions, case studies, challenge proposals, and position papers. Just as the number and the feature set of Java-like languages is expanding, the term \u201cJava-like\u201d is also to be understood broadly.\nFor further details see call for papers.\nWith inquiries contact Vladimir Klebanov klebanov@kit.edu",
      "Chairs": ["davideancona"],
      "ChairsString": "Davide Ancona",
      "Day": "2016-07-19",
      "Items": [
        "ftfjp-2016-generating-concurrency-checks-automatically",
        "ftfjp-2016-an-extended-buffered-memory-model-with-full-reorderings",
        "ftfjp-2016-towards-a-model-of-corecursion-with-default"
      ],
      "Key": "d36c1f68-e483-4ba7-82ed-82e1b051d459",
      "Location": "Belli",
      "Time": "13:50 - 15:20",
      "Title": "FTfJP: Session 3",
      "Type": "Accepted papers"
    },
    {
      "Abstract": "Welcome to the18th Workshop onFormal Techniques for Java-like Programs \n   \n \n\nFormal techniques can help analyze programs, precisely describe program behavior, and verify program properties. Languages such as Java, C#, and Scala are interesting targets for formal techniques due to their ubiquity and large installed base, stable and well-defined interfaces and platforms, powerful (but also complex) libraries. The rising deployment in smart cards and mobile computing raises concerns about security and demands new methods to counter new possibilities for abuse.\nWork on formal techniques and tools and work on the formal underpinnings of programming languages themselves naturally complement each other. This workshop aims to bring together people working in both fields, on topics such as: \n \n Language semantics \n Specification techniques and languages \n Verification of program properties \n Verification logics \n Dynamic program analysis \n Static program analysis \n Type systems \n Security \n\nThe workshop welcomes a wide range of submissions, such as technical contributions, case studies, challenge proposals, and position papers. Just as the number and the feature set of Java-like languages is expanding, the term \u201cJava-like\u201d is also to be understood broadly.\nFor further details see call for papers.\nWith inquiries contact Vladimir Klebanov klebanov@kit.edu",
      "Chairs": ["delphinedemange"],
      "ChairsString": "Delphine Demange",
      "Day": "2016-07-19",
      "Items": [
        "ftfjp-2016-a-mechanical-soundness-proof-for-subtyping-over-recursive-types",
        "ftfjp-2016-a-formal-account-of-ssa-in-java-like-languages",
        "ftfjp-2016-a-note-on-the-soundness-of-difference-propagation"
      ],
      "Key": "3bf0b7c6-3e3f-4226-bbdf-d5fedfc542dd",
      "Location": "Belli",
      "Time": "11:00 - 12:25",
      "Title": "FTfJP: Session 2",
      "Type": "Accepted papers"
    },
    {
      "Abstract": "Welcome to LIVE 2016, a workshop on live programming systems \n   \n \n\nSlack will be used during the workshop. If you plan to attend, please email smcdirm@microsoft.com so we can send you an invite. \nLive programming systems abandon the traditional edit-compile-run cycle in favor of fluid user experiences that encourages powerful new ways of \u201cthinking to code\u201d and enables programmers to see and understand their program executions. Programming today requires much mental effort with broken stuttering feedback loops: programmers carefully plan their abstractions, simulating program execution in their heads; the computer is merely a receptacle for the resulting code with a means of executing that code. Live programming aims to create a tighter more fluid feedback loop between the programmer and computer, allowing the computer to augment more of the programming process by, for example, allowing programmers to progressively mine abstractions from concrete examples and providing continuous feedback about how their code will execute. Meanwhile, under the radar of the PL community at-large, a nascent community has formed around the related idea of \u201clive coding\u201d\u2014live audiovisual performances which use computers and algorithms as instruments and include live audiences in their programming experiences. This workshop focuses on exploring notions and degrees of live programming as they relate to development, creative activities, learning, and performance. We are interested in methodologies, tools, demos, infrastructures, language designs, and questions that stimulate interest and understanding in live programming.\nFollowing up on the success of the first LIVE workshop at ICSE 2013, LIVE 2016 solicits high quality submissions on live programming and will discuss how to move forward with this topic to enable better programming experiences.",
      "Day": "2016-07-17",
      "Items": ["live-2016-the-promise-of-live-programming"],
      "Key": "2a2dd652-0b07-4621-b281-125a83d765d4",
      "Location": "Foscolo",
      "Time": "08:45 - 09:45",
      "Title": "LIVE: Winter",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Whether you are programming a rich web application in JavaScript that mutates state in the client\u2019s browser, or you are building a massively deployed mobile application that will operate with client state at the device, it\u2019s undeniable that you are building a distributed system!\nTwo major challenges of programming distributed systems are concurrency and partial failure. Concurrency of operations can introduce accidental nondeterminism: computations may result in different outcomes with the same inputs given scheduling differences in the underlying system unless a synchronization mechanism is used to enforce some order. Synchronization is typically expensive, and reduces the efficiency of user applications. Partial failure, or the failure of one or more components in a distributed system at one time, introduces the challenge of knowing, when an operation fails, which components of the operation completed successfully. To solve these problems in practice on an unreliable, asynchronous network, atomic commit protocols and timeouts as failure detection are typically used. \nBecause of these challenges, early approaches to providing programming abstractions for distributed computing that ignored them were inherently misguided: the canonical example being the Remote Procedure Call, still widely deployed in industry.\nThe goal of this workshop is to discuss new approaches to distributed programming that provide efficient execution and the elimination of accidental nondeterminism resulting from concurrency and partial failure. It will bring together both practitioners and theoreticians from many disciplines: database theory, distributed systems, systems programming, programming languages, data-centric programming, web application development, and verification, to discuss the state-of-the-art of distributed programming, advancement of the state-of-the-art and paths forward to better application of theory in practice.\nThe main objectives of this workshop are the following: \n \n To review the state-of-the-art research in languages, models, and systems for distributed programming; \n To identify areas of critical need where research can advance the state of the art; \n To create a forum for discussion; \n To present open problems from practitioners with an aim towards motivating academic research on relevant problems faced by industry. \n\nIn the spirit of both ECOOP and Curry On, this workshop aims at favoring a multidisciplinary perspective by bringing together researchers, developers, and practitioners from both academia and industry. \n \n \n   \n      \n      \n    PMLDC is sponsored by the SyncFree project in the European Union Seventh Framework Programme and by the Google Cloud Platform.",
      "Day": "2016-07-17",
      "Items": [
        "pmldc-2016-tracking-the-elephants-in-the-system",
        "pmldc-2016-join-decompositions-for-efficient-synchronization-of-crdts-after-a-network-partition",
        "pmldc-2016-integration-challenges-of-pure-operation-based-crdts-in-redis"
      ],
      "Key": "7d450647-bde9-410e-ba3b-26dea59060d6",
      "Location": "Montale",
      "Time": "13:50 - 15:20",
      "Title": "PMLDC: Session 2: Conflict-Free Replicated Data Types",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 5th Script To Program Evolution Workshop \n   \n \n\nIn recent years there has been increased interest in scripting languages, the migration from scripts to large programs, and the interplay between typed and untyped code. New languages such as TypeScript, Hack, Dart, Typed Racket, and GradualTalk, to name a few, have begun to explore the integration of dynamic and static typing within the same language.\nScripting languages are lightweight, dynamic programming languages designed to maximize productivity by offering high-level abstractions and reducing the syntactic overhead found in most system\u2019s languages. The rising popularity of scripting languages has many underlying causes: they allow partial execution of programs, permitting easy unit testing, interactive experimentation, and even demoing of software at all times; their support for powerful and flexible high-level datatypes and dynamic typing admits quick interim solutions that can later be revised; etc. In short, scripting languages optimize developement time rather than machine time, a good approach early in the software development life cycle.\nHowever, once the understanding of the system has reached a critical point and requirements have stabilized, scripting languages become less appealing. The compromises made to optimize development time make it harder to reason about program correctness, harder to do semantic-preserving refactorings, and harder to optimize execution speed. The lack of type information makes the code harder to navigate.\nThe concept of gradual typing has been proposed, in which the programmer controls which portions of the program are dynamically typed and which portions are statically typed. Over the last decade there has been significant progress on the theory and practice of gradual typing, but there are still many open questions and unexplored points in the design space.",
      "Day": "2016-07-17",
      "Items": [
        "stop-2016-invite-speaker-jan-vitek",
        "stop-2016-a-systematic-performance-evaluation-of-gradually-typed-functions-and-references"
      ],
      "Key": "e90631b4-db97-4f83-9832-ee7eba7bb283",
      "Location": "Alfieri",
      "Time": "13:50 - 15:20",
      "Title": "STOP: Session 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 5th Script To Program Evolution Workshop \n   \n \n\nIn recent years there has been increased interest in scripting languages, the migration from scripts to large programs, and the interplay between typed and untyped code. New languages such as TypeScript, Hack, Dart, Typed Racket, and GradualTalk, to name a few, have begun to explore the integration of dynamic and static typing within the same language.\nScripting languages are lightweight, dynamic programming languages designed to maximize productivity by offering high-level abstractions and reducing the syntactic overhead found in most system\u2019s languages. The rising popularity of scripting languages has many underlying causes: they allow partial execution of programs, permitting easy unit testing, interactive experimentation, and even demoing of software at all times; their support for powerful and flexible high-level datatypes and dynamic typing admits quick interim solutions that can later be revised; etc. In short, scripting languages optimize developement time rather than machine time, a good approach early in the software development life cycle.\nHowever, once the understanding of the system has reached a critical point and requirements have stabilized, scripting languages become less appealing. The compromises made to optimize development time make it harder to reason about program correctness, harder to do semantic-preserving refactorings, and harder to optimize execution speed. The lack of type information makes the code harder to navigate.\nThe concept of gradual typing has been proposed, in which the programmer controls which portions of the program are dynamically typed and which portions are statically typed. Over the last decade there has been significant progress on the theory and practice of gradual typing, but there are still many open questions and unexplored points in the design space.",
      "Day": "2016-07-17",
      "Items": [
        "stop-2016-from-optional-to-gradual-typing-via-transient-checks",
        "stop-2016-closing-remarks"
      ],
      "Key": "f2ebcae6-2f0c-418b-b918-c32b8edead6e",
      "Location": "Alfieri",
      "Time": "16:00 - 16:40",
      "Title": "STOP: Session 4",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 1st Edition of the Programming Experience Workshop \n   \n \n\n Note: Due to its format this workshop will be invitation-based. To be invited, please send an e-mail to the organizers. \nImagine a software development task. Some sort of requirements and specification including performance goals and perhaps a platform and programming language. A group of developers head into a vast workroom.\n&lt;crossfade to developers exiting the vast workroom&gt;\nThe Programming Experience Workshop is about what happens in that room when one or a couple of programmers sit down in front of computers and produce code, especially when it\u2019s exploratory programming. Do they create text that is transformed into running behavior (the old way), or do they operate on behavior directly (\u201cliveness\u201d); are they exploring the live domain to understand the true nature of the requirements; are they like authors creating new worlds; does visualization matter; is the experience immediate, immersive, vivid and continuous; do fluency, literacy, and learning matter; do they build tools, meta-tools; are they creating languages to express new concepts quickly and easily; and curiously, is joy relevant to the experience?\nCorrectness, performance, standard tools, foundations, and text-as-program are important traditional research areas, but the experience of programming and how to improve and evolve it are the focus of this workshop. \n(Flyer) \n\nhttp://programming-experience.org/",
      "Chairs": [
        "roberthirschfeld",
        "hidehikomasuhara",
        "richardpgabriel"
      ],
      "ChairsString": "Robert Hirschfeld, Hidehiko Masuhara and Richard P. Gabriel",
      "Day": "2016-07-18",
      "Key": "f2ce916b-fd53-4856-a793-d58826aa0f94",
      "Location": "Belli",
      "Time": "16:00 - 17:30",
      "Title": "PX: Session 4",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 1st Edition of the Programming Experience Workshop \n   \n \n\n Note: Due to its format this workshop will be invitation-based. To be invited, please send an e-mail to the organizers. \nImagine a software development task. Some sort of requirements and specification including performance goals and perhaps a platform and programming language. A group of developers head into a vast workroom.\n&lt;crossfade to developers exiting the vast workroom&gt;\nThe Programming Experience Workshop is about what happens in that room when one or a couple of programmers sit down in front of computers and produce code, especially when it\u2019s exploratory programming. Do they create text that is transformed into running behavior (the old way), or do they operate on behavior directly (\u201cliveness\u201d); are they exploring the live domain to understand the true nature of the requirements; are they like authors creating new worlds; does visualization matter; is the experience immediate, immersive, vivid and continuous; do fluency, literacy, and learning matter; do they build tools, meta-tools; are they creating languages to express new concepts quickly and easily; and curiously, is joy relevant to the experience?\nCorrectness, performance, standard tools, foundations, and text-as-program are important traditional research areas, but the experience of programming and how to improve and evolve it are the focus of this workshop. \n(Flyer) \n\nhttp://programming-experience.org/",
      "Chairs": [
        "hidehikomasuhara",
        "richardpgabriel",
        "roberthirschfeld"
      ],
      "ChairsString": "Hidehiko Masuhara, Richard P. Gabriel and Robert Hirschfeld",
      "Day": "2016-07-18",
      "Key": "18655ab5-f529-4c92-8f63-6b65efd92013",
      "Location": "Belli",
      "Time": "10:05 - 12:30",
      "Title": "PX: Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 1st Edition of the Programming Experience Workshop \n   \n \n\n Note: Due to its format this workshop will be invitation-based. To be invited, please send an e-mail to the organizers. \nImagine a software development task. Some sort of requirements and specification including performance goals and perhaps a platform and programming language. A group of developers head into a vast workroom.\n&lt;crossfade to developers exiting the vast workroom&gt;\nThe Programming Experience Workshop is about what happens in that room when one or a couple of programmers sit down in front of computers and produce code, especially when it\u2019s exploratory programming. Do they create text that is transformed into running behavior (the old way), or do they operate on behavior directly (\u201cliveness\u201d); are they exploring the live domain to understand the true nature of the requirements; are they like authors creating new worlds; does visualization matter; is the experience immediate, immersive, vivid and continuous; do fluency, literacy, and learning matter; do they build tools, meta-tools; are they creating languages to express new concepts quickly and easily; and curiously, is joy relevant to the experience?\nCorrectness, performance, standard tools, foundations, and text-as-program are important traditional research areas, but the experience of programming and how to improve and evolve it are the focus of this workshop. \n(Flyer) \n\nhttp://programming-experience.org/",
      "Chairs": [
        "roberthirschfeld",
        "richardpgabriel",
        "hidehikomasuhara"
      ],
      "ChairsString": "Robert Hirschfeld, Richard P. Gabriel and Hidehiko Masuhara",
      "Day": "2016-07-18",
      "Key": "6dc9ea15-2bea-4ede-8c5c-23e2e2c14451",
      "Location": "Belli",
      "Time": "13:50 - 15:20",
      "Title": "PX: Session 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 1st Edition of the Programming Experience Workshop \n   \n \n\n Note: Due to its format this workshop will be invitation-based. To be invited, please send an e-mail to the organizers. \nImagine a software development task. Some sort of requirements and specification including performance goals and perhaps a platform and programming language. A group of developers head into a vast workroom.\n&lt;crossfade to developers exiting the vast workroom&gt;\nThe Programming Experience Workshop is about what happens in that room when one or a couple of programmers sit down in front of computers and produce code, especially when it\u2019s exploratory programming. Do they create text that is transformed into running behavior (the old way), or do they operate on behavior directly (\u201cliveness\u201d); are they exploring the live domain to understand the true nature of the requirements; are they like authors creating new worlds; does visualization matter; is the experience immediate, immersive, vivid and continuous; do fluency, literacy, and learning matter; do they build tools, meta-tools; are they creating languages to express new concepts quickly and easily; and curiously, is joy relevant to the experience?\nCorrectness, performance, standard tools, foundations, and text-as-program are important traditional research areas, but the experience of programming and how to improve and evolve it are the focus of this workshop. \n(Flyer) \n\nhttp://programming-experience.org/",
      "Chairs": [
        "hidehikomasuhara",
        "roberthirschfeld",
        "richardpgabriel"
      ],
      "ChairsString": "Hidehiko Masuhara, Robert Hirschfeld and Richard P. Gabriel",
      "Day": "2016-07-18",
      "Key": "5a58438f-bd74-4481-b771-251f938fb0c1",
      "Location": "Belli",
      "Time": "08:45 - 09:45",
      "Title": "PX: Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 11th Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems Workshop \n   \n \n\nThe ICOOOLPS workshop series brings together researchers and practitioners working in the field of language implementation and optimization. The goal of the workshop is to discuss emerging problems and research directions as well as new solutions to classic performance challenges.\nThe topics of interest for the workshop include techniques for the implementation and optimization of a wide range of languages including but not limited to object-oriented ones. Furthermore, meta-compilation techniques or language-agnostic approaches are welcome, too.\nThis workshop welcomes the presentation and discussion of new ideas and emerging problems that give a chance for interaction and exchange. More mature work is welcome as part of a mini-conference format, too. We aim to interleave interactive brainstorming and demonstration sessions between the formal presentations to foster an active exchange of ideas.\nFor updates, please follow us on Twitter @ICOOOLPS.",
      "Chairs": ["tomaskalibera"],
      "ChairsString": "Tomas Kalibera",
      "Day": "2016-07-18",
      "Items": [
        "icooolps-2016-invited-talk-1-tba-",
        "icooolps-2016-the-performance-of-object-encodings-in-javascript",
        "icooolps-2016-virtual-machine-warm-up-blows-hot-and-cold",
        "icooolps-2016-discussions"
      ],
      "Key": "073f0c4a-ad45-408c-b151-ad176817c86b",
      "Location": "Alfieri",
      "Time": "10:05 - 12:25",
      "Title": "ICOOOLPS: Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 11th Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems Workshop \n   \n \n\nThe ICOOOLPS workshop series brings together researchers and practitioners working in the field of language implementation and optimization. The goal of the workshop is to discuss emerging problems and research directions as well as new solutions to classic performance challenges.\nThe topics of interest for the workshop include techniques for the implementation and optimization of a wide range of languages including but not limited to object-oriented ones. Furthermore, meta-compilation techniques or language-agnostic approaches are welcome, too.\nThis workshop welcomes the presentation and discussion of new ideas and emerging problems that give a chance for interaction and exchange. More mature work is welcome as part of a mini-conference format, too. We aim to interleave interactive brainstorming and demonstration sessions between the formal presentations to foster an active exchange of ideas.\nFor updates, please follow us on Twitter @ICOOOLPS.",
      "Chairs": ["ericjul"],
      "ChairsString": "Eric Jul",
      "Day": "2016-07-18",
      "Items": [
        "icooolps-2016-trufflereloader-a-low-overhead-language-neutral-reloader",
        "icooolps-2016-sulong-execution-of-llvm-based-languages-on-the-jvm",
        "icooolps-2016-efficient-profiling-of-actor-based-applications-in-parallel-and-distributed-systems"
      ],
      "Key": "782143bf-1301-4c60-b47f-301f3b94ffc3",
      "Location": "Alfieri",
      "Time": "16:00 - 17:30",
      "Title": "ICOOOLPS: Session 4",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 11th Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems Workshop \n   \n \n\nThe ICOOOLPS workshop series brings together researchers and practitioners working in the field of language implementation and optimization. The goal of the workshop is to discuss emerging problems and research directions as well as new solutions to classic performance challenges.\nThe topics of interest for the workshop include techniques for the implementation and optimization of a wide range of languages including but not limited to object-oriented ones. Furthermore, meta-compilation techniques or language-agnostic approaches are welcome, too.\nThis workshop welcomes the presentation and discussion of new ideas and emerging problems that give a chance for interaction and exchange. More mature work is welcome as part of a mini-conference format, too. We aim to interleave interactive brainstorming and demonstration sessions between the formal presentations to foster an active exchange of ideas.\nFor updates, please follow us on Twitter @ICOOOLPS.",
      "Chairs": ["eddbarrett"],
      "ChairsString": "Edd Barrett",
      "Day": "2016-07-18",
      "Items": [
        "icooolps-2016-invited-talk-2-tba-",
        "icooolps-2016-mhdes-deduplicate-method-handle-graph-for-efficient-dynamic-jvm-language-implementations"
      ],
      "Key": "6c5b6fbb-593a-4a40-a2c0-bbd1747a84df",
      "Location": "Alfieri",
      "Time": "13:50 - 15:20",
      "Title": "ICOOOLPS: Session 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 11th Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems Workshop \n   \n \n\nThe ICOOOLPS workshop series brings together researchers and practitioners working in the field of language implementation and optimization. The goal of the workshop is to discuss emerging problems and research directions as well as new solutions to classic performance challenges.\nThe topics of interest for the workshop include techniques for the implementation and optimization of a wide range of languages including but not limited to object-oriented ones. Furthermore, meta-compilation techniques or language-agnostic approaches are welcome, too.\nThis workshop welcomes the presentation and discussion of new ideas and emerging problems that give a chance for interaction and exchange. More mature work is welcome as part of a mini-conference format, too. We aim to interleave interactive brainstorming and demonstration sessions between the formal presentations to foster an active exchange of ideas.\nFor updates, please follow us on Twitter @ICOOOLPS.",
      "Chairs": ["stefanmarr"],
      "ChairsString": "Stefan Marr",
      "Day": "2016-07-18",
      "Items": [
        "icooolps-2016-building-object-oriented-programs-out-of-pieces",
        "icooolps-2016-source-language-representation-of-function-summaries-in-static-analysis"
      ],
      "Key": "ef6480cf-172a-46f8-9e52-58f8cd394976",
      "Location": "Alfieri",
      "Time": "08:45 - 09:45",
      "Title": "ICOOOLPS: Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Welcome to the 11th Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems Workshop \n   \n \n\nThe ICOOOLPS workshop series brings together researchers and practitioners working in the field of language implementation and optimization. The goal of the workshop is to discuss emerging problems and research directions as well as new solutions to classic performance challenges.\nThe topics of interest for the workshop include techniques for the implementation and optimization of a wide range of languages including but not limited to object-oriented ones. Furthermore, meta-compilation techniques or language-agnostic approaches are welcome, too.\nThis workshop welcomes the presentation and discussion of new ideas and emerging problems that give a chance for interaction and exchange. More mature work is welcome as part of a mini-conference format, too. We aim to interleave interactive brainstorming and demonstration sessions between the formal presentations to foster an active exchange of ideas.\nFor updates, please follow us on Twitter @ICOOOLPS.",
      "Chairs": ["stefanmarr"],
      "ChairsString": "Stefan Marr",
      "Day": "2016-07-18",
      "Items": [
        "icooolps-2016-demo-of-docking-enabling-language-based-dynamic-coupling",
        "icooolps-2016-discussions-and-wrap-up"
      ],
      "Key": "e316b9c1-9718-49c5-838e-fa07f1f6be8e",
      "Location": "Alfieri",
      "Time": "17:40 - 18:30",
      "Title": "ICOOOLPS: Session 5",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The ECOOP Summer School aims to encourage graduate students and senior undergraduate students to pursue careers in research on topics related to the ECOOP conference. The School brings together leading researchers in programming languages, object-orientation, and teaching from academia and industry to provide technical sessions on important research and mentoring sessions on how to prepare for a research career. The School aims to engage students in a process of imagining how they might contribute to our research community. We especially encourage women and under-represented minority students to attend.\nFrom this year the Summer School lectures are restricted to registered students.\nProgram\nStudents who register to the summer school will be able to attend the Doctoral Symposium on Sunday July 17th, a special introductory session to research in the field will be held on Monday 18th, and four Summer School lectures will be spread throughout the week. Each lecture is 90 minutes long and is free to all registered participants. The lectures run concurrently to the ECOOP technical session. (Students will get preferential seating, if space is an issue.) Each attending student will be assigned a senior mentor, another student who is already active in research, the mentor will help students navigate the conference.\nApplications\nThe ECOOP organizers have secured limited funding to help students attend the event. Please register soon and include a budget that describes how much you would need to be able to come to the summer school. Registration form. We encourage all the students applying to the summer school to register for Student Volunteer positions. [Applications are closed]",
      "Chairs": ["janvitek"],
      "ChairsString": "Jan Vitek",
      "Day": "2016-07-20",
      "Items": ["summer-school-building-a-research-program-for-scripting-languages"],
      "Key": "1ecf5685-bbbe-4d93-99f3-68a36d4a3fcf",
      "Location": "Leopardi",
      "Time": "13:30 - 15:00",
      "Title": "Summer School: Lecture 2a",
      "Type": "Lectures"
    },
    {
      "Abstract": "The ECOOP Summer School aims to encourage graduate students and senior undergraduate students to pursue careers in research on topics related to the ECOOP conference. The School brings together leading researchers in programming languages, object-orientation, and teaching from academia and industry to provide technical sessions on important research and mentoring sessions on how to prepare for a research career. The School aims to engage students in a process of imagining how they might contribute to our research community. We especially encourage women and under-represented minority students to attend.\nFrom this year the Summer School lectures are restricted to registered students.\nProgram\nStudents who register to the summer school will be able to attend the Doctoral Symposium on Sunday July 17th, a special introductory session to research in the field will be held on Monday 18th, and four Summer School lectures will be spread throughout the week. Each lecture is 90 minutes long and is free to all registered participants. The lectures run concurrently to the ECOOP technical session. (Students will get preferential seating, if space is an issue.) Each attending student will be assigned a senior mentor, another student who is already active in research, the mentor will help students navigate the conference.\nApplications\nThe ECOOP organizers have secured limited funding to help students attend the event. Please register soon and include a budget that describes how much you would need to be able to come to the summer school. Registration form. We encourage all the students applying to the summer school to register for Student Volunteer positions. [Applications are closed]",
      "Chairs": ["janvitek"],
      "ChairsString": "Jan Vitek",
      "Day": "2016-07-20",
      "Items": ["summer-school-gradual-typing"],
      "Key": "5d5a39f3-cba9-4418-b3ae-07d1021266d1",
      "Location": "Leopardi",
      "Time": "10:30 - 12:00",
      "Title": "Summer School: Lecture 1",
      "Type": "Lectures"
    },
    {
      "Abstract": "The ECOOP Summer School aims to encourage graduate students and senior undergraduate students to pursue careers in research on topics related to the ECOOP conference. The School brings together leading researchers in programming languages, object-orientation, and teaching from academia and industry to provide technical sessions on important research and mentoring sessions on how to prepare for a research career. The School aims to engage students in a process of imagining how they might contribute to our research community. We especially encourage women and under-represented minority students to attend.\nFrom this year the Summer School lectures are restricted to registered students.\nProgram\nStudents who register to the summer school will be able to attend the Doctoral Symposium on Sunday July 17th, a special introductory session to research in the field will be held on Monday 18th, and four Summer School lectures will be spread throughout the week. Each lecture is 90 minutes long and is free to all registered participants. The lectures run concurrently to the ECOOP technical session. (Students will get preferential seating, if space is an issue.) Each attending student will be assigned a senior mentor, another student who is already active in research, the mentor will help students navigate the conference.\nApplications\nThe ECOOP organizers have secured limited funding to help students attend the event. Please register soon and include a budget that describes how much you would need to be able to come to the summer school. Registration form. We encourage all the students applying to the summer school to register for Student Volunteer positions. [Applications are closed]",
      "Chairs": ["janvitek"],
      "ChairsString": "Jan Vitek",
      "Day": "2016-07-21",
      "Items": ["summer-school-gradual-type-system"],
      "Key": "445ff145-874f-4d4b-8786-d979be5aecf5",
      "Location": "Leopardi",
      "Time": "10:30 - 12:00",
      "Title": "Summer School: Lecture 3",
      "Type": "Lectures"
    },
    {
      "Abstract": "The ECOOP Summer School aims to encourage graduate students and senior undergraduate students to pursue careers in research on topics related to the ECOOP conference. The School brings together leading researchers in programming languages, object-orientation, and teaching from academia and industry to provide technical sessions on important research and mentoring sessions on how to prepare for a research career. The School aims to engage students in a process of imagining how they might contribute to our research community. We especially encourage women and under-represented minority students to attend.\nFrom this year the Summer School lectures are restricted to registered students.\nProgram\nStudents who register to the summer school will be able to attend the Doctoral Symposium on Sunday July 17th, a special introductory session to research in the field will be held on Monday 18th, and four Summer School lectures will be spread throughout the week. Each lecture is 90 minutes long and is free to all registered participants. The lectures run concurrently to the ECOOP technical session. (Students will get preferential seating, if space is an issue.) Each attending student will be assigned a senior mentor, another student who is already active in research, the mentor will help students navigate the conference.\nApplications\nThe ECOOP organizers have secured limited funding to help students attend the event. Please register soon and include a budget that describes how much you would need to be able to come to the summer school. Registration form. We encourage all the students applying to the summer school to register for Student Volunteer positions. [Applications are closed]",
      "Chairs": ["janvitek"],
      "ChairsString": "Jan Vitek",
      "Day": "2016-07-21",
      "Items": ["summer-school-a-jit-compiler-almost-for-free"],
      "Key": "0a6f6de7-9e5b-40ec-a675-c87b955cc49f",
      "Location": "Leopardi",
      "Time": "15:30 - 17:00",
      "Title": "Summer School: Lecture 4b",
      "Type": "Lectures"
    },
    {
      "Abstract": "The ECOOP Summer School aims to encourage graduate students and senior undergraduate students to pursue careers in research on topics related to the ECOOP conference. The School brings together leading researchers in programming languages, object-orientation, and teaching from academia and industry to provide technical sessions on important research and mentoring sessions on how to prepare for a research career. The School aims to engage students in a process of imagining how they might contribute to our research community. We especially encourage women and under-represented minority students to attend.\nFrom this year the Summer School lectures are restricted to registered students.\nProgram\nStudents who register to the summer school will be able to attend the Doctoral Symposium on Sunday July 17th, a special introductory session to research in the field will be held on Monday 18th, and four Summer School lectures will be spread throughout the week. Each lecture is 90 minutes long and is free to all registered participants. The lectures run concurrently to the ECOOP technical session. (Students will get preferential seating, if space is an issue.) Each attending student will be assigned a senior mentor, another student who is already active in research, the mentor will help students navigate the conference.\nApplications\nThe ECOOP organizers have secured limited funding to help students attend the event. Please register soon and include a budget that describes how much you would need to be able to come to the summer school. Registration form. We encourage all the students applying to the summer school to register for Student Volunteer positions. [Applications are closed]",
      "Chairs": ["janvitek"],
      "ChairsString": "Jan Vitek",
      "Day": "2016-07-21",
      "Items": ["summer-school-a-jit-compiler-almost-for-free"],
      "Key": "0268186f-b47a-441a-bceb-4a0a31f96f53",
      "Location": "Leopardi",
      "Time": "13:30 - 15:00",
      "Title": "Summer School: Lecture 4a",
      "Type": "Lectures"
    },
    {
      "Abstract": "The ECOOP Summer School aims to encourage graduate students and senior undergraduate students to pursue careers in research on topics related to the ECOOP conference. The School brings together leading researchers in programming languages, object-orientation, and teaching from academia and industry to provide technical sessions on important research and mentoring sessions on how to prepare for a research career. The School aims to engage students in a process of imagining how they might contribute to our research community. We especially encourage women and under-represented minority students to attend.\nFrom this year the Summer School lectures are restricted to registered students.\nProgram\nStudents who register to the summer school will be able to attend the Doctoral Symposium on Sunday July 17th, a special introductory session to research in the field will be held on Monday 18th, and four Summer School lectures will be spread throughout the week. Each lecture is 90 minutes long and is free to all registered participants. The lectures run concurrently to the ECOOP technical session. (Students will get preferential seating, if space is an issue.) Each attending student will be assigned a senior mentor, another student who is already active in research, the mentor will help students navigate the conference.\nApplications\nThe ECOOP organizers have secured limited funding to help students attend the event. Please register soon and include a budget that describes how much you would need to be able to come to the summer school. Registration form. We encourage all the students applying to the summer school to register for Student Volunteer positions. [Applications are closed]",
      "Chairs": ["janvitek"],
      "ChairsString": "Jan Vitek",
      "Day": "2016-07-22",
      "Items": [
        "summer-school-experimental-evaluation-of-programming-systems",
        "summer-school-adjourn"
      ],
      "Key": "69b30387-7d61-4d19-a426-2eb3714b5bf5",
      "Location": "Leopardi",
      "Time": "13:40 - 15:20",
      "Title": "Summer School: Lecture 5b",
      "Type": "Lectures"
    },
    {
      "Abstract": "The ECOOP Summer School aims to encourage graduate students and senior undergraduate students to pursue careers in research on topics related to the ECOOP conference. The School brings together leading researchers in programming languages, object-orientation, and teaching from academia and industry to provide technical sessions on important research and mentoring sessions on how to prepare for a research career. The School aims to engage students in a process of imagining how they might contribute to our research community. We especially encourage women and under-represented minority students to attend.\nFrom this year the Summer School lectures are restricted to registered students.\nProgram\nStudents who register to the summer school will be able to attend the Doctoral Symposium on Sunday July 17th, a special introductory session to research in the field will be held on Monday 18th, and four Summer School lectures will be spread throughout the week. Each lecture is 90 minutes long and is free to all registered participants. The lectures run concurrently to the ECOOP technical session. (Students will get preferential seating, if space is an issue.) Each attending student will be assigned a senior mentor, another student who is already active in research, the mentor will help students navigate the conference.\nApplications\nThe ECOOP organizers have secured limited funding to help students attend the event. Please register soon and include a budget that describes how much you would need to be able to come to the summer school. Registration form. We encourage all the students applying to the summer school to register for Student Volunteer positions. [Applications are closed]",
      "Chairs": ["janvitek"],
      "ChairsString": "Jan Vitek",
      "Day": "2016-07-22",
      "Items": ["summer-school-experimental-evaluation-of-programming-systems"],
      "Key": "43de9075-cf32-414a-b813-8ef46f3b4d16",
      "Location": "Leopardi",
      "Time": "10:30 - 12:00",
      "Title": "Summer School: Lecture 5a",
      "Type": "Lectures"
    },
    {
      "Abstract": "The ECOOP Summer School aims to encourage graduate students and senior undergraduate students to pursue careers in research on topics related to the ECOOP conference. The School brings together leading researchers in programming languages, object-orientation, and teaching from academia and industry to provide technical sessions on important research and mentoring sessions on how to prepare for a research career. The School aims to engage students in a process of imagining how they might contribute to our research community. We especially encourage women and under-represented minority students to attend.\nFrom this year the Summer School lectures are restricted to registered students.\nProgram\nStudents who register to the summer school will be able to attend the Doctoral Symposium on Sunday July 17th, a special introductory session to research in the field will be held on Monday 18th, and four Summer School lectures will be spread throughout the week. Each lecture is 90 minutes long and is free to all registered participants. The lectures run concurrently to the ECOOP technical session. (Students will get preferential seating, if space is an issue.) Each attending student will be assigned a senior mentor, another student who is already active in research, the mentor will help students navigate the conference.\nApplications\nThe ECOOP organizers have secured limited funding to help students attend the event. Please register soon and include a budget that describes how much you would need to be able to come to the summer school. Registration form. We encourage all the students applying to the summer school to register for Student Volunteer positions. [Applications are closed]",
      "Chairs": ["janvitek"],
      "ChairsString": "Jan Vitek",
      "Day": "2016-07-20",
      "Items": ["summer-school-building-a-research-program-for-scripting-languages"],
      "Key": "321459d2-a9a0-41aa-8af6-82b086962152",
      "Location": "Leopardi",
      "Time": "15:30 - 17:00",
      "Title": "Summer School: Lecture 2b",
      "Type": "Lectures"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-17",
      "Items": ["curryon-2016-catering-coffee-break"],
      "Key": "b73c3fb2-dda1-4db1-a38a-abeac2bf794f",
      "Location": "Ariosto",
      "Time": "09:45 - 10:05",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-17",
      "Items": ["curryon-2016-catering-lunch"],
      "Key": "12bc0b55-d4fd-4a3b-a925-6f9c40eec2bc",
      "Location": "Ariosto",
      "Time": "12:25 - 13:50",
      "Title": "Catering: Lunch",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-21",
      "Items": ["ecoop-2016-catering-ecoop-banquet"],
      "Key": "5efa8dc8-e308-4611-ba1a-c374c1804e78",
      "Location": "Pinacoteca del Tesoriere",
      "Time": "19:30 - 23:00",
      "Title": "Catering: Banquet",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-17",
      "Items": ["curryon-2016-catering-coffee-break"],
      "Key": "e46eb3d6-4b3c-46dd-9b87-56f82d36b275",
      "Location": "Ariosto",
      "Time": "15:20 - 16:00",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-19",
      "Items": ["curryon-2016-catering-poster-session-workshops-reception"],
      "Key": "1978ca02-3cb0-4c88-b868-11d87f2eaee2",
      "Location": "Manzoni",
      "Time": "17:30 - 18:30",
      "Title": "Poster Session & Workshops Reception",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-20",
      "Items": ["ecoop-2016-catering-lunch"],
      "Key": "33d9f078-47fc-415e-8854-2056a7ac2941",
      "Location": "Ariosto + Manzoni",
      "Time": "12:00 - 13:30",
      "Title": "Catering: Lunch",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-19",
      "Items": ["curryon-2016-catering-coffee-break"],
      "Key": "01284b76-c5f3-4e3f-bfea-ef0f74c54107",
      "Location": "Ariosto + Manzoni",
      "Time": "15:20 - 16:00",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-19",
      "Items": ["curryon-2016-catering-coffee-break"],
      "Key": "1e1607fe-76ae-4159-8beb-cb998057c0a1",
      "Location": "Ariosto + Manzoni",
      "Time": "09:45 - 10:05",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-18",
      "Items": ["curryon-2016-catering-lunch"],
      "Key": "4444e554-b95d-406e-b879-c4439337b941",
      "Location": "Ariosto + Manzoni",
      "Time": "12:25 - 13:50",
      "Title": "Catering: Lunch",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-21",
      "Items": ["ecoop-2016-catering-coffee-break"],
      "Key": "a8a09eab-3008-401f-a8d5-b35993328150",
      "Location": "Ariosto + Manzoni",
      "Time": "15:00 - 15:30",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-20",
      "Items": ["ecoop-2016-catering-coffee-break"],
      "Key": "6d4315da-c673-4164-8bbe-1fd4ea9d6688",
      "Location": "Ariosto + Manzoni",
      "Time": "10:00 - 10:30",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-18",
      "Items": ["curryon-2016-catering-coffee-break"],
      "Key": "57967d2f-c0a7-4c6d-9fae-b1e07385f0a1",
      "Location": "Ariosto + Manzoni",
      "Time": "15:20 - 16:00",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-18",
      "Items": ["curryon-2016-catering-coffee-break"],
      "Key": "c5588dbb-5d53-4969-921c-24f438509a89",
      "Location": "Ariosto + Manzoni",
      "Time": "09:45 - 10:05",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-20",
      "Items": ["ecoop-2016-catering-coffee-break"],
      "Key": "b40c7c1c-2f4d-4991-8982-9529f95545f4",
      "Location": "Ariosto + Manzoni",
      "Time": "15:00 - 15:30",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-22",
      "Items": ["ecoop-2016-catering-lunch"],
      "Key": "4b25f3bd-bfd5-4b9b-a4b8-19dc4ba363ca",
      "Location": "Ariosto + Manzoni",
      "Time": "11:45 - 13:30",
      "Title": "Catering: Lunch",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-22",
      "Items": ["ecoop-2016-catering-coffee-break"],
      "Key": "5d310ea7-8536-4581-b960-33f6adf10f01",
      "Location": "Ariosto + Manzoni",
      "Time": "10:00 - 10:30",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-21",
      "Items": ["ecoop-2016-catering-lunch"],
      "Key": "462e642c-5965-4817-8f03-8d49870c55dd",
      "Location": "Ariosto + Manzoni",
      "Time": "11:45 - 13:30",
      "Title": "Catering: Lunch",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-19",
      "Items": ["curryon-2016-catering-lunch"],
      "Key": "680d9f1c-6582-4b8b-b80c-e8d189782a76",
      "Location": "Ariosto + Manzoni",
      "Time": "12:25 - 13:50",
      "Title": "Catering: Lunch",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-21",
      "Items": ["ecoop-2016-catering-coffee-break"],
      "Key": "86ab3da2-89cd-48ed-b75b-2797d8c8eb6c",
      "Location": "Ariosto + Manzoni",
      "Time": "10:00 - 10:30",
      "Title": "Catering: Coffee break",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Lunch, Diner, Coffee-breaks",
      "Day": "2016-07-22",
      "Items": ["ecoop-2016-catering-social"],
      "Key": "49e39d90-bf36-4102-abe8-a90ecb4c076d",
      "Location": "Manzoni",
      "Time": "15:20 - 16:20",
      "Title": "Catering: Ice Cream Social",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Day": "2016-07-21",
      "Items": [
        "ecoop-2016-papers-ljgs-gradual-security-types-for-object-oriented-languages",
        "ecoop-2016-papers-lightweight-session-programming-in-scala",
        "ecoop-2016-papers-trace-typing-an-approach-for-evaluating-retrofitted-type-systems"
      ],
      "Key": "1e17c271-9af6-4525-918f-c8c50b34a35b",
      "Location": "Auditorium Loyola",
      "Time": "13:45 - 15:00",
      "Title": "Research Track: Session 5",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Chairs": ["shriramkrishnamurthi"],
      "ChairsString": "Shriram Krishnamurthi",
      "Day": "2016-07-20",
      "Items": [
        "ecoop-2016-papers-higher-order-demand-driven-program-analysis",
        "ecoop-2016-papers-interprocedural-type-specialization-of-javascript-programs-without-type-analysis",
        "ecoop-2016-papers-magic-with-dynamo-flexible-cross-component-linking-for-java-with-invokedynamic",
        "ecoop-2016-papers-awards"
      ],
      "Key": "3db94b33-6198-4025-a516-236ba84cd3b0",
      "Location": "Auditorium Loyola",
      "Time": "10:30 - 12:00",
      "Title": "Research Track: Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Day": "2016-07-22",
      "Items": ["ecoop-2016-papers-invited-speaker-emina-torlak"],
      "Key": "55521b8d-2bf7-4329-9921-256e519337ad",
      "Location": "Auditorium Loyola",
      "Time": "09:00 - 10:00",
      "Title": "Research Track: DN Talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Day": "2016-07-20",
      "Items": [
        "ecoop-2016-papers-how-does-const-relate-to-immutability-",
        "ecoop-2016-papers-formal-language-recognition-with-the-java-type-checker",
        "ecoop-2016-papers-towards-ontology-based-program-analysis"
      ],
      "Key": "b2059e2a-f2c8-48f8-9ce7-2b9302b9c7f6",
      "Location": "Auditorium Loyola",
      "Time": "13:45 - 15:00",
      "Title": "Research Track: Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Day": "2016-07-21",
      "Items": [
        "ecoop-2016-papers-object-inheritance-without-classes",
        "ecoop-2016-papers-program-tailoring-slicing-by-sequential-criteria",
        "ecoop-2016-papers-scopes-describe-frames-a-uniform-model-for-memory-layout-in-dynamic-semantics"
      ],
      "Key": "8ef53311-a6aa-490e-b266-0bd1d15d6254",
      "Location": "Auditorium Loyola",
      "Time": "15:30 - 16:45",
      "Title": "Research Track: Session 6",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Day": "2016-07-22",
      "Items": [
        "ecoop-2016-papers-boomerang-demand-driven-flow-and-context-sensitive-pointer-analysis-for-java",
        "ecoop-2016-papers-icedust-incremental-and-eventually-consistent-computation-of-derived-values-in-persisted-object-graphs",
        "ecoop-2016-papers-reference-capabilities-for-concurrency-control"
      ],
      "Key": "aafa7474-099b-4470-975e-9dee352be080",
      "Location": "Auditorium Loyola",
      "Time": "10:30 - 11:45",
      "Title": "Research Track: Session 7",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Day": "2016-07-22",
      "Items": [
        "ecoop-2016-papers-composing-interfering-abstract-protocols",
        "ecoop-2016-papers-fine-grained-language-composition-a-case-study",
        "ecoop-2016-papers-one-way-to-select-many",
        "ecoop-2016-papers-staccato-a-bug-finder-for-dynamic-configuration-updates",
        "ecoop-2016-papers-adjourn"
      ],
      "Key": "091d2b40-9dfa-4f7d-ab62-a25ed2490508",
      "Location": "Auditorium Loyola",
      "Time": "13:30 - 15:20",
      "Title": "Research Track: Session 8",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Day": "2016-07-20",
      "Items": [
        "ecoop-2016-papers-making-an-embedded-dbms-jit-friendly",
        "ecoop-2016-papers-ql-object-oriented-queries-on-relational-data",
        "ecoop-2016-papers-transactional-tasks-parallelism-in-software-transactions"
      ],
      "Key": "20883bff-1134-409d-82cc-07d5bcba0d7f",
      "Location": "Auditorium Loyola",
      "Time": "15:30 - 16:45",
      "Title": "Research Track: Session 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Chairs": ["shriramkrishnamurthi"],
      "ChairsString": "Shriram Krishnamurthi",
      "Day": "2016-07-20",
      "Items": [
        "ecoop-2016-papers-welcome-address",
        "ecoop-2016-papers-plenary-speaker-"
      ],
      "Key": "ea039575-a37f-443c-9431-09b4986e865b",
      "Location": "Auditorium Loyola",
      "Time": "08:45 - 10:00",
      "Title": "Research Track: Invited Talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Day": "2016-07-21",
      "Items": [
        "ecoop-2016-papers-a-calculus-for-variational-programming",
        "ecoop-2016-papers-a-calculus-with-partially-dynamic-records-for-typeful-manipulation-of-json-objects",
        "ecoop-2016-papers-transforming-programs-between-apis-with-many-to-many-mappings"
      ],
      "Key": "f3e3f6ef-d9ab-47d8-aa97-4b246536ee69",
      "Location": "Auditorium Loyola",
      "Time": "10:30 - 11:45",
      "Title": "Research Track: Session 4",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ECOOP is a programming languages conference. Its primary focus has been object-orientation, though it is liberal in its taste and, in recent years, has accepted quality papers over a much broader range of programming language and programming topics. Its sweet spot tends to be the theory, design, implementation, optimization, and analysis of programming languages that enable or enforce abstractions\u2014data, control, security, performance\u2014across various programming styles, from object-orientation to reactivity to spreadsheets. It encourages both innovative and creative solutions to real problems, and evaluations of existing solutions in ways that shed new insights. Following recent precedent, it also encourages the submission of reproduction studies.\nECOOP 2016 solicits high quality submissions describing original and unpublished results, as outlined in the Call for Papers [plain-text version].",
      "Day": "2016-07-21",
      "Items": ["ecoop-2016-papers-invited-speaker-james-noble"],
      "Key": "3b2f27c0-1eb5-48b6-bec5-4f3b6b07fec5",
      "Location": "Auditorium Loyola",
      "Time": "09:00 - 10:00",
      "Title": "Research Track: DN Talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": ["curryon-2016-it-s-the-end-of-the-world-as-we-know-it-and-i-feel-fine"],
      "Key": "9f265cb7-824a-4c1d-aa2e-0dae0c991c35",
      "Location": "Auditorium Loyola",
      "Time": "09:00 - 09:50",
      "Title": "CurryOn: Keynote",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": ["curryon-2016-to-macros-and-beyond-how-macros-changed-scala-and-what-s-coming-next"],
      "Key": "213af8aa-2bb7-4788-84c2-d5d157e01650",
      "Location": "Foscolo",
      "Time": "17:40 - 18:20",
      "Title": "CurryOn: Session 7a",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": [
        "curryon-2016-philosophical-concepts-in-programming-paradigms",
        "curryon-2016-are-we-ready-for-secure-languages-"
      ],
      "Key": "135df860-ac47-4ef7-a001-faffbe5b852e",
      "Location": "Foscolo",
      "Time": "16:00 - 17:30",
      "Title": "CurryOn: Session 6a",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-18",
      "Items": ["curryon-2016-curry-on-party-"],
      "Key": "af91e484-27a6-4fcf-a5eb-45a4fc83e089",
      "Location": "Mercati di Traiano",
      "Time": "19:30 - 23:00",
      "Title": "CurryOn: Curry On Party!",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": [
        "curryon-2016-functional-programming-and-foreign-language-interfaces-essentials-in-distributed-computing",
        "curryon-2016-he-future-of-programming-will-be-live",
        "curryon-2016-from-unikernels-to-databases-to-uis-truly-full-stack-apps-in-ocaml"
      ],
      "Key": "9b025ded-7c52-4b59-b696-57552126bff3",
      "Location": "Foscolo",
      "Time": "10:05 - 12:25",
      "Title": "CurryOn: Session 4a",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-18",
      "Items": [
        "curryon-2016-the-line-between-abstract-and-concrete",
        "curryon-2016-exercises-in-programming-style"
      ],
      "Key": "ce4813f7-5734-4403-96dd-9c21e8e815b0",
      "Location": "Foscolo",
      "Time": "16:00 - 17:30",
      "Title": "CurryOn: Session 3a",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-18",
      "Items": [
        "curryon-2016-building-scalable-stateful-services",
        "curryon-2016-data-driven-software-security-using-differential-privacy-and-deep-learning"
      ],
      "Key": "70bb7b51-26d4-4477-95b6-0be42e466808",
      "Location": "Auditorium Loyola",
      "Time": "13:50 - 15:20",
      "Title": "CurryOn: Session 2b",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": ["curryon-2016-building-an-open-source-research-lab"],
      "Key": "536b0f7a-35f8-41ab-bc83-7932a6030326",
      "Location": "Auditorium Loyola",
      "Time": "18:30 - 19:20",
      "Title": "CurryOn: Keynote",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": [
        "curryon-2016-dartino-a-managed-language-on-micro-controllers-",
        "curryon-2016-redesigning-type-systems-for-industry-oo",
        "curryon-2016-zoncolan-static-analysis-for-security-at-the-facebook-scale"
      ],
      "Key": "5b3b2a1b-5121-4d0e-8ea1-303dd24a1731",
      "Location": "Auditorium Loyola",
      "Time": "10:05 - 12:25",
      "Title": "CurryOn: Session 4b",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-18",
      "Items": [
        "curryon-2016-sieve-cryptographically-enforced-access-control-for-user-data-in-untrusted-clouds",
        "curryon-2016-rascal-the-swiss-army-knife-of-meta-programming"
      ],
      "Key": "a1751696-5907-4027-aefe-9df14a9aa436",
      "Location": "Foscolo",
      "Time": "13:50 - 15:20",
      "Title": "CurryOn: Session 2a",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": ["curryon-2016-a-brief-and-incomplete-history-of-programming-languages"],
      "Key": "0f3edaa2-67ce-4c04-b186-5af9c572f4e9",
      "Location": "Auditorium Loyola",
      "Time": "17:40 - 18:20",
      "Title": "CurryOn: Session 7b",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-18",
      "Items": [
        "curryon-2016-doing-data-science-with-clojure-the-ugly-the-sad-the-joyful",
        "curryon-2016-oden-a-functional-programming-language-for-the-go-ecosystem"
      ],
      "Key": "86d35785-2e1d-4ae7-9656-f95bd8bda15c",
      "Location": "Auditorium Loyola",
      "Time": "16:00 - 17:30",
      "Title": "CurryOn: Session 3b",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": [
        "curryon-2016-practical-demystification-of-crdts",
        "curryon-2016-distributed-iterative-computation-in-tensorflow"
      ],
      "Key": "40c55062-620f-4d87-a207-c08e71180db2",
      "Location": "Auditorium Loyola",
      "Time": "13:50 - 15:20",
      "Title": "CurryOn: Session 5b",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-18",
      "Items": [
        "curryon-2016-curry-on-opening-remarks",
        "curryon-2016-how-to-win-big-with-old-ideas"
      ],
      "Key": "763d1da0-e46b-4e32-aa1a-263fa4b3baa8",
      "Location": "Auditorium Loyola",
      "Time": "08:45 - 09:50",
      "Title": "CurryOn: Keynote",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-18",
      "Items": ["curryon-2016-the-racket-manifesto"],
      "Key": "192481c8-ae16-424c-bcff-43e2541b37c4",
      "Location": "Auditorium Loyola",
      "Time": "17:40 - 18:30",
      "Title": "CurryOn: Keynote",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-18",
      "Items": [
        "curryon-2016-the-functional-programming-languages-nomad",
        "curryon-2016-creating-a-fun-game-with-elm",
        "curryon-2016-why-writing-correct-software-is-hard-and-why-math-alone-won-t-help-us"
      ],
      "Key": "3a7d2ee6-d475-440b-9892-c777af453d0b",
      "Location": "Foscolo",
      "Time": "10:05 - 12:25",
      "Title": "CurryOn: Session 1a",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": [
        "curryon-2016-on-the-chemistry-of-typestate-oriented-actors",
        "curryon-2016-become-a-polyglot-by-learning-java-"
      ],
      "Key": "cf373e3d-b8a5-46c3-a9b2-a01c371493ca",
      "Location": "Foscolo",
      "Time": "13:50 - 15:20",
      "Title": "CurryOn: Session 5a",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-19",
      "Items": [
        "curryon-2016-distributed-configuration-with-clojure",
        "curryon-2016-using-object-algebras-to-design-embedded-domain-specific-languages"
      ],
      "Key": "e091e8a6-dd7f-4c88-9dab-79ef91f6f923",
      "Location": "Auditorium Loyola",
      "Time": "16:00 - 17:30",
      "Title": "CurryOn: Session 6b",
      "Type": "Accepted Presentations"
    },
    {
      "Abstract": "Curry On is a new conference focused on the intersection of emerging languages and emerging challenges in industry (e.g. big data or security), as well as new ideas and paradigms in software development. \nCurry On also seeks to act as a conduit for ferrying understanding and ideas back and forth between industry and academic programming languages, software engineering, and systems research communities (amongst others). Curry On is a rare event where academic minds responsible for concepts and tools now invaluable to everyday software development \u2013 like functional programming, or generics in Java \u2013 collide with the movers and shakers in industry that are building next-generation systems and developing software engineering practices central to our entire industry. \nCurry On will be held in a different European city year-to-year, and it will always be co-located with one of the top academic conferences in programming languages. \nJoin us for two days of fruitful and mind-altering ideas and discussions, and maybe a few beers.\nwww.curry-on.org",
      "Day": "2016-07-18",
      "Items": [
        "curryon-2016-peter-o-hearn",
        "curryon-2016-james-noble",
        "curryon-2016-a-type-is-worth-a-thousand-tests"
      ],
      "Key": "59d93f6d-4b5d-4e88-b056-c7b5e84f4cae",
      "Location": "Auditorium Loyola",
      "Time": "10:05 - 12:25",
      "Title": "CurryOn: Session 1b",
      "Type": "Accepted Presentations"
    }
  ],
  "Sponsors": "Facebook, NSF, Google, Oracle Labs, Mozilla Research, Sapienza, Huawei, IBM Research, Six, Computer Science Department, Brown University, Northeastern University, AITO, Mercati di Traiano - Musei dei Fori Imperiali",
  "URL": "http://2016.ecoop.org/home",
  "VenueInfo": {"Name": "Congress Center"}
}

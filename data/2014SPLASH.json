{
  "DataRevision": 1,
  "Event": "SPLASH2014",
  "Name": "SPLASH 2014",
  "Sessions": [
    {
      "Id": "2hgyfiopiohoxhhpqq88888888888888",
      "Key": "0b3915ae-495f-4e87-b83a-ba6493e2f68e",
      "Title": "Posters: SPLASH Poster Reception",
      "ShortTitle": "",
      "Type": "Posters",
      "Day": "2014-10-22",
      "Time": "18:00 - 21:00",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "In this work we present a test-based approach for detecting and categorizing nonconformances in contract-based programs, in specific for the Java Modeling Language (JML).",
      "Items": [
        "5fa51d0e-6bc8-460a-baa3-2a8f814ae134",
        "6f4bbb09-eb86-4c5e-bbed-48efe0d5addb",
        "75c255e2-3e97-409d-915e-7e2bf25b6b37",
        "99e11b70-49c4-48b8-8564-d6b6c74a6824",
        "ba21c02f-677e-4815-a5cc-5b92b6682ad5",
        "e0ee1244-684a-4f6a-b1d8-f6f295ba272b"
      ]
    },
    {
      "Id": "3pgpfhogiohfghyqqo88888888888888",
      "Key": "b61f14d1-048d-4259-a181-2272ece84fa2",
      "Title": "Panels: Security Panel ",
      "ShortTitle": "",
      "Type": "Panels",
      "Day": "2014-10-22",
      "Time": "13:30 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "In Portland 2014, we return to a theme first discussed as a panel at OOPSLA 2008 in Nashville TN. At that time, we explored whether openness (many eyes) and transparency contribute to improved security and discussed the benefits of achieving privacy \"and\" security - rather than simply privacy \"or\" security.  Has the state of the art changed for the better or is the combination of increasing system states and complexity leading to lose-lose trade-offs?\n\nAs news stories continue to demonstrate, ensuring adequate security and privacy in a networked \"always on\" world is a challenge; and while open source software can mitigate problems, it is not a panacea. This panel will bring together experts from industry and academia to debate, discuss, and offer opinions - questions might include:\n\n   * What are the \"costs\" of \"good enough\" security and privacy on developers and customers\n   * What is the appropriate trade-off between the price to provide security and the cost of poor security?\n   * How can the consequences of poor design and implementation be managed?\n   * Can systems be enabled to fail \"security-safe\"?\n   * What are the trade-offs for increased adoption of privacy and security best practices?\n   * How can the \"costs\" of privacy and security - both tangible and intangible - be reduced?",
      "Items": [
        "313b3de0-f621-4a37-be1b-e27c787677d8"
      ]
    },
    {
      "Id": "zphgoqfgqghoporhip88888888888888",
      "Key": "abd46303-de71-42a9-955d-f20b9e1868b3",
      "Title": "Awards: SPLASH Awards",
      "ShortTitle": "",
      "Type": "SPLASH Awards",
      "Day": "2014-10-22",
      "Time": "15:30 - 17:00",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "   * OOPSLA - Best Papers and Most Influential Paper Awards\n   * Onward! - Best Papers and Most Influential Paper Awards\n   * OOPSLA Artifact Awards\n   * SIGPLAN Dissertation Award\n   * PC Chair Reports",
      "Items": [
        "ea6f984c-ace8-402b-8114-21aaed181ec0"
      ]
    },
    {
      "Id": "zpgqgpgppopgqrhoop88888888888888",
      "Key": "fd5a348c-5d58-4bb4-b1c6-c7f949a0b0e2",
      "Title": "Administration: Onward! SC Meeting",
      "ShortTitle": "",
      "Type": "Administration",
      "Day": "2014-10-21",
      "Time": "12:00 - 13:30",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Onward! Steering Committee meeting and lunch.",
      "Items": [
        "ed731eb5-6f95-40f9-9b54-85f2cc4ff8a5"
      ]
    },
    {
      "Id": "3yiqfpfhpgxgyqpyiq88888888888888",
      "Key": "1fcf887f-41c1-461e-8ab5-fa9da6af686e",
      "Title": "Student Research Competition: SRC Posters",
      "ShortTitle": "",
      "Type": "Student Research Competition",
      "Day": "2014-10-22",
      "Time": "18:36 - 18:54",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "01a391c5-f59e-46af-941e-7c29953fda8a",
        "1742617e-017b-44c0-965f-a6e1dd00abb8",
        "378528a6-28b0-43e8-acf6-fb1351a5d8de",
        "454bcb3a-915a-4562-a99f-418f63ed9fb0",
        "50bb1df7-5cf0-4ce6-9db1-a496611c995d",
        "5f8e3311-a662-4c36-ad5c-9beb0ad3825d",
        "772471e8-4c37-4bf5-b01b-47f9a50fb06c",
        "9e2f5d12-c28c-4c05-ad66-2807d7eadaa7",
        "aa6f2f0f-2ef9-4c5a-a77e-3996ee1dae0f",
        "f7af427c-b822-4dbd-994d-129039763440"
      ]
    },
    {
      "Id": "tp1yfxfgfoffgixyoq88888888888888",
      "Key": "927aeece-2aa4-4301-b100-4186abfc2ae8",
      "Title": "Student Research Competition: SRC Presentations",
      "ShortTitle": "",
      "Type": "Student Research Competition",
      "Day": "2014-10-23",
      "Time": " - ",
      "LocationIndex": "0",
      "Location": "Salon B",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        
      ]
    },
    {
      "Id": "zghpfygpqogfgxypxp88888888888888",
      "Key": "fb43293f-1cc6-4d7d-b410-34aaece1cab6",
      "Title": "Administration: SPLASH SC Meeting",
      "ShortTitle": "",
      "Type": "Administration",
      "Day": "2014-10-22",
      "Time": "12:00 - 13:30",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "SPLASH Steering Committee Meeting and lunch.",
      "Items": [
        "8ec03fe0-35c1-4755-b241-a9d870342f7b"
      ]
    },
    {
      "Id": "3ypqgyfp1opggpp1hq88888888888888",
      "Key": "b8dcb2e6-8ea3-4cdf-ac47-143ff1ef096e",
      "Title": "Wavefront: Invited Talk: Ward Cunningham",
      "ShortTitle": "",
      "Type": "Wavefront",
      "Day": "2014-10-24",
      "Time": "10:30 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon C",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Talk by Ward Cunningham (inventor of the Wiki) on Design Goals of the Smallest Federated Wiki.",
      "Items": [
        "7f75d1ad-ed53-420b-8ebd-a2774fc74a46"
      ]
    },
    {
      "Id": "3ppxfxfpqopfpp1hgp88888888888888",
      "Key": "f54eb2ca-1ab3-4ce5-b2c2-d4a8ee3716c5",
      "Title": "Keynotes: Gary McGraw Keynote",
      "ShortTitle": "",
      "Type": "SPLASH Keynotes",
      "Day": "2014-10-22",
      "Time": "08:30 - 10:00",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "#### Title\n\nSoftware Security - A Study in Technology Transfer\n\n#### Abstract \n\nWhere do security technologies come from?  Academics propose research and government (sometimes) funds it. Startups move technologies across the \"research valley of death\" to early adopters.  Global corporations make technology widely available by acquiring startups.  At every step there are gaps and pitfalls.\n\nAdoption is the acid test of innovation. Idea-generation is perhaps ten per cent of innovation; most of the work is on technology transfer and adoption.  Chance plays a big role in creating opportunities (e.g., R&D involves a lot of luck), but a company\u2019s success depends on its ability to make opportunities more likely to occur, and to capitalize on those opportunities when they arise. Passionate individuals drive technology transfer more than does process; indeed, some people believe that the original researchers need to be involved all the way along the chain. Prototyping is an important practice, often resulting in \"researchware\" that proves a concept but is not ready for wide use. Transforming a prototype from the lab to the real-world use is a multi-stage, multi-year undertaking.\n\nThis talk will use the decade-long evolution of static analysis in code review as a driver for discussion. We'll talk startups, big companies, venture capital, research agencies, and subject-matter expertise.  In general, technologists don't appreciate business people enough and business people don't appreciate technology enough.  Most successful companies are brilliant at one, but also need to be adequate at the other.\n\n<!-- [Gary McGraw](http:\/\/2014.splashcon.org\/profile\/garymcgraw) will be the SPLASH keynote speaker on Wednesday 22 October. -->\n",
      "Items": [
        "bfd793a4-ab1a-4579-951a-6cbcc49a7e03"
      ]
    },
    {
      "Id": "rhppoqgpoohfppghgg88888888888888",
      "Key": "0239c34a-e8e5-4ba1-b631-d5f202652320",
      "Title": "Wavefront: Panel: East Meets West",
      "ShortTitle": "",
      "Type": "Wavefront",
      "Day": "2014-10-23",
      "Time": "10:30 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon C",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "How do software development practices differ from coast-to-coast?  What should practitioners learn about the influences of geography \u2013 and why is it important?\n \nEach community of software professionals has its own technical biases:  preferred programming languages, soft-ware tools, design paradigms, software testing approaches, and techniques for collaboration within a working group.  Conferences like SPLASH provide an opportunity to compare notes, to learn from the successes (and failures) of others, to learn about new technologies, and to learn about how other groups communicate and collaborate.\n \nThis panel will focus on the diversity of software development practices in North America and the broader influences of geography.",
      "Items": [
        "17b2de46-de63-4c16-bfa6-9c7c4f080ffb"
      ]
    },
    {
      "Id": "3yqpogoghgqohpxqyh88888888888888",
      "Key": "4cece52c-f41b-4235-8f5c-67c6da9dea71",
      "Title": "Keynotes: Peter Norvig Keynote",
      "ShortTitle": "",
      "Type": "SPLASH Keynotes",
      "Day": "2014-10-23",
      "Time": "08:30 - 10:00",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "#### Title\n\nMachine Learning for Programming\n\n#### Abstract\n\nIf you want to recognize speech or filter out spam emails, you will probably write a machine learning algorithm and will not try to write the whole program using a \"traditional\" software specification and implementation. There are many examples of successful machine learning solutions, but can we more broadly apply the techniques to most or all software problems, and for most or all programmers, from the novice in their first programming course to the seasoned professional?\n\n<!-- [Peter Norvig](http:\/\/2014.splashcon.org\/profile\/peternorvig) will be the Onward! keynote speaker on Thursday 23 October. -->",
      "Items": [
        "e6d583cd-d7da-4732-a4df-dbdd45792d98"
      ]
    },
    {
      "Id": "thpqgpgghgpghyxpqy88888888888888",
      "Key": "4790b28c-6b55-4382-9c39-75cebcd47ecf",
      "Title": "Social Events: Workshops Reception",
      "ShortTitle": "",
      "Type": "Social Events",
      "Day": "2014-10-20",
      "Time": "18:00 - 21:00",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "ec3a8fa7-1cbf-43a9-8099-ed0344926f9a"
      ]
    },
    {
      "Id": "sp1poqohpoggppyhpp88888888888888",
      "Key": "36b2ffd5-e8dd-48c2-a707-1f3bcf63b20f",
      "Title": "Onward! Essays: Session 1",
      "ShortTitle": "",
      "Type": "Onward! Essays",
      "Day": "2014-10-22",
      "Time": "14:15 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "External or internal domain-specific languages (DSLs) or (fluent) APIs? Whoever you are -- a developer or a user of a DSL -- you usually have to choose your side; you should not! What about metamorphic DSLs that change their shape according to your needs? \n\nWe report on our 4-years journey of providing the \"right\" support (in the domain of feature modeling), leading us to develop an external DSL, different shapes of an internal API, and maintain all these languages. A key insight is that there is no one-size-fits-all solution or no clear superiority of a solution compared to another. On the contrary, we found that it does make sense to continue the maintenance of an external and internal DSL. \n\nThe vision that we foresee for the future of software languages is their ability to be self-adaptable to the most appropriate shape (including the corresponding integrated development environment) according to a particular usage or task. We call metamorphic DSL such a language, able to change from one shape to another shape.",
      "Items": [
        "3d05af27-d5ed-4679-9820-9c608e0cc8f4",
        "ac5241d7-558c-4a78-b976-8d60a3aac0f5"
      ]
    },
    {
      "Id": "rpphgygppooghhpgpp88888888888888",
      "Key": "110ed365-9be8-4d1d-ab06-83646b11c46a",
      "Title": "Demos: Demo 1: Pocket Code IDE",
      "ShortTitle": "",
      "Type": "Demos",
      "Day": "2014-10-22",
      "Time": "13:00 - 13:40",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Pocket Code: A Scratch-like Integrated Development Environment for your Phone by Wolfgang Slany (Institute of Software Technology, Graz University of Technology) ",
      "Items": [
        "b5007394-8616-4866-97f9-89bb412788f7"
      ]
    },
    {
      "Id": "rgppfigpggqgiypgph88888888888888",
      "Key": "10166c0f-2876-4d15-8c76-69ded0614c09",
      "Title": "Social Events: Conference Banquet",
      "ShortTitle": "",
      "Type": "Social Events",
      "Day": "2014-10-23",
      "Time": "18:30 - 21:30",
      "LocationIndex": "0",
      "Location": "Grand Avenue Marketplace",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "SPLASH Conference Banquet Thursday 23 October, 1830-2130.\n\nLocation: [Grand Avenue Marketplace](http:\/\/grandmarketplacepdx.com\/), 1005 SE Grand Ave, Portland\n\n![Grand Marketplace](http:\/\/2014.splashcon.org\/getImage\/small\/Grand+Av+Antique+Mall.jpg)\n\n<iframe src=\"https:\/\/www.google.com\/maps\/embed?pb=!1m29!1m12!1m3!1d11182.985434850027!2d\u2026!3m2!1d45.515564999999995!2d-122.661082!5e0!3m2!1sen!2sca!4v1412705738780\" width=\"600\" height=\"450\" frameborder=\"0\" style=\"border:0\"><\/iframe>",
      "Items": [
        "76e69d46-aa4a-4dd9-9099-c668f55488a8"
      ]
    },
    {
      "Id": "zyqpgpgpqghgphppfh88888888888888",
      "Key": "cbecd8c3-8a38-4a5e-9278-d554b35c0092",
      "Title": "Onward! Essays: Session 3",
      "ShortTitle": "",
      "Type": "Onward! Essays",
      "Day": "2014-10-24",
      "Time": "13:30 - 14:15",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "The discipline of computer science has a long and complicated history with computer programming languages. Historically, inventors have created language products for a wide variety of reasons, from attempts at making domain specific tasks easier, to technical achievements, to social or political reasons. However, the modern programming language industry now has a large variety of incompatible programming languages, each of which with unique syntax, semantics, and their own often massive standard libraries, lifetimes, and costs. In this paper, we express doubts that the programming language community is focused on the most crucial problems in programming language design. We suggest instead that the programming language wars themselves may be negatively impacting the world, including how, in the broad sense, programming languages are applied in industrial software construction.\n",
      "Items": [
        "0d2f61ed-9cb1-449e-9567-74a9e2060fcc",
        "46782132-11c8-44c4-b9fc-ce13abda8e34"
      ]
    },
    {
      "Id": "tpqqoqogggpfgoqqqq88888888888888",
      "Key": "84c6b9d9-ee7a-4303-85c4-140a7d7cf7b8",
      "Title": "Social Events: Lunch for Women - Google",
      "ShortTitle": "",
      "Type": "Social Events",
      "Day": "2014-10-23",
      "Time": "12:00 - 13:30",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Lunch for Women.\n\n#### Sponsored By:\n\n<a href=\"http:\/\/www.google.com\/\"><img src=\"http:\/\/2014.splashcon.org\/getImage\/small\/google.png\" border=\"0\"><\/a>",
      "Items": [
        "e0bc19a3-59be-4fd7-b78c-b8d89af5a39d"
      ]
    },
    {
      "Id": "2gopfxfphgpophhhgq88888888888888",
      "Key": "3b201a7a-1bb1-4a71-8f1f-5d63656443e5",
      "Title": "Wavefront: Invited Talk: Eric Forsberg",
      "ShortTitle": "",
      "Type": "Wavefront",
      "Day": "2014-10-23",
      "Time": "13:30 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon C",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Maintaining the stability and quality of a software product developed by a global team presents a myriad of challenges. A highly serialized build and test process turned out to be inefficient and in many cases detrimental to the health of the product. A system of integrated source control coupled with continuous build and test resulted in higher productivity by the engineering team, a dramatic reduction of \u201cbroken\u201d builds, and a regression suite pass rate consistently near 100%. In this presentation we review the circumstances that motivated our move to a continuous build and test model, provide an overview of our continuous build and test system, and discuss the metrics used to monitor system health and drive continual improvements.",
      "Items": [
        "ae726cf0-b292-4954-9583-4526da763652"
      ]
    },
    {
      "Id": "3hihohohqgigyhyipo88888888888888",
      "Key": "d2389776-a75d-475e-8976-db58fb95a8a2",
      "Title": "Onward! Essays: Session 2",
      "ShortTitle": "",
      "Type": "Onward! Essays",
      "Day": "2014-10-23",
      "Time": "13:30 - 14:15",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Everyone wants to know one thing about a test suite: will it detect enough bugs? Unfortunately, in most settings that matter, answering this question directly is impractical or impossible. Software engineers and researchers therefore tend to rely on various measures of code coverage (where mutation testing is considered as a form of syntactic coverage). A long line of academic research efforts have attempted to determine whether relying on coverage as a substitute for fault detection is a reasonable solution to the problems of test suite evaluation. This essay argues that the profusion of coverage-related literature is in part a sign of an underlying uncertainty as to what exactly it is that measuring coverage should achieve, and how we would know if it can, in fact, achieve it. We propose some solutions, but the primary focus is to clarify the state of current confusions regarding this key problem for effective software testing. \n",
      "Items": [
        "47143586-f75a-4669-88d9-e6292b26ba4e",
        "b6f9ddb2-cd93-43e4-afab-bd3659c70646"
      ]
    },
    {
      "Id": "sprhgxggpogoxhpiii88888888888888",
      "Key": "054b8f73-5ac6-413d-a34f-bc91c3777877",
      "Title": "Demos: Demo 3: Agile Programming With Executable Models",
      "ShortTitle": "",
      "Type": "Demos",
      "Day": "2014-10-24",
      "Time": "13:00 - 13:40",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Agile Programming with Executable Models: An Open-Source, Standards-Based Eclipse Environment by Ed Seidewitz (Model Driven Solutions); Arnaud Cuccuru (CEA (Commissariat \u00e0 l\u2019Energie Atomique et aux Energies Alternatives)) ",
      "Items": [
        "220f0588-d2fb-4cfa-8dc0-ed95df6c7349"
      ]
    },
    {
      "Id": "shpqopohhopfhhipgg88888888888888",
      "Key": "31373f6e-d1ce-4690-bb31-7453790d5231",
      "Title": "Demos: Demo 2: OMEN Testing Tool for Deadlock Detection",
      "ShortTitle": "",
      "Type": "Demos",
      "Day": "2014-10-23",
      "Time": "13:00 - 13:40",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "OMEN: A Tool for Synthesizing Tests for Deadlock Detection by Malavika Samak (Indian Institute of Science); Murali Krishna Ramanathan (Indian Institute of Science)",
      "Items": [
        "3c413944-3e79-4502-a656-2d39e8bf6fb8"
      ]
    },
    {
      "Id": "sqggfyopqoxgpipohf88888888888888",
      "Key": "225e2203-3bdb-4c7f-bad6-b568c1c00910",
      "Title": "Keynotes: Bret Victor Keynote",
      "ShortTitle": "",
      "Type": "SPLASH Keynotes",
      "Day": "2014-10-24",
      "Time": "08:30 - 10:00",
      "LocationIndex": "0",
      "Location": "Salon E+F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "#### Title\n\nHumane Representation of Thought:  A Trail Map for the 21st Century\n\n#### Abstract\n\nNew representations of thought \u2014 written language, mathematical notation, information graphics, etc \u2014 have been responsible for some of the most significant leaps in the progress of civilization, by expanding humanity\u2019s collectively-thinkable territory.\n\nBut at debilitating cost.  These representations, having been invented for static media such as paper, tap into a small subset of human capabilities and neglect the rest. Knowledge work means sitting at a desk, interpreting and manipulating symbols. The human body is reduced to an eye staring at tiny rectangles and fingers on a pen or keyboard.\n\nLike any severely unbalanced way of living, this is crippling to mind and body. But less obviously, and more importantly, it is enormously wasteful of the vast human potential. Human beings naturally have many powerful modes of thinking and understanding. Most are incompatible with static media. In a culture that has contorted itself around the limitations of marks on paper, these modes are undeveloped, unrecognized, or scorned.\n\nWe are now seeing the start of a dynamic medium. To a large extent, people today are using this medium merely to emulate and extend static representations from the era of paper, and to further constrain the ways in which the human body can interact with external representations of thought.\n\nBut the dynamic medium offers the opportunity to deliberately invent a humane and empowering form of knowledge work.  We can design dynamic representations which draw on the entire range of human capabilities \u2014 all senses, all forms of movement, all forms of understanding \u2014 instead of straining a few and atrophying the rest.\n\nThis talk suggests how each of the human activities in which thought is externalized (conversing, presenting, reading, writing, etc) can be redesigned around such representations.\n\n<!-- [Bret Victor](http:\/\/2014.splashcon.org\/profile\/bretvictor) will be the SPLASH keynote speaker on Friday 24 October. -->",
      "Items": [
        "34892aef-cee8-4ec2-b67d-ece2d056e6c6"
      ]
    },
    {
      "Id": "4oxofxggpoxfpphphp88888888888888",
      "Key": "9fc0ba1b-1da9-40d2-aac3-6af183e283d3",
      "Title": "Onward!: Session the Fourth",
      "ShortTitle": "",
      "Type": "Onward! Papers",
      "Day": "2014-10-24",
      "Time": "10:52 - 11:15",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Programmers working in a Unix environment can easily build custom tools by configuring and combining small filter programs in shell scripts. When leaving the text-based world and entering the graphics-based one, however, tool building is more difficult because graphical tools are typically not prepared to be easily re-programmed by its users. We propose a data-driven perspective on graphical tools that uses concise scripts as glue between data and views but also as means to express missing data transformations and view items. Given this, we built a framework in Squeak\/Smalltalk that promotes low-effort tool construction; it works well for basic programming tools, such as code editors and debuggers, but also for other domains, such as developer chats and issue browsers. We think that this perspective on graphical tools can inspire the creation of new trade-offs in modularity for both data-providing projects and interactive views.",
      "Items": [
        "25cf021f-b0d8-4181-8e67-a0b0d47a8a13",
        "4712dbc6-6e27-4f8b-9893-789c23297f4d",
        "4e7e2cd9-4968-47f1-8b70-5d0fed6af8fb",
        "b706ceef-919c-402c-9883-d54df156af1c"
      ]
    },
    {
      "Id": "soqqggoghoqfppp1hp88888888888888",
      "Key": "13b09d6f-950d-4092-a9c2-0e1cd5ee08f0",
      "Title": "Doctoral Symposium: Session 2",
      "ShortTitle": "",
      "Type": "Doctoral Symposium: Sponsored by Mircrosoft Research",
      "Day": "2014-10-20",
      "Time": "11:15 - 12:00",
      "LocationIndex": "0",
      "Location": "Portland",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "The degeneration of source code due to maintenance is a long known but little understood phenomenon. The lack of automated metrics designed to identify degenerate forms contributes significantly to logistical problems faced by current researchers when conducting empirical studies and experiments, studying large-scale projects, and characterizing the development and growth of degenerative forms. Furthermore, such metrics are essential for targeted refactoring and repairing degenerative forms. This dissertation research investigates a set of metrics targeted at specific degenerate forms common in software. The successful implementation and characterization of such metrics will enable further work along these lines.\n",
      "Items": [
        "b09bdf5d-c320-4d8e-8d16-a87db85af7f8",
        "e39f3e19-1d68-46b4-a433-a0465cf27a4a"
      ]
    },
    {
      "Id": "2hhgorfhyogfxoippp88888888888888",
      "Key": "a3194905-b9f3-48af-a031-bba295c27b3a",
      "Title": "Onward!: Session the First",
      "ShortTitle": "",
      "Type": "Onward! Papers",
      "Day": "2014-10-22",
      "Time": "10:30 - 10:52",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Time is of the essence when modifying state. Most programming languages expose the hardware's ability to update global state at any time, leaving the burden entirely on programmers to properly order all updates. Just as languages now manage memory to free us from meticulously allocating and freeing memory, languages should also manage time to take care of properly ordering state updates. We propose time management as a general language feature to relate various prior work but also to guide future research of this largely unexplored design space.\n\nWe propose a new form of managed time, Glitch, which ensures that all updates associated with an external event appear to execute simultaneously, removing the need to order execution manually. Glitch replays code as needed to reach an appearance of simultaneous execution. To do this, all updates must be commutative and capable of being rolled back, which is ensured through built-in state constructs and runtime monitoring. While these restrictions might seem onerous, we find them acceptable for many realistic programs. Glitch retains the familiar imperative programming model as much as possible, restricting rather than replacing it.\n\nManaged time also aides in live programming that provides immediate programmer feedback on how code edits affect execution. Live programming to date has been limited to special cases like pure functions, spreadsheets, or at the top level of games and graphics. Glitch is fully live: past program executions can be replayed in an IDE, while executions are incrementally revised under arbitrary code changes.",
      "Items": [
        "261b0079-c0d5-49e6-b524-2ed56f4aa334",
        "3f06ff9f-d658-4440-b09d-d647b4b2d879",
        "50835462-cb0f-40a9-a805-fb8e33289568",
        "d1626d46-f84f-4df9-98ab-21d20124ad15"
      ]
    },
    {
      "Id": "2hoggpoppghoqhppyh88888888888888",
      "Key": "1d36a052-50eb-4b5c-829e-7c75b64acf76",
      "Title": "PLATEAU: Session 4",
      "ShortTitle": "",
      "Type": "Evaluation and Usability of Programming Languages and Tools",
      "Day": "2014-10-21",
      "Time": "16:06 - 17:30",
      "LocationIndex": "0",
      "Location": "Salem",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Group activity on hypotheses of programming languages",
      "Items": [
        "1e4e06af-2a2a-4bf2-9379-f79a1aeb952b",
        "7eba0112-d55c-476d-b0c2-adb0e93da94f",
        "daae0cdd-3d64-4280-8487-49aabe32d881",
        "fc6117fc-b950-44c1-b751-690bed100a7a"
      ]
    },
    {
      "Id": "tihgoqopxghghqgo1p88888888888888",
      "Key": "95976625-df4e-4dab-8587-49f4210adf8a",
      "Title": "PLATEAU: Session 2",
      "ShortTitle": "",
      "Type": "Evaluation and Usability of Programming Languages and Tools",
      "Day": "2014-10-21",
      "Time": "10:30 - 10:52",
      "LocationIndex": "0",
      "Location": "Salem",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Previous studies focus on the specific questions software engineers ask when evolving a codebase. Though these studies observe developers using statically typed languages, little is known about the developer questions using dynamically typed languages. Dynamically typed languages present new challenges to understanding and navigating in a codebase and could affect results reported by previous studies.\n\nThis paper replicates a previous study and presents the analysis of six programming sessions made in Pharo, a dynamically typed language. We found a similar result when comparing sessions on an unfamiliar codebase with the previous work. Our result on the familiar code greatly deviates from the replicated study, likely caused by different tasks and development strategies. Both missing type information and test driven development affected participant behavior and prudence on codebase understanding, where some participants made changes based on assumptions.\n\nWe provide a set of questions that are useful in characterizing activity related to the use of a dynamically typed language and test-driven development---questions not explicitly considered in previous research. We also present a number of issues that we would like to discuss during the PLATEAU workshop.",
      "Items": [
        "1d461abd-bf41-4235-93f1-415892abb4eb",
        "5a4502b7-6880-4098-a69e-2f79ba6fdf92",
        "a1af7679-b3c8-4efb-a94b-f32c56307378",
        "a9a5fa96-cf16-41cf-b2cb-f9660fb0ee18"
      ]
    },
    {
      "Id": "sopigpop1oyooiqpxg88888888888888",
      "Key": "71a10d79-6f3e-4bee-abed-2a887e3fbb23",
      "Title": "DSLDI: Session 3",
      "ShortTitle": "",
      "Type": "Domain-Specific Language Design and Implementation",
      "Day": "2014-10-20",
      "Time": "13:30 - 14:00",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Computer languages are used in different contexts, such as software development, release engineering, and performance engineering, and on different platforms like operation systems and integrated development environments (IDEs). These use cases and platforms have different characteristics and impose requirements on a language and its tooling. Developing a language and tooling that works in many contexts and platforms is hard, time consuming, and is not something that language engineers should be spending time on. Language workbenches alleviate a large part of this problem by providing IDE and command-line runtimes which run languages created with that language workbench. However, each language workbench has their own runtime system, resulting in a lot of duplicated effort and no easy way to interoperate between languages developed with different workbenches. A common core for language tools can serve as a library for language workbench runtime systems to prevent duplicated effort and support interoperability. We have inspected existing language workbenches and have ideas for a common architecture, but we have most likely not thought of everything. We think it will be an interesting topic for a discussion in the area of language tools. ",
      "Items": [
        "4c76c3af-87e6-4579-8635-b5add9929ecf",
        "ab37616b-067e-42aa-8c3e-1d2a96631a97",
        "efd06caf-eee4-4f2d-8393-38d809fc14d9"
      ]
    },
    {
      "Id": "zphgo1ophgjogiggqh88888888888888",
      "Key": "ac5c4842-afef-4b81-999b-028703419b64",
      "Title": "Doctoral Symposium: Session 3",
      "ShortTitle": "",
      "Type": "Doctoral Symposium: Sponsored by Mircrosoft Research",
      "Day": "2014-10-20",
      "Time": "14:15 - 15:00",
      "LocationIndex": "0",
      "Location": "Portland",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Traditional programming language namespaces evolved from filesystem structures. We describe different scenarios where this rigid code organization becomes a limiting factor. After that, we propose a more flexible code organization using tags. We then illustrate it on Python, including how we can convert existing code structures to the new tag-based one. Finally, we discuss our plans how to extend this work to statically typed languages in the future.\n",
      "Items": [
        "b350f654-7951-40b1-9e27-15b5bc1d33f9",
        "b781199c-0d26-4817-9af1-bd86b70bdd4d"
      ]
    },
    {
      "Id": "2hhgggghggpghoqory88888888888888",
      "Key": "2a539261-7246-4803-94e7-440be80a9ecc",
      "Title": "DSLDI: Session 1",
      "ShortTitle": "",
      "Type": "Domain-Specific Language Design and Implementation",
      "Day": "2014-10-20",
      "Time": "09:00 - 09:30",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "There are two main approaches to implementing domain-specific languages. With the standalone approach,independent tools such as compilers and run-time environments for the DSL are implemented in one or more general-purpose programming languages. With the embedded approach, the DSL implementation takes the form of a library of definitions in the host language, and a program in the DSL is merely a program in the host language that makes use of the library.\n\nAmongst embedded DSLs, there are two further refinements. With a deep embedding, terms in the DSL are implemented simply to construct an abstract syntax tree (AST), which is subsequently transformed for optimization and traversed for evaluation. With a shallow embedding, terms in the DSL are implemented directly by their semantics, bypassing the intermediate AST and its traversal. Deep embeddings might seem like the obvious approach, but Kamin and Erwig (among others) argue that shallow embeddings are superior.\n\nOur focus in this talk proposal is the relationship between deep and shallow embeddings of DSLs, and the connection to compositional semantics. ",
      "Items": [
        "6641ddca-95f3-49c7-859b-66cfa90828f5",
        "78460da6-8f8c-40db-b609-6c6c5ea51f8f",
        "a60beac4-4b22-48a9-9ed2-f1c6fb156ed8"
      ]
    },
    {
      "Id": "rpppgygphghohxfqhq88888888888888",
      "Key": "117b8ad0-8de5-4a56-949e-76ca00d966e6",
      "Title": "MobileDeLi: Session 1",
      "ShortTitle": "",
      "Type": "Mobile Development Lifecycle",
      "Day": "2014-10-21",
      "Time": "08:30 - 08:40",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Introduction and Welcome",
      "Items": [
        "14eac5e6-8a2e-4c73-af4b-e266b4cb39e2",
        "7476ab14-01f4-48fe-abe5-4e4d50658046",
        "9a578686-915f-4876-b5e3-d3eea10f459e",
        "e4f289ab-1371-412f-808b-c628a4ef25a7"
      ]
    },
    {
      "Id": "3ohqgqgpqgpfxpopiq88888888888888",
      "Key": "b4c073e5-6c98-4dd8-92d4-bac50ab3867e",
      "Title": "SPLASH-E: Error Messages, Feedback, and Impromptu Topics",
      "ShortTitle": "",
      "Type": "SPLASH-E",
      "Day": "2014-10-21",
      "Time": "10:30 - 10:50",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Flexible time to discuss issues that have come up during the rest of the day.",
      "Items": [
        "05df93d8-303a-4d52-8ed8-20462bac5c37",
        "6cd52208-04a7-4bad-8ea1-8b9303387616",
        "973bdc16-679b-448d-a2a5-e775190a5d4f",
        "c8288952-99a3-4096-a2ad-38538b116ce3"
      ]
    },
    {
      "Id": "zxhxgoogogyfpphohr88888888888888",
      "Key": "dabc37bb-90bc-420b-9cf4-c65a81b027f8",
      "Title": "AGERE!: Full-Papers II",
      "ShortTitle": "",
      "Type": "AGERE! Papers",
      "Day": "2014-10-20",
      "Time": "11:15 - 11:37",
      "LocationIndex": "0",
      "Location": "Salon D",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "8e162457-7025-4b70-8583-ca7815c6f37b",
        "aa9d99fa-6316-4399-8a34-74761a1934bf",
        "bacc1622-080c-47c6-bd6c-2784cd040e45",
        "f494e9ba-d1ae-4c53-b54a-0fea3875934d"
      ]
    },
    {
      "Id": "2fqhoyfhpoqoqpqpx188888888888888",
      "Key": "2b008d49-ccd4-44f3-bc7c-e70f7d1daaef",
      "Title": "DLS: Technical paper session 4",
      "ShortTitle": "",
      "Type": "DLS",
      "Day": "2014-10-21",
      "Time": "16:10 - 16:30",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "07d07cdb-570e-4f47-82b4-15db72d02dac",
        "3b6c2b31-fbd0-4e43-aa32-b7f04e99c65f",
        "78acd378-c420-4b57-b562-e6c47470ac40",
        "89afdd1d-e5ad-4ae0-842b-55f47a07f872"
      ]
    },
    {
      "Id": "thpiohoghogfpfq1py88888888888888",
      "Key": "46483f77-a73a-4364-a142-2b008efdb7cc",
      "Title": "MobileDeLi: Session 2",
      "ShortTitle": "",
      "Type": "Mobile Development Lifecycle",
      "Day": "2014-10-21",
      "Time": "11:20 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "545c31ec-2131-47eb-8fde-2584477766b1",
        "841973ac-57c1-43ae-84c0-03d2e2f96f71",
        "cdf91737-10de-4558-82d0-9bd9119eab12"
      ]
    },
    {
      "Id": "spqxohghgoofhprogh88888888888888",
      "Key": "81a6d9ad-d495-4511-b0c3-833bf80a0781",
      "Title": "MobileDeLi: Session 3",
      "ShortTitle": "",
      "Type": "Mobile Development Lifecycle",
      "Day": "2014-10-21",
      "Time": "14:35 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "21cb42f6-1d7d-40c9-9934-ce1b319f3fc1",
        "64743e98-fdb2-4ddd-b626-63887ca11f6b",
        "ab6f7495-c5ac-43ed-8b28-aeaee5bac92e",
        "e673da88-0a45-4248-b015-0cc4c257d864"
      ]
    },
    {
      "Id": "txqhoyfppghgqghyqo88888888888888",
      "Key": "57acc817-bdb1-4e4d-8726-a92209cef4c0",
      "Title": "DLS: Invited paper and technical paper session 1",
      "ShortTitle": "",
      "Type": "DLS",
      "Day": "2014-10-21",
      "Time": "09:30 - 09:50",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "ad3d9f39-b6d8-4bd0-9f98-6bafdb021fbe",
        "ca2d830c-cef2-4377-b2a4-baf4e1619e20"
      ]
    },
    {
      "Id": "4phhfhfgqoioppppop88888888888888",
      "Key": "d9e35476-3910-427d-b69b-8a1eb43ca03f",
      "Title": "AGERE!: Full-Papers III",
      "ShortTitle": "",
      "Type": "AGERE! Papers",
      "Day": "2014-10-20",
      "Time": "13:52 - 14:15",
      "LocationIndex": "0",
      "Location": "Salon D",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "198c175d-1c5e-41b0-b8ba-9691a9db05f0",
        "6a9d7918-78fb-4248-8c5d-6577f0675096",
        "9f75fbfa-92ae-4e03-a2de-1ee28ca16ee3",
        "d63c2687-c92b-4510-bc20-a1c91bd431f3"
      ]
    },
    {
      "Id": "tppioroghopgxqpxgq88888888888888",
      "Key": "68a3b479-ef9c-4191-a5a6-daf5b3bc217d",
      "Title": "DLS: Technical paper session 3",
      "ShortTitle": "",
      "Type": "DLS",
      "Day": "2014-10-21",
      "Time": "14:10 - 14:30",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "0888529c-a6a2-4375-9504-349ffb03313b",
        "0eff8919-cfdd-4e9b-9c40-f3aa0c9e53ef",
        "a2ce0cf0-a4a3-43b4-8d02-cb305cf85ede",
        "e7d7f05d-df77-43e8-9c81-fa3e61df8be3"
      ]
    },
    {
      "Id": "zyhqfpfhoopfqhpghy88888888888888",
      "Key": "ebdc824f-2d52-49b1-ac54-7d85e44291af",
      "Title": "Onward!: Session the Third",
      "ShortTitle": "",
      "Type": "Onward! Papers",
      "Day": "2014-10-23",
      "Time": "16:15 - 16:37",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "This paper introduces the use of Description Logic as a programming\nlanguage, giving: a logic with appropriate concept\nconstructors and sentential forms; some example programs;\nrequirements for the results of program execution; a\ntableau algorithm that provably produces the desired results;\nprinciples for discarding sentences once no longer needed\nso that algorithms with higher time complexity than space\ncomplexity can be implemented; a worked example of program\nexecution; and a discussion of outstanding theoretical\nchallenges.",
      "Items": [
        "36def2d8-3cba-470b-9175-85d48ce59204",
        "4edf93a7-6f32-4ec2-8987-891e57bc248d",
        "901966b8-c2a6-442f-accf-068288fd47bc",
        "f512b9b2-27c5-4e65-a488-ff543d19fb2b"
      ]
    },
    {
      "Id": "3pi1ohfhyo1oiphghx88888888888888",
      "Key": "f3e288ee-d941-44af-aefb-96e0462265aa",
      "Title": "Onward!: Session the Second",
      "ShortTitle": "",
      "Type": "Onward! Papers",
      "Day": "2014-10-23",
      "Time": "11:15 - 11:37",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Integrated development environments (IDEs) dominate the production and maintenance of software. Developers interact intensively with their IDEs while working. These interactions reflect a developer\u2019s thought process and work habits. By capturing and exploiting comprehensive, fine-grained IDE interactions, we can build intelligent IDEs that improve programmer productivity. This next generation of IDEs will incorporate a general framework to capture and exploit IDE interactions, and create an ecosystem of developer-aware applications and plugins. We have developed IDE++ on top of the popular Eclipse IDE to demonstrate the utility of such a framework. To demonstrate IDE++\u2019s comprehensive and granular capture of interactions, we capture then faithfully play a developer\u2019s IDE actions on six nontrivial programming tasks. We built four applications upon IDE++ to illustrate 1) the need for capturing comprehensive, fine-grained IDE interactions, and 2) the promise of developer-aware IDEs.",
      "Items": [
        "809efd51-c660-49dc-9073-90b9e8af376d",
        "ac96716c-174a-4a70-aee1-766039d800d5",
        "dfc99d3d-9833-4af5-8dc8-a20e0f79414e",
        "eebb47ce-4d9a-456a-ab48-96509a6248c3"
      ]
    },
    {
      "Id": "2qqpgqfhqgpogpphgq88888888888888",
      "Key": "0ad9d74a-5a94-47c7-9c5a-025ab59211c7",
      "Title": "DSLDI: Session 4",
      "ShortTitle": "",
      "Type": "Domain-Specific Language Design and Implementation",
      "Day": "2014-10-20",
      "Time": "16:00 - 17:00",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "In this presentation we outline various decisions we took in the design of Faust [Functional\nAudio Stream], a DSL used on stage for concerts and artistic productions, in education and\nresearch, as well as in open sources projects and commercial applications.",
      "Items": [
        "41e6445a-a6b9-4511-a698-19e0e5708f65",
        "88141892-f0b4-4cef-b838-9874c9abb04e"
      ]
    },
    {
      "Id": "3hhqoqoqhoqohqphpg88888888888888",
      "Key": "e18276f4-ee6e-4f85-af5e-55c9c6580e61",
      "Title": "PLATEAU: Invited Speaker: Josh Bloch",
      "ShortTitle": "",
      "Type": "Evaluation and Usability of Programming Languages and Tools",
      "Day": "2014-10-21",
      "Time": "08:30 - 10:00",
      "LocationIndex": "0",
      "Location": "Salem",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "APIs have been with us for 60 years or so. They come in all different shapes, sizes, and disguises. In this talk we'll look at a few APIs, focusing on what makes them good, what makes them successful, and why the correlation between quality and success isn't as high we might want it to be.",
      "Items": [
        "7ccce3b5-d26c-4dfd-8dfc-3b881fca8b90"
      ]
    },
    {
      "Id": "thqhgoohgghooghggp88888888888888",
      "Key": "49948c48-91ab-4450-866f-0b31464052c5",
      "Title": "Doctoral Symposium: Session 4",
      "ShortTitle": "",
      "Type": "Doctoral Symposium: Sponsored by Mircrosoft Research",
      "Day": "2014-10-20",
      "Time": "15:30 - 16:15",
      "LocationIndex": "0",
      "Location": "Portland",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "There is a classic design tension between user friendly versus expert friendly user interface design, and a classic design tension be- tween binary versus printable data format design. This work sets out to expose both sets of design tensions as having the same cause and solution. Information representations and user interface architecture both lack a self-descriptive capacity. By raising the common denominator of computing to a foundation that is metadata friendly, structured editing can place human-readable strings and graphical user interfaces on the same spectrum. Smoothing out the gradients of interacting with computation creates new opportunities for unifying software systems as a developer and having an outlet for accruing and applying computational literacy as an end-user.\n",
      "Items": [
        "5cec4c24-5eb5-4d25-83e3-9e6817bccd76",
        "c9c5fc26-171e-4151-9b74-eb705557c322"
      ]
    },
    {
      "Id": "sgyyghoghgpohhgqqg88888888888888",
      "Key": "0652fccd-591f-4294-9c4b-297341c9d716",
      "Title": "SPLASH-E: Design Issues for Software-Oriented Courses",
      "ShortTitle": "",
      "Type": "SPLASH-E",
      "Day": "2014-10-21",
      "Time": "13:50 - 14:20",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "As part of an evening master\u2019s program, we need to teach software engineering to professionals who work in software development but who have no formal education in software engineering. The first challenge was to decide which subjects should be taught; the second, how to teach these subjects given the time restrictions imposed by the program structure.\n\nThe presenter has requested feedback on his course design from the SPLASH-E community.  He will give a short overview of the course goals and constraints, followed by the current design.  The audience will then provide suggestions and feedback to help the presenter tune the course to its goals.",
      "Items": [
        "03dbb57c-ea71-478b-a36f-d9168e426bdf",
        "2326f319-ded9-43c2-a34b-6bc000771734",
        "79c45662-b64b-4b45-baf9-3eea1a85ab6e",
        "f1b8dea2-b3e6-4b91-a3d4-dc3be5837504"
      ]
    },
    {
      "Id": "zhgqfpfgyopfghqxqq88888888888888",
      "Key": "ac9302e7-3f12-43ea-ae10-1371f6cb5f4f",
      "Title": "AGERE!: Opening & Invited Talk & Full-Papers I",
      "ShortTitle": "",
      "Type": "AGERE! Papers",
      "Day": "2014-10-20",
      "Time": "08:30 - 08:35",
      "LocationIndex": "0",
      "Location": "Salon D",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "While many mobile device applications are backed by cloud servers and storage, the current programming technology is tedious and potentially error prone. Developing individual application parts is not difficult, but developing an entire system is far more challenging and there\u2019s currently no way to map user-level application code to the computational resources available in a flexible way. In this invited talk, Agha talks about a new methodology for building mobile cloud applications that can leverage cloud resources in a scalable way, while dramatically simplifying the development effort. This is the subject of the NSF-funded project entitled \u201cModel-based, Event-Driven Scalable Programming for the Mobile Cloud,\u201d lead by Agha  along with Illinois computer science professor Darko Marinov, in collaboration with Daniel Jackson at MIT. The project aims to develop a high-end interface language that\u2019s simple for programmers, while back-end programming could still be done using an actors model, which is optimal for scaling and was developed by Agha in 1985. This will make it easier to program web applications without compromising their efficiency and scalability in execution, using the actors model. ",
      "Items": [
        "8b43ffe1-308f-4ee1-bfd1-e2b89ad87423",
        "f50d7ffe-f9bd-48b6-8603-d092b134865d",
        "f66d534e-8aa6-4ffd-b1fb-c8825096f428"
      ]
    },
    {
      "Id": "3ypqfpoghgqfpiipph88888888888888",
      "Key": "9baeb5a9-3d3a-4347-9d71-e159981df144",
      "Title": "PSP: Data",
      "ShortTitle": "",
      "Type": "Privacy and Security in Programming",
      "Day": "2014-10-21",
      "Time": "14:00 - 14:30",
      "LocationIndex": "0",
      "Location": "Salon C",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Research on dierential privacy is generally concerned with\nexamining data sets that are static. Because the data sets do\nnot change, every computation on them produces \\one-shot\"\nquery results; the results do not change aside from random-\nness introduced for privacy . There are many circumstances,\nhowever, where this model does not apply, or is simply in-\nfeasible. Data streams are examples of non-static data sets\nwhere results may change as more data is streamed. Theo-\nretical support for dierential privacy with data streams has\nbeen researched in the form of dierentially private stream-\ning algorithms. In this paper, we present a practical frame-\nwork for which a non-expert can perform dierentially pri-\nvate operations on data streams. The system is built as\nan extension to PINQ, a dierentially private programming\nframework for static data sets. The streaming extension\nprovides a programmatic interface for the dierent types of\nstreaming dierential privacy from the literature so that the\nprivacy trade-os of each type of algorithm can be under-\nstood by a non-expert programmer.",
      "Items": [
        "8239a4d7-f2d6-485e-9c80-7cf6a7f1d189",
        "f98d52fc-a9c0-4edf-bcde-c7b0498d6dc1"
      ]
    },
    {
      "Id": "4fopohgphorgohqiyg88888888888888",
      "Key": "9c000a2e-b366-4b08-bf97-a2188c98cc51",
      "Title": "PSP: Introduction",
      "ShortTitle": "",
      "Type": "Privacy and Security in Programming",
      "Day": "2014-10-21",
      "Time": "08:30 - 09:15",
      "LocationIndex": "0",
      "Location": "Salon C",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Welcome and Introduction of Keynote Speaker",
      "Items": [
        "72103364-5d14-4a64-ae3c-6ba0a8d7a633",
        "ad25a867-d7b1-4bda-a45f-f504f42b94cd"
      ]
    },
    {
      "Id": "zogqfhghpogffpippp88888888888888",
      "Key": "cfa060c9-2929-45d3-b522-014c875ab7a4",
      "Title": "DSLDI: Session 2",
      "ShortTitle": "",
      "Type": "Domain-Specific Language Design and Implementation",
      "Day": "2014-10-20",
      "Time": "11:00 - 11:30",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "We want to make it easier and quicker to write well performing scientific\nsimulations code that will (1) run fast on CPUs, and (2) be possible to\nmaintain across the matrix of science experiments simulated vs. code versions\nwhich is inadvertently created in the course of working in an area. Instead of\nprototyping in a high-level language and then rewriting in a lower-level\nlanguage, we created a DSL embedded in Python which is transparently usable,\nretains some OOP features, compiles to machine code, and executes at speed\nsimilar to C.",
      "Items": [
        "5d36725c-528d-4d68-b281-36278701824f",
        "94edd843-07e4-486a-8049-d20c60b9ed51",
        "d9bb16ee-c3bf-43b7-8c18-c8cc779d8970"
      ]
    },
    {
      "Id": "3yyhfpohpgyoohhqip88888888888888",
      "Key": "a9ebea58-04cb-444a-9fbc-a272467e974e",
      "Title": "PSP: Moving Forward",
      "ShortTitle": "",
      "Type": "Privacy and Security in Programming",
      "Day": "2014-10-21",
      "Time": "16:30 - 17:00",
      "LocationIndex": "0",
      "Location": "Salon C",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "The Program Chairs lead a session on the utility of PSP 2014, the lessons learned and how to proceed in 2015.",
      "Items": [
        "424bd2e3-e1b2-42be-90ab-91c4a461880d",
        "451e1c4e-7b69-430f-8fbb-4a354c4cd226",
        "d1bd0cb7-eda1-42c6-a3ec-d1bbc1caca31"
      ]
    },
    {
      "Id": "tpgjgiohhohgqjxypy88888888888888",
      "Key": "371c2299-989e-4465-b946-8d99adfbd3ae",
      "Title": "MobileDeLi: Session 4",
      "ShortTitle": "",
      "Type": "Mobile Development Lifecycle",
      "Day": "2014-10-21",
      "Time": "15:30 - 17:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "a401afe9-0ee8-47cc-b2eb-02281d7f9267"
      ]
    },
    {
      "Id": "3pppghoqqgffygyhoi88888888888888",
      "Key": "b42bc4e2-880f-4ff7-8104-cc43bf840b87",
      "Title": "AGERE!: Short Papers, Posters and Brainstorming ",
      "ShortTitle": "",
      "Type": "AGERE! Papers",
      "Day": "2014-10-20",
      "Time": "15:50 - 15:55",
      "LocationIndex": "0",
      "Location": "Salon D",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "1b259511-2dde-4683-9899-bc9e4591338d",
        "6f958351-5053-4028-bb5d-9147cca33479",
        "86fe3cf4-d715-4468-9ea1-df4ab8e6284f",
        "928bf014-bdd2-4d06-94e6-4d4a9de52936",
        "ae792373-86fc-40b3-a743-69d28fcd1621",
        "cf0c0695-995a-4839-a2ef-c12e274ac237"
      ]
    },
    {
      "Id": "shhgfxopggogppqhog88888888888888",
      "Key": "31561752-1bca-4c03-9a19-3f4df445a051",
      "Title": "SPLASH-E: Design Issues in Drag-and-Drop Languages",
      "ShortTitle": "",
      "Type": "SPLASH-E",
      "Day": "2014-10-21",
      "Time": "16:10 - 16:40",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Wrap up and discussion of what worked, what didn't, and ideas for growing and sustaining SPLASH-E",
      "Items": [
        "5ef2974f-a3b3-40a2-9138-fd2be25111c5",
        "6bf5101b-94e1-467d-8628-1b2bae4a13cf",
        "9ef1a4e8-7c8e-4f10-9143-de8ea58aca60",
        "b6e9e41e-e9da-42de-8765-b79046684aba"
      ]
    },
    {
      "Id": "thqpghohgoyopgpgpg88888888888888",
      "Key": "85949b5c-548b-4842-abec-f320b307c512",
      "Title": "PSP: Software",
      "ShortTitle": "",
      "Type": "Privacy and Security in Programming",
      "Day": "2014-10-21",
      "Time": "11:15 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon C",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "In this paper, we introduce a formal framework for ensuring\nthe correctness of security patches. We discuss the issues\nand provide a sketch of how one could implement a system\nthat proves (in many cases) or strongly veries (in other\ncases) that a security patch xes a bug, and changes nothing\nelse about the semantics of a program. We make use of an\nanalysis of \\bug surfaces\" { the set of inputs that trigger a\nbug, to give a type theoretic characterization of the nonbuggy\nsurface of a program. We thus give credence to the\nLangsec notion that security \naws are often about input\nhandling, and show how formal patch and bug analysis can\nbe used to dene a more correct input type for a program.\n\n",
      "Items": [
        "9e6aa30f-b9a6-4788-91ba-5fe015440888",
        "aabde152-bdfb-4d0c-a551-a61f57b31f25"
      ]
    },
    {
      "Id": "sqipggogqgqopphhgq88888888888888",
      "Key": "538c954b-922c-40d7-8c9f-a67a492852c8",
      "Title": "SPLASH-E: Motivating Student Learning",
      "ShortTitle": "",
      "Type": "SPLASH-E",
      "Day": "2014-10-21",
      "Time": "09:40 - 10:00",
      "LocationIndex": "0",
      "Location": "Salon A",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Casual social time before the actual program begins at 9am",
      "Items": [
        "09fb68d2-dae8-4170-822b-feb4eb296e0f",
        "4406eb7b-3eb4-4e94-8ac4-549a8e9a7742",
        "78f22bca-c0a5-4c37-a596-13a0f6e1602b",
        "83191370-fe70-4fea-b05e-850259a52530"
      ]
    },
    {
      "Id": "syhxogohhohohigygg88888888888888",
      "Key": "22ec83ca-b33f-4853-b66b-728824ea3233",
      "Title": "PLATEAU: Session 3",
      "ShortTitle": "",
      "Type": "Evaluation and Usability of Programming Languages and Tools",
      "Day": "2014-10-21",
      "Time": "13:30 - 13:52",
      "LocationIndex": "0",
      "Location": "Salem",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Developers need help with multithreaded programming. We investigate how two program analysis tools are used by developers at Google: ThreadSafety, an annotation-based static data race analysis, and TSan, a dynamic data race detector. The data was collected by interviewing seven veteran industry developers at Google, and provides unique insight into how four different teams use tooling in different ways to help with multithreaded programming. The result is a collection of perceived pros and cons of using ThreadSafety and TSan, as well as general issues with multithreading.",
      "Items": [
        "15ab400a-cc7a-463b-9114-bdc59f2f48f8",
        "3171ac48-526a-4137-9754-5f56dcf1f466",
        "4aeb4d97-db2d-4af5-80f5-874407f8d038",
        "57d6f6a1-b0fb-45ab-b15e-e8fb3985f250",
        "5a905f90-05ac-4d2f-8763-15cdb1f2e2f4",
        "745974cd-3266-49db-9d88-b0496b46c431"
      ]
    },
    {
      "Id": "3hhhfhfhxopffophhi88888888888888",
      "Key": "f2448064-1370-44bc-a1d3-102ae1399277",
      "Title": "DLS: Technical paper session 2",
      "ShortTitle": "",
      "Type": "DLS",
      "Day": "2014-10-21",
      "Time": "11:30 - 11:50",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "11cf4eba-e492-413d-9ba4-f8b2cde4e7b3",
        "25404fc1-3b91-4d9b-8b79-b1b4ff81fea6",
        "8677c384-60f1-4f9a-b04c-556a184c61a8",
        "ec9c3af1-1643-4fb5-8804-435b286ba0e5"
      ]
    },
    {
      "Id": "3qqhgpophoqfyoipqy88888888888888",
      "Key": "6ad8d776-7b6e-4c54-b6f3-bdb1864e6dfc",
      "Title": "Doctoral Symposium: Session 1",
      "ShortTitle": "",
      "Type": "Doctoral Symposium: Sponsored by Mircrosoft Research",
      "Day": "2014-10-20",
      "Time": "08:30 - 09:15",
      "LocationIndex": "0",
      "Location": "Portland",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "#### Welcome:\n\nLukasz Ziarek, SUNY Buffalo, USA\n\n#### Elevator Talks by Students:\n\nTwo-minute teasers",
      "Items": [
        "067188cd-6e0d-486a-9d15-d8bd0ecd2574",
        "ddfd57a6-e716-4fd6-a9f3-45b7e75e6459"
      ]
    },
    {
      "Id": "zqyffpohqopfhpqqqp88888888888888",
      "Key": "fcd6db01-44bb-44f4-ab50-48b2d8b8d70f",
      "Title": "Multicore Programming Summer School: Friday Afternoon",
      "ShortTitle": "",
      "Type": "Multicore Programming Summer School",
      "Day": "2014-10-17",
      "Time": "14:30 - 15:30",
      "LocationIndex": "0",
      "Location": "Computer Science Conference Room at Portland State University (PSU)",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "57828b00-3d5f-4f5a-9a95-db61f6f9b39d",
        "7d604802-ca07-4586-b80b-f898baa7a3db",
        "7f6f74aa-3021-4af7-8df2-e1dae37a3a4f",
        "8b8619a2-25f5-448e-b97c-74b032517748",
        "8ed5731a-d042-4aa9-8288-8f71b384a08f",
        "9fbe9d58-da44-4ddc-9789-dfa794fe8ecc"
      ]
    },
    {
      "Id": "4pgpfoghggyfgghpgx88888888888888",
      "Key": "8e4b61c4-4a06-4831-8cc2-062376d207ac",
      "Title": "Multicore Programming Summer School: Saturday Afternoon",
      "ShortTitle": "",
      "Type": "Multicore Programming Summer School",
      "Day": "2014-10-18",
      "Time": "13:00 - 16:00",
      "LocationIndex": "0",
      "Location": "Computer Science Conference Room at Portland State University (PSU)",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "01745629-ece7-4f43-8768-ff6439422cc6",
        "276a488b-85b7-431c-abd4-351ec69c33cf"
      ]
    },
    {
      "Id": "31hyfpggpgoogiyqpi88888888888888",
      "Key": "2fee54eb-1e46-431f-9a0e-6188cee62e96",
      "Title": "Multicore Programming Summer School: Sunday Afternoon",
      "ShortTitle": "",
      "Type": "Multicore Programming Summer School",
      "Day": "2014-10-19",
      "Time": "13:00 - 15:00",
      "LocationIndex": "0",
      "Location": "Computer Science Conference Room at Portland State University (PSU)",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "9c173dfa-48b5-416c-aaad-c62e796e2361",
        "f484ca72-bdfb-4c22-95bf-452b21701791"
      ]
    },
    {
      "Id": "2igfogfgxohfghxgyq88888888888888",
      "Key": "0d950310-d053-41bb-a450-1408ad07fbc7",
      "Title": "Multicore Programming Summer School: Saturday Morning",
      "ShortTitle": "",
      "Type": "Multicore Programming Summer School",
      "Day": "2014-10-18",
      "Time": "09:00 - 12:00",
      "LocationIndex": "0",
      "Location": "Computer Science Conference Room at Portland State University (PSU)",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "6c1b57e0-9996-4122-8e7b-a0602288073c"
      ]
    },
    {
      "Id": "sixgopopgghgppqqof88888888888888",
      "Key": "1398ab25-a4cf-4a40-8548-b3a8e66e1a00",
      "Title": "Multicore Programming Summer School: Sunday Morning",
      "ShortTitle": "",
      "Type": "Multicore Programming Summer School",
      "Day": "2014-10-19",
      "Time": "09:00 - 12:00",
      "LocationIndex": "0",
      "Location": "Computer Science Conference Room at Portland State University (PSU)",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "782230c3-2810-4c85-a776-61eb6220c780"
      ]
    },
    {
      "Id": "4qhpopoggopgphqpyg88888888888888",
      "Key": "9f9c711c-d3bf-4030-bb79-d571f76cbe25",
      "Title": "SEPS: Invited Speaker: Frank Schlimbach - Session B",
      "ShortTitle": "",
      "Type": "Software Engineering for Parallel Systems",
      "Day": "2014-10-21",
      "Time": "10:30 - 11:20",
      "LocationIndex": "0",
      "Location": "Salon B",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "The major difficulty of traditional approaches to writing parallel software stems from their serial heritage. Typical serial programs are over-constraint in the sense that they make decisions that are semantically unnecessary. At the same time they do not explicitly  express the information that's needed to deduce a correct parallel program execution. The programmer is left alone with the painful task of separating what in the given serial execution ordering is semantically required and what is only a serialization artefact. A more productive approach is to let the programmer explicitly identify what precludes parallel execution in the application and leave out all others. There are exactly two reasons that computations cannot execute in parallel. If one computation produces data that the other one consumes, the producer must execute before the consumer. If one computation determines if another will execute, the controller must execute before the controllee. CnC lets you define exactly these two types of dependences between computations. With this information a programmer, a compiler or a runtime system can then take care of a correct serial or parallel execution. Its high-level but yet precise formulation allows an extensive separation of semantic concerns and tuning concerns such as parallelization. This makes optimizations for a given platform as well as migrating between different targets simpler. Last but not least a CnC specification puts no artificial limits on the parallelization and so allows fully asynchronous execution, not even requiring barriers between modules.",
      "Items": [
        "1dde41a3-59ea-4ce8-b6d0-20c03ba58a94",
        "49556f76-7177-40d0-8233-6802fd108dac",
        "5d7f75b7-61bf-43dd-a6df-101ff2a18ed5"
      ]
    },
    {
      "Id": "togpfigpqghophhixi88888888888888",
      "Key": "29c031a4-1687-4cf6-991c-0f284668ba87",
      "Title": "SEPS: Invited Speaker: Michael Pradel - Session A",
      "ShortTitle": "",
      "Type": "Software Engineering for Parallel Systems",
      "Day": "2014-10-21",
      "Time": "08:30 - 08:40",
      "LocationIndex": "0",
      "Location": "Salon B",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Developers of concurrent software strive for two contradictory goals. On\nthe one hand, the software should be reliable, which requires to\ncarefully synchronize concurrent accesses to shared data. On the other\nhand, the software should be efficient, which is difficult to realize in\nthe presence of unnecessary synchronization operations. To help\ndevelopers balance these two goals, this talk explores program analyses\nthat detect correctness and performance problems. The presented analyses\nare automatic, in the sense that they run on existing software with\nminimal effort, and precise, in the sense that all reported problems are\ntrue positives. The key idea is to combine techniques for generating\nconcurrent tests with dynamic analyses that detect problems even though\nthere is no explicit specification. We present two implementations of\nthis idea that detect problems in widely used thread-safe classes, and\ndiscuss open challenges to be addressed in future research.\n",
      "Items": [
        "1cc1aa2e-1307-43bb-ad11-0200f1062ea8",
        "1f42cff0-d0d7-4409-b762-4a9c2192e133",
        "bcd19a18-8c8e-430f-b52e-309367c0b9cd"
      ]
    },
    {
      "Id": "4pppohogyohopqgppp88888888888888",
      "Key": "f7b45d3c-d64d-43af-a91e-3a5f11d1f13e",
      "Title": "SEPS: Session D",
      "ShortTitle": "",
      "Type": "Software Engineering for Parallel Systems",
      "Day": "2014-10-21",
      "Time": "15:50 - 16:10",
      "LocationIndex": "0",
      "Location": "Salon B",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "6a919a61-4904-4a58-a1ab-96ec6a84318f",
        "a05f8871-1870-4561-a62a-86357518544f",
        "a64ded47-b132-46d3-90d9-0dd12c105325",
        "fe91c80c-6e10-4623-865e-48ed97472438"
      ]
    },
    {
      "Id": "4ihhgpgghghgpqfpgg88888888888888",
      "Key": "9f875546-96a7-4228-9485-a6e710a71150",
      "Title": "SEPS: Invited Speaker: Jeffrey Carver - Session C",
      "ShortTitle": "",
      "Type": "Software Engineering for Parallel Systems",
      "Day": "2014-10-21",
      "Time": "14:20 - 14:40",
      "LocationIndex": "0",
      "Location": "Salon B",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "The increase in the importance of Computational Science software motivates the need to identify and understand which software engineering (SE) practices are appropriate. Because of the uniqueness of the computational science domain, exiting SE tools and techniques developed for the business\/IT community are often not efficient or effective. Appropriate SE solutions must account for the salient characteristics of the computational science development environment. To identify these solutions, members of the SE community must interact with members of the computational science community. This presentation will discuss the findings from a series of case studies of CSE projects and the results of an ongoing workshop series. First, a series of case studies of computational science projects were conducted as part of the DARPA High Productivity Computing Systems (HPCS) project. The main goal of these studies was to understand how SE principles were and were not being applied in computational science along with some of the reasons why. The studies resulted in nine lessons learned about computational science software that are important to consider moving forward. Second, the Software Engineering for Computational Science and Engineering workshop brings together software engineers and computational scientists. The outcomes of this workshop series provide interesting insight into potential future trends.",
      "Items": [
        "37c885cf-ff18-4dee-931a-7a999713a480",
        "7aaf6e7b-8f6e-48b8-8d5e-b2c554b50e44",
        "cf08c66d-368e-4fc4-9d60-95e30a588cda"
      ]
    },
    {
      "Id": "spyhgpfphoygyghqqo88888888888888",
      "Key": "62e0fa83-60d3-4c65-baf5-be1590d87eb0",
      "Title": "FOOL: FOOF (Future of Object-Oriented Foundations)",
      "ShortTitle": "",
      "Type": "Foundations of Object-Oriented Languages",
      "Day": "2014-10-20",
      "Time": "14:15 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "bde31022-675b-4119-91b1-a9372ec4248f",
        "f073ad5b-f138-4614-899e-9e309fe1f9c0"
      ]
    },
    {
      "Id": "4hqpopfhhgyogppqgi88888888888888",
      "Key": "f672c87a-b1e4-4594-8edb-203b1e6f1388",
      "Title": "FOOL: Welcome, Introductions, Discussion",
      "ShortTitle": "",
      "Type": "Foundations of Object-Oriented Languages",
      "Day": "2014-10-20",
      "Time": "08:30 - 10:00",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "852e205c-0559-4d71-b22e-3213d60e4752"
      ]
    },
    {
      "Id": "ugyyohophgpoyirqhp88888888888888",
      "Key": "7961bfdb-c64a-4c63-86ae-cc69f9c990e3",
      "Title": "FOOL: Research Papers",
      "ShortTitle": "",
      "Type": "Foundations of Object-Oriented Languages",
      "Day": "2014-10-20",
      "Time": "10:30 - 11:00",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "b8602b6f-fe45-4e75-b745-b3feacca247d",
        "bd28a1a3-64f0-4ba1-9a42-c972ce1752c2",
        "ee91b938-b485-4471-8f7f-25bf298dabba"
      ]
    },
    {
      "Id": "3hppggfhpgpohohhij88888888888888",
      "Key": "f353f15d-5111-492c-94ae-191a47679899",
      "Title": "FOOL: Keynote",
      "ShortTitle": "",
      "Type": "Foundations of Object-Oriented Languages",
      "Day": "2014-10-20",
      "Time": "15:30 - 17:00",
      "LocationIndex": "0",
      "Location": "Salon I",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "",
      "Items": [
        "724c99f3-0cf2-4a59-8834-57ca28fe89c8"
      ]
    },
    {
      "Id": "3pqpghopgggghrpqho88888888888888",
      "Key": "f3b3e53a-674a-4c12-8349-479e5c7d58a1",
      "Title": "Tutorials: Tutorial 8: Exercises in Programming Style",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-23",
      "Time": "15:30 - 17:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Back in the 1940s, a French writer called Raymond Queneau wrote an interesting book with the title Exercises in Style featuring 99 renditions of the exact same short story, each written in a different style. In my book \u201cExercises in Programming Style\u201d (available in June 2014) I shamelessly do the same for a simple program. From monolithic to object-oriented to continuations to relational to publish\/subscribe to monadic to aspect-oriented to map-reduce, and much more, you will get a tour through the richness of human computational thought by means of implementing one simple program in many different ways. This is more than an academic exercise; large-scale systems design feeds on these ways of thinking. I will talk about the dangers of getting trapped in just one or two prescribed styles during your career, and the need to truly understand this wide variety of concepts when architecting software.",
      "Items": [
        "2577cb50-08d8-49b3-93c3-47e6aeca9acd"
      ]
    },
    {
      "Id": "thpioofpggpgppgiqp88888888888888",
      "Key": "65397b69-e0c4-4c11-96c9-5a3c0598d8b4",
      "Title": "Tutorials: Tutorial 10: Programming Distributed Algorithms",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-24",
      "Time": "10:30 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon H",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "This tutorial gives an overview of methods and languages for programming distributed algorithms.  It includes (1) an introduction to distributed algorithms, including Paxos for distributed consensus at the core of distributed services; (2) a method for programming distributed algorithms with (a) high-level control flows that are easy to understand as in pseudo-code, and (b) precise semantics for rigorous analysis as in specification languages; (3) a language, DistAlgo, that minimally extends conventional object-oriented programming languages for such programming of distributed algorithms; and (4) demonstrations with an implementation of DistAlgo in Python.  DistAlgo has been used to easily implement distributed algorithms and services in dozens of course projects.\n",
      "Items": [
        "434aa9f1-8db1-40a7-a78b-897d86cdb05d"
      ]
    },
    {
      "Id": "zgprfpopqgpopqfgxh88888888888888",
      "Key": "ca42b59e-3e2c-4d8b-81cd-5c5e0013ba47",
      "Title": "Tutorials: Tutorial 2: Rust Programming Language",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-22",
      "Time": "10:30 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon H",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Rust is a new programming language targeting systems-level applications. Rust offers a similar level of control over performance to C++, but guarantees type soundness, memory safety, and data-race freedom. One of Rust's distinguishing features is that, like C++, it supports stack allocation and does not require the use of a garbage collector. In this tutorial, we will cover the fundamentals of writing Rust programs and understanding how its type system works.",
      "Items": [
        "00448033-c2d8-4540-975c-fccb33816ce3"
      ]
    },
    {
      "Id": "3hqpogghoogfqpipfq88888888888888",
      "Key": "3f93c93a-c207-441b-a140-6e4a971e00f4",
      "Title": "Tutorials: Tutorial 5: One VM to Rule Them All",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-23",
      "Time": "10:30 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "We present Truffle, a novel open-source framework for implementing managed languages in Java. The language implementer writes an AST interpreter. It uses our framework that allows tree rewriting during AST interpretation. Tree rewrites incorporate type feedback and other profiling information into the tree, thus specializing the tree and augmenting it with run-time information. When the tree reaches a stable state, partial evaluation compiles the tree into optimized machine code. The partial evaluation is done by Graal, the just-in-time compiler of our version of the Java HotSpot VM.\n\nOracle Labs as well as external research groups have implemented a variety of programming languages on top of Truffle, including JavaScript, Ruby, R, Python, and Smalltalk. They are competitive with or even faster than the best implementations that existed before.\n\nThis tutorial is both for newcomers and existing users of Truffle. We introduce the basic concepts of Truffle and show you how to get started with your own high-performance language implementation. And we present recently added features of Truffle, for example, a language-independent object model; and the API to perform guest-language stack walking and local variable introspection without losing performance.",
      "Items": [
        "4cd9b2f7-c296-47e3-84dc-15d7e485bdb8"
      ]
    },
    {
      "Id": "shpgoqghhoygphxhpp88888888888888",
      "Key": "33745b24-c4f7-4784-aae9-0e18bc09f2c1",
      "Title": "Tutorials: Tutorial 7: SoftEng for Mobile Dev",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-23",
      "Time": "13:30 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "In recent years, there has been exponential growth in both the development and the use of mobile applications.  During the development performance, security and energy saving must to be taken into account. The goal of this tutorial is to introduce of mobile applications development using an IBM mobile development platform. As part of this tutorial, we review the challenges in mobile development, present advanced techniques for development of mobile applications according to the best practices, and present refactoring and analysis for automatic identification and fixing of anti patterns in mobile applications. ",
      "Items": [
        "d1fc93b5-6ba2-4823-914d-d7b39b16cd9b"
      ]
    },
    {
      "Id": "ryhyohfhhgyg1qpxgq88888888888888",
      "Key": "00ae85bf-f360-4628-8de8-fff6c5bb43e5",
      "Title": "Tutorials: Tutorial 11: Generative Programming",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-24",
      "Time": "13:30 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Most problems can be solved by adding a level of indirection. But indirection does not come for free -- it has a high cost in performance!\n\nWhen performance matters, programmers pick C over high-level alternatives. The drawbacks are well known: buggy systems, security vulnerabilities, poor programmer productivity, etc.\n\nAn alternative approach is generative programming: writing expressive high-level programs that generate fast low-level code at runtime.  While there are successful program generators for key libraries (BLAS, FFT), generative programming has remained somewhat of a black art.\n\nThis tutorial provides a step-by-step introduction to the open-source LMS (Lightweight Modular Staging) framework, which brings runtime code generation and compilation to Scala programs.\n\nAs an example of serious systems-level programming, we will build, within this 90 minute tutorial, a SQL query engine that outperforms existing database systems and consists of just about 500 lines of high-level Scala code.\n\nAlong the way, we will discuss powerful generative programming patterns such as mixed-stage (static\/dynamic) data structures and mechanically turning interpreters into compilers through staging (e.g. for SQL queries or regular expressions).",
      "Items": [
        "cee1e2f6-c76e-4a3c-9345-039ecd71b494"
      ]
    },
    {
      "Id": "s1ppfqggqoqgppphyp88888888888888",
      "Key": "43dfa83f-3b97-426e-a7e8-0d4c3e64bec1",
      "Title": "Tutorials: Tutorial 9: Designing PL for People",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-24",
      "Time": "10:30 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "We will conduct an interactive tutorial describing how to evaluate the impact of language design decisions on people, focusing on objective and data-driven methods. This includes a wide variety of quantitative and qualitative empirical techniques, strategies for conducting experiments or randomized controlled trials, and case studies of what can\/cannot be tackled using such methods.  We will also discuss the evidence for or against competing design choices, showing what current beliefs in language design are confirmed, plausible, busted, or which have not been tested. Finally, participants will practice designing experimental protocols, obtaining expert feedback on the alternatives.",
      "Items": [
        "be093c42-4175-4d73-9a71-8711bb7c09bd"
      ]
    },
    {
      "Id": "uyp1gyoppgggphpphp88888888888888",
      "Key": "88fcc3fd-7afc-4c4a-8206-c6463cd0576a",
      "Title": "Tutorials: Tutorial 1: Quality Assurance to Agile Quality",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-22",
      "Time": "10:30 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Traditionally, QA is involved late in the development process, working independent from the development team. However, in agile teams, QA works more closely with the whole team on an ongoing and basis. QA in agile groups are more proactive, working to ensure quality in all facets of the development process. Because of this, Agile QA needs to know how to understand both requirements and the code, know how to write their own automated suite cases, and be involved in all aspects of the agile process. This tutorial will examine how the roles of QA shift as organizations become more agile. \n",
      "Items": [
        "8c590903-000a-4a35-a180-071f34b18a62"
      ]
    },
    {
      "Id": "4ioxfqfphgyghxxhhy88888888888888",
      "Key": "f8781bad-4f60-4a47-9fa9-82bacb0871dc",
      "Title": "Tutorials: Tutorial 6: Hardware Design Using Liquid Metal",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-23",
      "Time": "10:30 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon H",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "The tutorial provides a practical introduction to the Liquid Metal language and toolchain, which is now publicly available from http:\/\/lime.watson.ibm.com.  Liquid Metal makes hardware design accessible to software engineers, using a language based on Java and incorporating ideas from other languages.  In contrast, previous High Level Synthesis tools use a subset of C.  The goal is of interest because specialized hardware can achieve massive parallelism and devotes more of its energy to productive computation rather than ISA interpretation.  The tutorial will introduce the language and will include a programming exercise targeting a Field Programmable Gate Array (FPGA). ",
      "Items": [
        "27fdab3c-6725-40ec-9728-5980b54e8a55"
      ]
    },
    {
      "Id": "3yghfgohpgqghhhg1q88888888888888",
      "Key": "9aea4319-315e-491e-8c87-73651712fdc8",
      "Title": "Tutorials: Tutorial 4: Coccinelle Tool for C Code",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-22",
      "Time": "13:30 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon H",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Coccinelle is a program matching and transformation tool for C code, targeting bug finding and fixing, as well as the automation of pervasive source code evolutions. It can also be used for applications such as code understanding and calculation of software metrics, making it relevant to both software developers and software researchers.  A unique feature of Coccinelle is its combination of configurability and accessibility, relying on a patch-like notation that allows developers to specify patterns and transformations that are specific to their software project.  This interactive tutorial will give an overview of Coccinelle, in terms of examples from real software.",
      "Items": [
        "a3905fe9-fb9b-4cab-8c6f-aa5da2046525"
      ]
    },
    {
      "Id": "shphfqghqgpogpppyi88888888888888",
      "Key": "53732f92-3a95-479b-80eb-063a5ad5dc77",
      "Title": "Tutorials: Tutorial 3: Language Composition",
      "ShortTitle": "",
      "Type": "Tutorials",
      "Day": "2014-10-22",
      "Time": "13:30 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon G",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "We want better programming languages, but \u201cbetter\u201d invariably ends up becoming \u201cbigger\u201d. Since we can't keep making our languages bigger, what alternatives do we have? I propose language composition as a possible solution to this long standing problem. Language composition means merging two languages and allowing them to be used together. At its most fine-grained, this could allow multiple programming languages to be used together within a single source file. However, language composition is not a new idea. It has failed in the past because editing composed programs was intolerably difficult and the resulting programs ran too slow to be usable. Without good solutions to these problems, language composition will remain an unrealised ideal. I will show how the work we are doing is beginning to address both aspects. We have built a prototype editor utilising a novel concept 'language boxes', which allows one to edit composed programs in a natural way. We are tackling the performance problem by composing together interpreters using meta-tracing, allowing us to build composed VMs with custom JITs that naturally optimise across different language's run-times. While we are much nearer the beginning of the journey than the end, our initial research has allowed us to build a simple composition of two very different languages: Python and Prolog.",
      "Items": [
        "115208f8-b5d0-4367-b45c-e012128151e7"
      ]
    },
    {
      "Id": "4phioxggggpoogqqhp88888888888888",
      "Key": "d8a64569-aab9-4216-83eb-b1349de656d0",
      "Title": "OOPSLA: Debugging",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-23",
      "Time": "15:30 - 15:52",
      "LocationIndex": "0",
      "Location": "Salon E",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Testing and static analysis can help root out bugs in programs, but not in data. This paper introduces data debugging, an approach that combines program analysis and statistical analysis to find potential data errors. Since it is impossible to know a priori whether data are erroneous or not, data debugging locates data that has an unusual impact on the computation. Such data is either very important, or wrong. Data debugging is especially useful in the context of data-intensive program- ming environments that intertwine data with programs in the form of queries or formulas. We present the first data debugging tool, CheckCell, an add-in for Microsoft Excel. CheckCell identifies cells that have an unusually high impact on the spreadsheet\u2019s computations. We show that CheckCell is both analytically and empirically fast and effective. We show that it successfully finds injected typographical errors produced by a generative model trained with data entry from 100,000 Mechanical Turk tasks. CheckCell also automatically identifies a key flaw in the infamous Reinhart and Rogoff spreadsheet.",
      "Items": [
        "1764580c-a87a-432c-a93e-50ed39bc2962",
        "542f0e28-9734-4f88-83c7-8ee5094dedf7",
        "7a675847-1117-4438-887f-7d6c7fea78d3",
        "bd526d59-4011-4dc6-8fcd-004d8342e570"
      ]
    },
    {
      "Id": "3phgohoghoyfpyhip188888888888888",
      "Key": "9a3a3833-b56c-4239-bed2-c1fa3697c4ff",
      "Title": "OOPSLA: Static Analysis",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-24",
      "Time": "13:52 - 14:15",
      "LocationIndex": "0",
      "Location": "Salon E",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "We address the problem of computing semantic differences between a program and a patched version of the program. Our goal is to obtain a precise characterization of the difference between program versions, or establish their equivalence. We focus on infinite-state numerical programs, and use abstract interpretation to compute an over-approximation of program differences.\n\nComputing differences and establishing equivalence under abstraction requires abstracting relationships between variables in the two programs. Towards that end, we use a correlating abstract domain to compute a sound approximation of these relationships which captures semantic difference. This approximation can be computed over any interleaving of the two programs. However, the choice of interleaving can significantly affect precision. We present a speculative search algorithm that aims to find an interleaving of the two programs with minimal abstract semantic difference. This method is unique as it allows the analysis to dynamically alternate between several interleavings.\n\nWe have implemented our approach and applied it to real-world examples including patches from Git, GNU Coreutils, as well as a few handpicked patches from the Linux kernel and the Mozilla Firefox web browser. Our evaluation shows that we compute precise approximations of semantic differences, and report few false differences.",
      "Items": [
        "198e3291-12c0-447c-a234-31dde5c7cf02",
        "4d8130bb-a54a-4c02-afb3-67092ac54492",
        "5bdf634d-d243-4fda-a523-5862368426eb",
        "60b522bf-ff1c-40da-8de8-3fb832ea9c2b"
      ]
    },
    {
      "Id": "shhooqohpoiohghhhg88888888888888",
      "Key": "318285c0-db9d-49d4-a96d-370358715611",
      "Title": "OOPSLA: Distributed Computing",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-24",
      "Time": "13:52 - 14:15",
      "LocationIndex": "0",
      "Location": "Salon F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Partitioned Global Address Space (PGAS) environments simplify writing parallel code for clusters because they make data movement implicit \u2014 dereferencing global pointers automatically moves data around. However, it does not free the programmer from needing to reason about locality \u2014 poor placement of data can lead to excessive and even unnecessary communication. For this reason, modern PGAS languages such as X10, Chapel, and UPC allow programmers to express data layout constraints and explicitly move computation. This places an extra burden on the programmer, and is less effective for applications with limited or data-dependent locality (e.g., graph analytics).\n\nThis paper proposes Alembic, a new static analysis that frees programmers from having to manually move computation to exploit locality in PGAS programs. It works by determining regions of code that access the same cluster node, then transforming the code to automatically migrate parts of the execution by passing around continuations to increase the proportion of accesses to local data. We implement the analysis and transformation for C++ in LLVM and show that in irregular application kernels, Alembic can achieve 82% of the hand-tuned performance (for comparison, na\u00efve compiler-generated communication achieves only 13%).",
      "Items": [
        "36d9a7ea-5f28-4748-bc97-1a29ee3f09a5",
        "73cc54b6-0688-445d-b831-bf46496000d8",
        "a58e713a-16ea-46a5-b4ea-2473a60c25a4",
        "b554e983-c892-4ca9-b23f-1d61c52f216e"
      ]
    },
    {
      "Id": "3qhpohfphopfqhgiph88888888888888",
      "Key": "a65f760f-d723-4a29-a4a4-f4364359a656",
      "Title": "OOPSLA: Program Analysis and the Web",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-22",
      "Time": "11:37 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon E",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Several program analysis tools---such as plagiarism detection and bug finding---rely on knowing a piece of code\u2019s relative semantic importance. For example, a plagiarism detector should not bother reporting two programs that have an identical simple loop counter test, but should report programs that share more distinctive code. Traditional program analysis techniques (e.g., finding data and control dependencies) are useful, but do not say how surprising or common a line of code is. Natural language processing researchers have encountered a similar problem and addressed it using an n-gram model of text frequency, derived from statistics computed over text corpora.\n\nWe propose and compute an n-gram model for programming languages, computed over a corpus of 2.8 million JavaScript programs we downloaded from the Web. In contrast to previous techniques, we describe a code n-gram as a subgraph of the program dependence graph that contains all nodes and edges reachable in n steps from the statement. We can count n-grams in a program and count the frequency of n-grams in the corpus, enabling us to compute tf-idf-style measures that capture the differing importance of different lines of code. We demonstrate the power of this approach by implementing a plagiarism detector with accuracy that beats previous techniques, and a bug-finding tool that discovered over a dozen previously unknown bugs in a collection of real deployed programs.",
      "Items": [
        "0c6af2e2-7eb1-4811-bb3f-aadadc43e461",
        "6526c692-6486-48a9-8de1-05550b852582",
        "8043f0b2-51f1-4ce0-b65f-b224381c84e9",
        "a9de3377-fadf-4f92-af75-a1e1dc9948e8"
      ]
    },
    {
      "Id": "4qygfhghhgigygghpg88888888888888",
      "Key": "7f7ede03-4657-4645-8955-fb436019c660",
      "Title": "OOPSLA: Energy and Performance",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-23",
      "Time": "11:37 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Java programmers are faced with numerous choices in managing concurrent execution on multicore platforms. These choices often have different trade-offs (e.g., performance, scalability, and correctness guarantees). This paper analyzes an additional dimension, energy consumption. It presents an empirical study aiming to illuminate the relationship between the choices and settings of thread management constructs and energy consumption. We consider three important thread management constructs in concurrent programming: explicit thread creation, fixed-size thread pooling, and work stealing. We further shed light on the energy\/performance trade-off of three \"tuning knobs\" of these constructs: the number of threads, the task division strategy, and the characteristics of processed data. Through an extensive experimental space exploration over real-world Java programs, we produce a list of findings about the energy behaviors of concurrent programs, which are not always obvious. The study serves as a first step toward improving energy efficiency of concurrent programs on parallel architectures.",
      "Items": [
        "0ae3bc67-c4ef-4b98-801f-c49c672c4fef",
        "6becb54c-851f-48af-9dcf-a54eddb8f571",
        "7c472f9f-601e-41ad-85f4-2af85e52d0c8",
        "ff16d90c-0018-4ed3-8c22-ba9489589a2d"
      ]
    },
    {
      "Id": "spyfgpgpxoygoggpyp88888888888888",
      "Key": "512cea10-54d8-4cda-adb7-a03332a3fac2",
      "Title": "OOPSLA: Compilation Tools",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-23",
      "Time": "15:52 - 16:15",
      "LocationIndex": "0",
      "Location": "Salon F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "The efficiency of a build system is an important enabler\nof the productivity of software developers. As a result,\ndeveloper teams have been adopting build systems that\nallow them to maximize build parallelization. However,\nmigrating the existing legacy build scripts to new build\nsystems is tedious and error-prone. Yet, there has been\nno prior work that automate migration of build scripts.\n\nThis paper proposes the first approach for migrating\nlegacy build scripts to new build systems. Our approach\nworks in two phases. In the first phase, from a set of\nbuild execution traces, we synthesize build scripts that\naccurately capture the intent of the original build.\nHowever, the synthesized build scripts are typically long and\nhard to maintain. In the second phase, we apply refactorings\nthat raise the level of abstraction of the synthesized\nscripts (e.g., extracting common code). As the\napplication order of refactorings may lead to different\nbuild scripts, we use a search-based approach that explores\nvarious refactoring sequences to identify the best\n(e.g., shortest) build script. We optimize search-based\nrefactoring with state matching and partial-order reduction\nto explore more sequences in the same amount of\ntime. We implemented the proposed two-phase migration\napproach in a tool, called Metamorphosis, which\nhas recently been used within Microsoft.",
      "Items": [
        "004d5905-a47a-43aa-b4f1-f03b67e27c12",
        "47ca1d6a-bdf4-4d09-8976-3dc1787f9f56",
        "6e7e137d-6768-4da1-baa7-dca5ac63f0b0",
        "fb751d09-b4d6-4305-83ca-4a49e8261fcb"
      ]
    },
    {
      "Id": "2qpgfqfhhoqfqqpxrx88888888888888",
      "Key": "b1f54d03-2d63-4454-af53-6dd66abc9fac",
      "Title": "OOPSLA: Dynamic Optimization",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-24",
      "Time": "10:52 - 11:15",
      "LocationIndex": "0",
      "Location": "Salon F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Predicting a sequence of upcoming function calls is important for optimizing programs written in modern managed languages (e.g., Java, Javascript, C#.) Existing function call predictions are mainly built on statistical patterns, suitable for predicting a single call but not a sequence of calls.  This paper presents a new way to enable call sequence prediction, which exploits program structures through Probabilistic Calling Automata (PCA), a new program representation that captures both the inherent ensuing relations among function calls, and the probabilistic nature of execution paths.  It shows that PCA-based prediction outperforms existing predictions, yielding substantial speedup when being applied to guide Just-In-Time compilation. By enabling accurate, efficient call sequence prediction for the first time, PCA-based predictors open up many new opportunities for dynamic program optimizations.",
      "Items": [
        "4779e334-dc6e-4180-b509-d608d2c2adec",
        "6f68905b-84ae-4785-ad99-f3fb891465b1",
        "cc917f76-f43e-4fb7-a9eb-bfa82cbe6305",
        "cfb6ace2-b655-42fd-a532-d14084bfaa1d"
      ]
    },
    {
      "Id": "tfppoygpxopfpgqqgp88888888888888",
      "Key": "67010fc5-ece9-4bbb-be20-e004d99c024e",
      "Title": "OOPSLA: Specification and Verification",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-24",
      "Time": "10:52 - 11:15",
      "LocationIndex": "0",
      "Location": "Salon E",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Many real programs are written in multiple different programming languages, and supporting this pattern creates challenges for formal compiler verification.  We describe our Coq verification of a compiler for a high-level language, such that the compiler correctness theorem allows us to derive partial-correctness Hoare-logic theorems for programs built by linking the assembly code output by our compiler and assembly code produced by other means.  Our compiler supports such tricky features as storable cross-language function pointers, without giving up the usual benefits of being able to verify different compiler phases (including, in our case, two classic optimizations) independently.  The key technical innovation is a mixed operational and axiomatic semantics for the source language, with a built-in notion of abstract data types, such that compiled code interfaces with other languages only through axiomatically specified methods that mutate encapsulated private data, represented in whatever formats are most natural for those languages.",
      "Items": [
        "14e516e0-27d6-4bb6-a306-3c0908ec1b94",
        "1610dc8b-9c5f-4bed-8e57-701c40b1a850",
        "49faf9d9-bd2f-4166-8645-b8cbeec1d4b1",
        "fd1298f1-3f87-4bc7-a95d-5b5f99b53a85"
      ]
    },
    {
      "Id": "3yqpfqgphgpoppyrhq88888888888888",
      "Key": "e6ead71f-48c8-4b93-90ef-6a3cbff857f5",
      "Title": "OOPSLA: Concurrency",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-23",
      "Time": "13:30 - 13:52",
      "LocationIndex": "0",
      "Location": "Salon F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Non-volatile main memory, such as memristors or phase\nchange memory, can revolutionize the way programs persist\ndata. In-memory objects can themselves be persistent without\nthe need for a separate persistent data storage format.\nHowever, the challenge is to ensure that such data remains\nconsistent if a failure occurs during execution.\n\nIn this paper, we present our system, called Atlas, which\nadds durability semantics to lock-based code, typically allowing\nus to automatically maintain a globally consistent\nstate even in the presence of failures. We identify failure-atomic\nsections of code based on existing critical sections\nand describe a log-based implementation that can be used\nto recover a consistent state after a failure. We discuss several\nsubtle semantic issues and implementation tradeoffs. We\nconfirm the ability to rapidly flush caches as a core implementation\nbottleneck and suggest partial solutions. Experimental\nresults confirm the practicality of our approach and\nprovide insight into the overheads of such a system.",
      "Items": [
        "4d83525e-7740-4652-adb1-dd1f6a018676",
        "59e62b5f-77a0-4beb-b776-a49cb032c0da",
        "72169736-6f5d-4ac0-8906-6f90ff86bd3e",
        "bd7435e4-09c5-429e-ac39-e394257b2765"
      ]
    },
    {
      "Id": "3pfyfyopyopopryq1h88888888888888",
      "Key": "7ba501fa-3dee-4cec-a1ce-7b9fecf7ff56",
      "Title": "OOPSLA: Runtime Systems",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-22",
      "Time": "11:37 - 12:00",
      "LocationIndex": "0",
      "Location": "Salon F",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Garbage collectors for managed languages are exact or conservative. An exact collector identifies references precisely and may move referents and update references. A conservative collector is constrained by ambiguous references in two ways. (1) Since they may be pointers, the collectors must retain referents. (2) Since they may be values, the collectors cannot modify them, pinning their referents. This paper is the first to show that retaining dead objects and pinning objects affects remarkably few heap objects: for Java benchmarks, < 0.01% are falsely retained and 0.03% are pinned. \n\nThe larger effect is collector design. Prior conservative collectors either (1) use mark-sweep and forgo moving all objects, or (2) use mostly copying and pin entire pages. This paper shows this overhead is substantial: 12% and 45% respectively, compared to generational collection in a Java VM. We introduce high performance conservative Immix and reference counting (RC). Immix is a mark-region collector that combines fine line-grain pinning and opportunistic copying of unambiguous referents. Deferred RC simply needs an object map to deliver the first conservative RC in the literature. We implement six exact collectors and their conservative counterparts. Conservative Immix variants and RC come within 2 to 3% of their exact counterparts. In particular, conservative RC Immix is slightly faster than a well-tuned exact generational collector. For managed languages, these findings show conservative collection is compatible with high performance.",
      "Items": [
        "422f5c51-fe98-4546-bf2d-b4a55ac2c9c9",
        "6c46a589-fdcc-4ee5-8b8b-48681bc38613",
        "80a134c8-b853-4c3e-9fb1-374ba33751f6",
        "c7616948-f669-42cb-825f-02e1a92a1617"
      ]
    },
    {
      "Id": "shppfpghpggogy1pqq88888888888888",
      "Key": "2572d46b-3e19-48d3-934c-40eddf0df49b",
      "Title": "OOPSLA: Type Systems",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-23",
      "Time": "10:30 - 10:52",
      "LocationIndex": "0",
      "Location": "Salon E",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "We introduce RATE TYPES, a novel type system to reason about and optimize data-intensive programs. Built around stream languages, RATE TYPES performs static quantitative reasoning about stream rates \u2014 the frequency of data items in a stream being consumed, processed, and produced. Despite the fact that streams are fundamentally dynamic, we find two essential concepts of stream rate control \u2014 throughput ratio and natural rate \u2014 are intimately related to the program structure itself and can be effectively reasoned about by a type system. RATE TYPES is proven to correspond with a time-aware and parallelism-aware operational semantics. The strong correspondence result tolerates arbitrary schedules, and does not require any synchronization between stream filters. We further implement RATE TYPES, demonstrating its effectiveness in predicting stream data rates in real-world stream programs.",
      "Items": [
        "1d2948a3-ba06-4a04-86a6-c9c3281fee82",
        "403c28aa-da32-44ac-95d7-65bba607c798",
        "c5fa6b6a-bbea-4a0c-9097-27b460f30b6d",
        "e47e9b4e-eee4-4f6f-86ff-5b49beb624a3"
      ]
    },
    {
      "Id": "3pghohfgggqfhhppqh88888888888888",
      "Key": "1ee00317-c580-4304-9e74-7476a71e9d63",
      "Title": "OOPSLA: Domain Specific Languages",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-22",
      "Time": "13:52 - 14:15",
      "LocationIndex": "0",
      "Location": "Salon E",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "Satisfiability (SAT) and Satisfiability Modulo Theories (SMT) have been leveraged in solving a wide variety of important and challenging problems, including automatic test generation, model checking, and program synthesis.\nFor these applications to scale to larger problem instances, developers cannot solely rely on the sophistication of SAT and SMT solvers to efficiently solve their queries; they must also optimize their own\norchestration and construction of queries. We present Smten, a high-level language for orchestrating\nand constructing satisfiability-based search queries. We show that applications developed using Smten require\nsignificantly fewer lines of code and less developer effort to achieve results comparable to standard SMT-based tools.",
      "Items": [
        "246f63ef-371d-45e3-bb9a-2a9112de4dc7",
        "45e94842-38d4-4e2e-92d6-6b68d10b0192",
        "958848f5-98a9-441f-99d6-14fa86062208",
        "dc6cf40d-3043-4d30-8f22-c2ee6df861c4"
      ]
    },
    {
      "Id": "2hhofpogqohoyggpyg88888888888888",
      "Key": "d065901a-12bf-42c9-b65e-be1241f3ae52",
      "Title": "OOPSLA: Languages",
      "ShortTitle": "",
      "Type": "OOPSLA",
      "Day": "2014-10-23",
      "Time": "14:37 - 15:00",
      "LocationIndex": "0",
      "Location": "Salon E",
      "ChairsString": "",
      "Chairs": [
        
      ],
      "Abstract": "An incremental computation updates its result based on a change to its input, which is often an order of magnitude faster than a recomputation from scratch. In particular, incrementalization can make expensive computations feasible for settings that require short feedback cycles, such as interactive systems, IDEs, or (soft) real-time systems.\n\nThis paper presents i3QL, a general-purpose programming language for specifying incremental computations. i3QL provides a declarative SQL-like syntax and is based on incremental versions of operators from relational algebra, enriched with support for general recursion. We integrated i3QL into Scala as a library, which enables programmers to use regular Scala code for non-incremental subcomputations of an i3QL query and to easily integrate incremental computations into larger software projects. To improve performance, i3QL optimizes user-defined queries by applying algebraic laws and partial evaluation. We describe the design and implementation of i3QL and its optimizations, demonstrate its applicability, and evaluate its performance.",
      "Items": [
        "173125dd-da2e-4ef3-b352-54125a13fdeb",
        "1ccd7bac-3d08-4869-8bb4-d4fc42ff693d",
        "2efffe37-a424-4fd3-be98-6d71ddd10b27",
        "5cdacda8-d3e8-42a8-88f5-c11b73ae637d"
      ]
    }
  ],
  "Items": [
    {
      "Title": "Searching for Answers: An Exploratory Study of the Formation, Use, and Impact of Queries During Debugging",
      "Key": "5fa51d0e-6bc8-460a-baa3-2a8f814ae134",
      "Type": "",
      "PersonsString": "Jonathan Corley, Brian Eddy",
      "AffiliationsString": "University of Alabama, undefined",
      "Authors": [
        "Jonathan Corley @ University of Alabama",
        "Brian Eddy @ undefined"
      ],
      "Affiliations": [
        "University of Alabama",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Enhancing Conformance Checking for Contract-Based Programs\t",
      "Key": "6f4bbb09-eb86-4c5e-bbed-48efe0d5addb",
      "Type": "",
      "PersonsString": "Alysson Milanez, Tiago Massoni, Rohit Gheyi",
      "AffiliationsString": "UFCG, Brazil, UFCG, UFCG, Brazil",
      "Authors": [
        "Alysson Milanez @ UFCG, Brazil",
        "Tiago Massoni @ UFCG",
        "Rohit Gheyi @ UFCG, Brazil"
      ],
      "Affiliations": [
        "UFCG, Brazil",
        "UFCG",
        "UFCG, Brazil"
      ],
      "Abstract": "In this work we present a test-based approach for detecting and categorizing nonconformances in contract-based programs, in specific for the Java Modeling Language (JML).",
      "Award": ""
    },
    {
      "Title": "Self-Adaptive Parallel Programming Through Tunable Concurrency",
      "Key": "75c255e2-3e97-409d-915e-7e2bf25b6b37",
      "Type": "",
      "PersonsString": "Tai Nguyen, Xinghui Zhao",
      "AffiliationsString": "Washington State University, University of Washington",
      "Authors": [
        "Tai Nguyen @ Washington State University",
        "Xinghui Zhao @ University of Washington"
      ],
      "Affiliations": [
        "Washington State University",
        "University of Washington"
      ],
      "Abstract": "Recent advances in hardware architectures, particularly multicore and manycore systems, implicitly require programmers to write concurrent programs that can be executed in parallel on multiple cores. However, writing correct and efficient concurrent programs is challenging. We envision a system where the concurrent programs can be self-adaptive when executing on different hardware. To this end, we have developed two different tuning policies, which enable users\u2019 programs to adjust their level of concurrency at compile-time and run-time respectively. Our approach also opens up many opportunities for programming concurrency policies for different purposes without changing the code of the actual computation.",
      "Award": ""
    },
    {
      "Title": "HJ-Viz: A New Tool for Visualizing, Debugging and Optimizing Parallel Programs",
      "Key": "99e11b70-49c4-48b8-8564-d6b6c74a6824",
      "Type": "",
      "PersonsString": "Peter Elmers, Hongyu Li, Shams Imam, Vivek Sarkar",
      "AffiliationsString": "Rice University, Rice University, Rice University, Rice University",
      "Authors": [
        "Peter Elmers @ Rice University",
        "Hongyu Li @ Rice University",
        "Shams Imam @ Rice University",
        "Vivek Sarkar @ Rice University"
      ],
      "Affiliations": [
        "Rice University",
        "Rice University",
        "Rice University",
        "Rice University"
      ],
      "Abstract": "The proliferation of multicore processors warrants parallelism as the future of computing, increasing demand to write parallel programs for increased application performance. Previous experience has shown that writing explicitly parallel programs is inherently more difficult than writing sequential programs. Programmers need parallel programming models, constructs, and tools that can simplify writing of parallel programs. In this poster, we present an innovative new tool, HJ-Viz, which generates interactive Computation Graphs (CGs) of parallel programs by analyzing event logs. The visual feedback can prove valuable for a programmer to efficiently optimize program logic and eliminate the presence of potential bugs which may otherwise be difficult to detect. For example, in cases of deadlocks, HJ-Viz enables users to visualize and easily diagnose the deadlock scenario using a web-browser based interface.",
      "Award": ""
    },
    {
      "Title": "Detecting Design Similarity Patterns Using Program Execution Traces",
      "Key": "ba21c02f-677e-4815-a5cc-5b92b6682ad5",
      "Type": "",
      "PersonsString": "Kuldeep Kumar, Stan Jarzabek",
      "AffiliationsString": "National University of Singapore, National University of Singapore",
      "Authors": [
        "Kuldeep Kumar @ National University of Singapore",
        "Stan Jarzabek @ National University of Singapore"
      ],
      "Affiliations": [
        "National University of Singapore",
        "National University of Singapore"
      ],
      "Abstract": "This paper aims at detecting an important type of design similarity patterns, so-called collaborative patterns, that has not been addressed in the software clone research so far. Collaborative patterns appear as recurring configurations of collaborating components such as methods or classes. Knowing location of such patterns and exact differences among them is useful in program understanding, better change impact analysis, code compaction, software maintenance, and in reuse. In the proposed approach for detecting collaborative patterns, we instrument the subject program with extra code to generate program execution traces. Then, we analyze generated traces to find collaborative patterns. Preliminary investigation has also been done to validate the proposed approach.",
      "Award": ""
    },
    {
      "Title": "Taming the Dynamic Behavior of JavaScript",
      "Key": "e0ee1244-684a-4f6a-b1d8-f6f295ba272b",
      "Type": "",
      "PersonsString": "Shiyi Wei, Barbara Ryder",
      "AffiliationsString": "Virginia Tech, Virginia Tech",
      "Authors": [
        "Shiyi Wei @ Virginia Tech",
        "Barbara Ryder @ Virginia Tech"
      ],
      "Affiliations": [
        "Virginia Tech",
        "Virginia Tech"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Privacy and Security in a Networked World",
      "Key": "313b3de0-f621-4a37-be1b-e27c787677d8",
      "Type": "",
      "PersonsString": "Steven D. Fraser, Djenana Campara, Michael Fanning, Gary McGraw, Kevin Sullivan",
      "AffiliationsString": "Independent Consultant, KDM Analytics, Microsoft, Cigital, University of Virginia",
      "Authors": [
        "Steven D. Fraser @ Independent Consultant",
        "Djenana Campara @ KDM Analytics",
        "Michael Fanning @ Microsoft",
        "Gary McGraw @ Cigital",
        "Kevin Sullivan @ University of Virginia"
      ],
      "Affiliations": [
        "Independent Consultant",
        "KDM Analytics",
        "Microsoft",
        "Cigital",
        "University of Virginia"
      ],
      "Abstract": "In Portland 2014, we return to a theme first discussed as a panel at OOPSLA 2008 in Nashville TN. At that time, we explored whether openness (many eyes) and transparency contribute to improved security and discussed the benefits of achieving privacy \"and\" security - rather than simply privacy \"or\" security.  Has the state of the art changed for the better or is the combination of increasing system states and complexity leading to lose-lose trade-offs?\n\nAs news stories continue to demonstrate, ensuring adequate security and privacy in a networked \"always on\" world is a challenge; and while open source software can mitigate problems, it is not a panacea. This panel will bring together experts from industry and academia to debate, discuss, and offer opinions - questions might include:\n\n   * What are the \"costs\" of \"good enough\" security and privacy on developers and customers\n   * What is the appropriate trade-off between the price to provide security and the cost of poor security?\n   * How can the consequences of poor design and implementation be managed?\n   * Can systems be enabled to fail \"security-safe\"?\n   * What are the trade-offs for increased adoption of privacy and security best practices?\n   * How can the \"costs\" of privacy and security - both tangible and intangible - be reduced?",
      "Award": ""
    },
    {
      "Title": "SPLASH Awards",
      "Key": "ea6f984c-ace8-402b-8114-21aaed181ec0",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "   * OOPSLA - Best Papers and Most Influential Paper Awards\n   * Onward! - Best Papers and Most Influential Paper Awards\n   * OOPSLA Artifact Awards\n   * SIGPLAN Dissertation Award\n   * PC Chair Reports",
      "Award": ""
    },
    {
      "Title": "Onward! Steering Committee Meeting",
      "Key": "ed731eb5-6f95-40f9-9b54-85f2cc4ff8a5",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Onward! Steering Committee meeting and lunch.",
      "Award": ""
    },
    {
      "Title": "Quality Types for Approximate Programming",
      "Key": "01a391c5-f59e-46af-941e-7c29953fda8a",
      "Type": "",
      "PersonsString": "Brett Boston",
      "AffiliationsString": "University of Washington",
      "Authors": [
        "Brett Boston @ University of Washington"
      ],
      "Affiliations": [
        "University of Washington"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Improved Program Synthesis Through the Use of Packages",
      "Key": "1742617e-017b-44c0-965f-a6e1dd00abb8",
      "Type": "",
      "PersonsString": "Santiago Gonzalez, Armando Solar-Lezama",
      "AffiliationsString": "Colorado School of Mines, MIT",
      "Authors": [
        "Santiago Gonzalez @ Colorado School of Mines",
        "Armando Solar-Lezama @ MIT"
      ],
      "Affiliations": [
        "Colorado School of Mines",
        "MIT"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Analysis with Type-Intertwined Separation Logic",
      "Key": "378528a6-28b0-43e8-acf6-fb1351a5d8de",
      "Type": "",
      "PersonsString": "Devin Coughlin",
      "AffiliationsString": "University of Colorado Boulder",
      "Authors": [
        "Devin Coughlin @ University of Colorado Boulder"
      ],
      "Affiliations": [
        "University of Colorado Boulder"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Kamino: Dynamic Approach to Semantic Code Clone Detection",
      "Key": "454bcb3a-915a-4562-a99f-418f63ed9fb0",
      "Type": "",
      "PersonsString": "Lindsay Neubauer",
      "AffiliationsString": "Columbia University",
      "Authors": [
        "Lindsay Neubauer @ Columbia University"
      ],
      "Affiliations": [
        "Columbia University"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Incorporating Structured Queries into Software Search",
      "Key": "50bb1df7-5cf0-4ce6-9db1-a496611c995d",
      "Type": "",
      "PersonsString": "Brian Eddy",
      "AffiliationsString": "undefined",
      "Authors": [
        "Brian Eddy @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Recommending More Efficient Workflows to Software Developers",
      "Key": "5f8e3311-a662-4c36-ad5c-9beb0ad3825d",
      "Type": "",
      "PersonsString": "Dylan Bates",
      "AffiliationsString": "Coker College",
      "Authors": [
        "Dylan Bates @ Coker College"
      ],
      "Affiliations": [
        "Coker College"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "A Language for the Specification and Efficient Implementation of Type Systems",
      "Key": "772471e8-4c37-4bf5-b01b-47f9a50fb06c",
      "Type": "",
      "PersonsString": "Pascal Wittmann",
      "AffiliationsString": "TU Darmstadt",
      "Authors": [
        "Pascal Wittmann @ TU Darmstadt"
      ],
      "Affiliations": [
        "TU Darmstadt"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Towards Concurrent Reactive Programming",
      "Key": "9e2f5d12-c28c-4c05-ad66-2807d7eadaa7",
      "Type": "",
      "PersonsString": "Joscha Drechsler",
      "AffiliationsString": "Technische Universit\u00e4t Darmstadt",
      "Authors": [
        "Joscha Drechsler @ Technische Universit\u00e4t Darmstadt"
      ],
      "Affiliations": [
        "Technische Universit\u00e4t Darmstadt"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Parallelization of Gibbs Sampling for Text Analytics",
      "Key": "aa6f2f0f-2ef9-4c5a-a77e-3996ee1dae0f",
      "Type": "",
      "PersonsString": "Ayush Narayan",
      "AffiliationsString": "Rice University",
      "Authors": [
        "Ayush Narayan @ Rice University"
      ],
      "Affiliations": [
        "Rice University"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "A Study of Wheat and Chaff in Source Code",
      "Key": "f7af427c-b822-4dbd-994d-129039763440",
      "Type": "",
      "PersonsString": "Martin Velez",
      "AffiliationsString": "University of California, Davis",
      "Authors": [
        "Martin Velez @ University of California, Davis"
      ],
      "Affiliations": [
        "University of California, Davis"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "SPLASH Steering Committee Meeting",
      "Key": "8ec03fe0-35c1-4755-b241-a9d870342f7b",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "SPLASH Steering Committee Meeting and lunch.",
      "Award": ""
    },
    {
      "Title": "Invited Talk: Design Goals of the Smallest Federated Wiki",
      "Key": "7f75d1ad-ed53-420b-8ebd-a2774fc74a46",
      "Type": "",
      "PersonsString": "Ward Cunningham",
      "AffiliationsString": "New Relic",
      "Authors": [
        "Ward Cunningham @ New Relic"
      ],
      "Affiliations": [
        "New Relic"
      ],
      "Abstract": "Talk by Ward Cunningham (inventor of the Wiki) on Design Goals of the Smallest Federated Wiki.",
      "Award": ""
    },
    {
      "Title": "Keynote: Software Security - A Study in Technology Transfer",
      "Key": "bfd793a4-ab1a-4579-951a-6cbcc49a7e03",
      "Type": "",
      "PersonsString": "Gary McGraw",
      "AffiliationsString": "Cigital",
      "Authors": [
        "Gary McGraw @ Cigital"
      ],
      "Affiliations": [
        "Cigital"
      ],
      "Abstract": "#### Title\n\nSoftware Security - A Study in Technology Transfer\n\n#### Abstract \n\nWhere do security technologies come from?  Academics propose research and government (sometimes) funds it. Startups move technologies across the \"research valley of death\" to early adopters.  Global corporations make technology widely available by acquiring startups.  At every step there are gaps and pitfalls.\n\nAdoption is the acid test of innovation. Idea-generation is perhaps ten per cent of innovation; most of the work is on technology transfer and adoption.  Chance plays a big role in creating opportunities (e.g., R&D involves a lot of luck), but a company\u2019s success depends on its ability to make opportunities more likely to occur, and to capitalize on those opportunities when they arise. Passionate individuals drive technology transfer more than does process; indeed, some people believe that the original researchers need to be involved all the way along the chain. Prototyping is an important practice, often resulting in \"researchware\" that proves a concept but is not ready for wide use. Transforming a prototype from the lab to the real-world use is a multi-stage, multi-year undertaking.\n\nThis talk will use the decade-long evolution of static analysis in code review as a driver for discussion. We'll talk startups, big companies, venture capital, research agencies, and subject-matter expertise.  In general, technologists don't appreciate business people enough and business people don't appreciate technology enough.  Most successful companies are brilliant at one, but also need to be adequate at the other.\n\n<!-- [Gary McGraw](http:\/\/2014.splashcon.org\/profile\/garymcgraw) will be the SPLASH keynote speaker on Wednesday 22 October. -->\n",
      "Award": ""
    },
    {
      "Title": "Panel: East Meets West \u2014 the Influences of Geography on Software Production",
      "Key": "17b2de46-de63-4c16-bfa6-9c7c4f080ffb",
      "Type": "",
      "PersonsString": "Steven D. Fraser, Dennis Mancl, Aki Namioka, Roberto Salama, Allen Wirfs-Brock",
      "AffiliationsString": "Independent Consultant, Alcatel-Lucent, Marchex, Millennium Partners, Mozilla Corporation",
      "Authors": [
        "Steven D. Fraser @ Independent Consultant",
        "Dennis Mancl @ Alcatel-Lucent",
        "Aki Namioka @ Marchex",
        "Roberto Salama @ Millennium Partners",
        "Allen Wirfs-Brock @ Mozilla Corporation"
      ],
      "Affiliations": [
        "Independent Consultant",
        "Alcatel-Lucent",
        "Marchex",
        "Millennium Partners",
        "Mozilla Corporation"
      ],
      "Abstract": "How do software development practices differ from coast-to-coast?  What should practitioners learn about the influences of geography \u2013 and why is it important?\n \nEach community of software professionals has its own technical biases:  preferred programming languages, soft-ware tools, design paradigms, software testing approaches, and techniques for collaboration within a working group.  Conferences like SPLASH provide an opportunity to compare notes, to learn from the successes (and failures) of others, to learn about new technologies, and to learn about how other groups communicate and collaborate.\n \nThis panel will focus on the diversity of software development practices in North America and the broader influences of geography.",
      "Award": ""
    },
    {
      "Title": "Keynote: Machine Learning for Programming",
      "Key": "e6d583cd-d7da-4732-a4df-dbdd45792d98",
      "Type": "",
      "PersonsString": "Peter Norvig",
      "AffiliationsString": "Google",
      "Authors": [
        "Peter Norvig @ Google"
      ],
      "Affiliations": [
        "Google"
      ],
      "Abstract": "#### Title\n\nMachine Learning for Programming\n\n#### Abstract\n\nIf you want to recognize speech or filter out spam emails, you will probably write a machine learning algorithm and will not try to write the whole program using a \"traditional\" software specification and implementation. There are many examples of successful machine learning solutions, but can we more broadly apply the techniques to most or all software problems, and for most or all programmers, from the novice in their first programming course to the seasoned professional?\n\n<!-- [Peter Norvig](http:\/\/2014.splashcon.org\/profile\/peternorvig) will be the Onward! keynote speaker on Thursday 23 October. -->",
      "Award": ""
    },
    {
      "Title": "Workshops Reception",
      "Key": "ec3a8fa7-1cbf-43a9-8099-ed0344926f9a",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Metamorphic Domain-Specific Languages: A Journey Into the Shapes of a Language",
      "Key": "3d05af27-d5ed-4679-9820-9c608e0cc8f4",
      "Type": "",
      "PersonsString": "Mathieu Acher, Benoit Combemale, Philippe Collet",
      "AffiliationsString": "University of Rennes, University of Rennes, University of Nice",
      "Authors": [
        "Mathieu Acher @ University of Rennes",
        "Benoit Combemale @ University of Rennes",
        "Philippe Collet @ University of Nice"
      ],
      "Affiliations": [
        "University of Rennes",
        "University of Rennes",
        "University of Nice"
      ],
      "Abstract": "External or internal domain-specific languages (DSLs) or (fluent) APIs? Whoever you are -- a developer or a user of a DSL -- you usually have to choose your side; you should not! What about metamorphic DSLs that change their shape according to your needs? \n\nWe report on our 4-years journey of providing the \"right\" support (in the domain of feature modeling), leading us to develop an external DSL, different shapes of an internal API, and maintain all these languages. A key insight is that there is no one-size-fits-all solution or no clear superiority of a solution compared to another. On the contrary, we found that it does make sense to continue the maintenance of an external and internal DSL. \n\nThe vision that we foresee for the future of software languages is their ability to be self-adaptable to the most appropriate shape (including the corresponding integrated development environment) according to a particular usage or task. We call metamorphic DSL such a language, able to change from one shape to another shape.",
      "Award": ""
    },
    {
      "Title": "In search of types",
      "Key": "ac5241d7-558c-4a78-b976-8d60a3aac0f5",
      "Type": "",
      "PersonsString": "Stephen Kell",
      "AffiliationsString": "University of Cambridge",
      "Authors": [
        "Stephen Kell @ University of Cambridge"
      ],
      "Affiliations": [
        "University of Cambridge"
      ],
      "Abstract": "The concept of \"type\" has been used without a precise definition in discussions about programming languages for 60 years. The set of people with a technical interest in programming languages is a broad one, and although many distinct, precise definitions have been used consistently within distinct subsets, I have long harboured a sense that discourse between such groups is unnecessarily strained by the cross purposes which arise in discussions mentioning the word \"type\". In this essay I explore this matter from both a personal perspective and a historical one. I argue that two essential notions of \"type\" arose independently -- one from programming traditions and the other from symbolic logic traditions -- and despite a prevailing presumption to the contrary (on both sides), they have never been explicitly unified in the literature. I'll also argue that having recognised the distinction, it might be more profitable to leave them unreconciled and distinct, owing to some fundamental differences in nature between mathematical truths and \"economic truths\". Nevertheless, I argue that trending developments in both the theory and practice of programming make it important to resolve our differences, and offer some personal thoughts about how to do so.\n",
      "Award": ""
    },
    {
      "Title": "Demo 1: Pocket Code - IDE for your Phone",
      "Key": "b5007394-8616-4866-97f9-89bb412788f7",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Pocket Code: A Scratch-like Integrated Development Environment for your Phone by Wolfgang Slany (Institute of Software Technology, Graz University of Technology) ",
      "Award": ""
    },
    {
      "Title": "Conference Banquet",
      "Key": "76e69d46-aa4a-4dd9-9099-c668f55488a8",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "SPLASH Conference Banquet Thursday 23 October, 1830-2130.\n\nLocation: [Grand Avenue Marketplace](http:\/\/grandmarketplacepdx.com\/), 1005 SE Grand Ave, Portland\n\n![Grand Marketplace](http:\/\/2014.splashcon.org\/getImage\/small\/Grand+Av+Antique+Mall.jpg)\n\n<iframe src=\"https:\/\/www.google.com\/maps\/embed?pb=!1m29!1m12!1m3!1d11182.985434850027!2d\u2026!3m2!1d45.515564999999995!2d-122.661082!5e0!3m2!1sen!2sca!4v1412705738780\" width=\"600\" height=\"450\" frameborder=\"0\" style=\"border:0\"><\/iframe>",
      "Award": ""
    },
    {
      "Title": "The Programming Language Wars",
      "Key": "0d2f61ed-9cb1-449e-9567-74a9e2060fcc",
      "Type": "",
      "PersonsString": "Andreas Stefik, Stefan Hanenberg",
      "AffiliationsString": "University of Nevada, Las Vegas , University of Duisburg-Essen",
      "Authors": [
        "Andreas Stefik @ University of Nevada, Las Vegas ",
        "Stefan Hanenberg @ University of Duisburg-Essen"
      ],
      "Affiliations": [
        "University of Nevada, Las Vegas ",
        "University of Duisburg-Essen"
      ],
      "Abstract": "The discipline of computer science has a long and complicated history with computer programming languages. Historically, inventors have created language products for a wide variety of reasons, from attempts at making domain specific tasks easier, to technical achievements, to social or political reasons. However, the modern programming language industry now has a large variety of incompatible programming languages, each of which with unique syntax, semantics, and their own often massive standard libraries, lifetimes, and costs. In this paper, we express doubts that the programming language community is focused on the most crucial problems in programming language design. We suggest instead that the programming language wars themselves may be negatively impacting the world, including how, in the broad sense, programming languages are applied in industrial software construction.\n",
      "Award": ""
    },
    {
      "Title": "I Throw Itching Powder at Tulips",
      "Key": "46782132-11c8-44c4-b9fc-ce13abda8e34",
      "Type": "",
      "PersonsString": "Richard P. Gabriel",
      "AffiliationsString": "IBM Research, USA",
      "Authors": [
        "Richard P. Gabriel @ IBM Research, USA"
      ],
      "Affiliations": [
        "IBM Research, USA"
      ],
      "Abstract": "I want to remind you of something simple: Programming and software engineering are not the same things. Neither is programming the same as algorithm design. We\u2019ve tangled the several notions of programming\u2014if we try we can unweave them, but sometimes we push on too quickly \/ get confused.\n",
      "Award": ""
    },
    {
      "Title": "Lunch for Women - Google",
      "Key": "e0bc19a3-59be-4fd7-b78c-b8d89af5a39d",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Lunch for Women.\n\n#### Sponsored By:\n\n<a href=\"http:\/\/www.google.com\/\"><img src=\"http:\/\/2014.splashcon.org\/getImage\/small\/google.png\" border=\"0\"><\/a>",
      "Award": ""
    },
    {
      "Title": "Invited Talk: Avoiding the software development apocalypse through continuous build and test",
      "Key": "ae726cf0-b292-4954-9583-4526da763652",
      "Type": "",
      "PersonsString": "Eric Forsberg",
      "AffiliationsString": "Mentor Graphics Corporation",
      "Authors": [
        "Eric Forsberg @ Mentor Graphics Corporation"
      ],
      "Affiliations": [
        "Mentor Graphics Corporation"
      ],
      "Abstract": "Maintaining the stability and quality of a software product developed by a global team presents a myriad of challenges. A highly serialized build and test process turned out to be inefficient and in many cases detrimental to the health of the product. A system of integrated source control coupled with continuous build and test resulted in higher productivity by the engineering team, a dramatic reduction of \u201cbroken\u201d builds, and a regression suite pass rate consistently near 100%. In this presentation we review the circumstances that motivated our move to a continuous build and test model, provide an overview of our continuous build and test system, and discuss the metrics used to monitor system health and drive continual improvements.",
      "Award": ""
    },
    {
      "Title": "Coverage and Its Discontents",
      "Key": "47143586-f75a-4669-88d9-e6292b26ba4e",
      "Type": "",
      "PersonsString": "Alex Groce, Mohammad Amin Alipour, Rahul Gopinath",
      "AffiliationsString": "Oregon State University, Oregon State University, Oregon State University",
      "Authors": [
        "Alex Groce @ Oregon State University",
        "Mohammad Amin Alipour @ Oregon State University",
        "Rahul Gopinath @ Oregon State University"
      ],
      "Affiliations": [
        "Oregon State University",
        "Oregon State University",
        "Oregon State University"
      ],
      "Abstract": "Everyone wants to know one thing about a test suite: will it detect enough bugs? Unfortunately, in most settings that matter, answering this question directly is impractical or impossible. Software engineers and researchers therefore tend to rely on various measures of code coverage (where mutation testing is considered as a form of syntactic coverage). A long line of academic research efforts have attempted to determine whether relying on coverage as a substitute for fault detection is a reasonable solution to the problems of test suite evaluation. This essay argues that the profusion of coverage-related literature is in part a sign of an underlying uncertainty as to what exactly it is that measuring coverage should achieve, and how we would know if it can, in fact, achieve it. We propose some solutions, but the primary focus is to clarify the state of current confusions regarding this key problem for effective software testing. \n",
      "Award": ""
    },
    {
      "Title": "Getting to Flow in Software Development",
      "Key": "b6f9ddb2-cd93-43e4-afab-bd3659c70646",
      "Type": "",
      "PersonsString": "Gail Murphy",
      "AffiliationsString": "University of British Columbia",
      "Authors": [
        "Gail Murphy @ University of British Columbia"
      ],
      "Affiliations": [
        "University of British Columbia"
      ],
      "Abstract": "Humans are amazing at processing information. This ability has enabled humans to create software development projects that comprise a\ntremendous amount of information of various forms from predominantly natural language documents like requirements to blended natural\nlanguage and structured artifacts like issues to predominantly structured source and test code. So much information is generated daily in a software product that it exceeds the ability of humans to find and process all of the information that may be useful or critical for decisions that must be made. The majority of tools used in practice to access information do not help as they are predominantly aimed at returning complete information rather than just what is needed to complete a task-at-hand. In this paper, I outline the situation facing most developers today and outline new tool interaction styles that are emerging that can help address this problem and keep a software developer in the flow of a task. By improving flow, I argue that we can enable developers (and eventually a broader set of knowledge workers) to work smarter, work better and have more fun.",
      "Award": ""
    },
    {
      "Title": "Demo 3: Agile Programming With Executable Models",
      "Key": "220f0588-d2fb-4cfa-8dc0-ed95df6c7349",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Agile Programming with Executable Models: An Open-Source, Standards-Based Eclipse Environment by Ed Seidewitz (Model Driven Solutions); Arnaud Cuccuru (CEA (Commissariat \u00e0 l\u2019Energie Atomique et aux Energies Alternatives)) ",
      "Award": ""
    },
    {
      "Title": "Demo 2: OMEN - A Tool for Synthesizing Tests for Deadlock Detection ",
      "Key": "3c413944-3e79-4502-a656-2d39e8bf6fb8",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "OMEN: A Tool for Synthesizing Tests for Deadlock Detection by Malavika Samak (Indian Institute of Science); Murali Krishna Ramanathan (Indian Institute of Science)",
      "Award": ""
    },
    {
      "Title": "Keynote: Humane Representation of Thought: A Trail Map for the 21st Century",
      "Key": "34892aef-cee8-4ec2-b67d-ece2d056e6c6",
      "Type": "",
      "PersonsString": "Bret Victor",
      "AffiliationsString": "undefined",
      "Authors": [
        "Bret Victor @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "#### Title\n\nHumane Representation of Thought:  A Trail Map for the 21st Century\n\n#### Abstract\n\nNew representations of thought \u2014 written language, mathematical notation, information graphics, etc \u2014 have been responsible for some of the most significant leaps in the progress of civilization, by expanding humanity\u2019s collectively-thinkable territory.\n\nBut at debilitating cost.  These representations, having been invented for static media such as paper, tap into a small subset of human capabilities and neglect the rest. Knowledge work means sitting at a desk, interpreting and manipulating symbols. The human body is reduced to an eye staring at tiny rectangles and fingers on a pen or keyboard.\n\nLike any severely unbalanced way of living, this is crippling to mind and body. But less obviously, and more importantly, it is enormously wasteful of the vast human potential. Human beings naturally have many powerful modes of thinking and understanding. Most are incompatible with static media. In a culture that has contorted itself around the limitations of marks on paper, these modes are undeveloped, unrecognized, or scorned.\n\nWe are now seeing the start of a dynamic medium. To a large extent, people today are using this medium merely to emulate and extend static representations from the era of paper, and to further constrain the ways in which the human body can interact with external representations of thought.\n\nBut the dynamic medium offers the opportunity to deliberately invent a humane and empowering form of knowledge work.  We can design dynamic representations which draw on the entire range of human capabilities \u2014 all senses, all forms of movement, all forms of understanding \u2014 instead of straining a few and atrophying the rest.\n\nThis talk suggests how each of the human activities in which thought is externalized (conversing, presenting, reading, writing, etc) can be redesigned around such representations.\n\n<!-- [Bret Victor](http:\/\/2014.splashcon.org\/profile\/bretvictor) will be the SPLASH keynote speaker on Friday 24 October. -->",
      "Award": ""
    },
    {
      "Title": "Interleaving of Modification and Use in Data-driven Tool Development",
      "Key": "25cf021f-b0d8-4181-8e67-a0b0d47a8a13",
      "Type": "",
      "PersonsString": "Marcel Taeumel, Michael Perscheid, Bastian Steinert, Jens Lincke, Robert Hirschfeld",
      "AffiliationsString": "Hasso Plattner Institute, Hasso Plattner Institute, Hasso Plattner Institute, Hasso Plattner Institute, Hasso-Plattner-Institute, Potsdam",
      "Authors": [
        "Marcel Taeumel @ Hasso Plattner Institute",
        "Michael Perscheid @ Hasso Plattner Institute",
        "Bastian Steinert @ Hasso Plattner Institute",
        "Jens Lincke @ Hasso Plattner Institute",
        "Robert Hirschfeld @ Hasso-Plattner-Institute, Potsdam"
      ],
      "Affiliations": [
        "Hasso Plattner Institute",
        "Hasso Plattner Institute",
        "Hasso Plattner Institute",
        "Hasso Plattner Institute",
        "Hasso-Plattner-Institute, Potsdam"
      ],
      "Abstract": "Programmers working in a Unix environment can easily build custom tools by configuring and combining small filter programs in shell scripts. When leaving the text-based world and entering the graphics-based one, however, tool building is more difficult because graphical tools are typically not prepared to be easily re-programmed by its users. We propose a data-driven perspective on graphical tools that uses concise scripts as glue between data and views but also as means to express missing data transformations and view items. Given this, we built a framework in Squeak\/Smalltalk that promotes low-effort tool construction; it works well for basic programming tools, such as code editors and debuggers, but also for other domains, such as developer chats and issue browsers. We think that this perspective on graphical tools can inspire the creation of new trade-offs in modularity for both data-providing projects and interactive views.",
      "Award": ""
    },
    {
      "Title": "Variational Data Structures: Exploring Tradeoffs in Computing with Variability",
      "Key": "4712dbc6-6e27-4f8b-9893-789c23297f4d",
      "Type": "",
      "PersonsString": "Eric Walkingshaw, Christian K\u00e4stner, Martin Erwig, Sven Apel, Eric  Bodden",
      "AffiliationsString": "University of Marburg, Carnegie Mellon University, Oregon State University, University of Passau, Fraunhofer SIT and TU Darmstadt",
      "Authors": [
        "Eric Walkingshaw @ University of Marburg",
        "Christian K\u00e4stner @ Carnegie Mellon University",
        "Martin Erwig @ Oregon State University",
        "Sven Apel @ University of Passau",
        "Eric  Bodden @ Fraunhofer SIT and TU Darmstadt"
      ],
      "Affiliations": [
        "University of Marburg",
        "Carnegie Mellon University",
        "Oregon State University",
        "University of Passau",
        "Fraunhofer SIT and TU Darmstadt"
      ],
      "Abstract": "Variation is everywhere, but in the construction and analysis of customizable software it is paramount. In this context, there arises a need for variational data structures for efficiently representing and computing with related variants of an underlying data type. So far, variational data structures have been explored and developed ad hoc. This paper is a first attempt and a call to action for systematic and foundational research in this area. Research on variational data structures will benefit not only customizable software, but the many other application domains that must cope with variability. In this paper, we show how support for variation can be understood as a general and orthogonal property of data types, data structures, and algorithms. We begin a systematic exploration of basic variational data structures, exploring the tradeoffs between different implementations. Finally, we retrospectively analyze the design decisions in our own previous work where we have independently encountered problems requiring variational data structures.",
      "Award": ""
    },
    {
      "Title": "Phrase-Based Statistical Translation of Programming Languages",
      "Key": "4e7e2cd9-4968-47f1-8b70-5d0fed6af8fb",
      "Type": "",
      "PersonsString": "Svetoslav Karaivanov, Veselin Raychev, Martin Vechev",
      "AffiliationsString": "ETH Zurich, ETH Zurich, ETH Zurich",
      "Authors": [
        "Svetoslav Karaivanov @ ETH Zurich",
        "Veselin Raychev @ ETH Zurich",
        "Martin Vechev @ ETH Zurich"
      ],
      "Affiliations": [
        "ETH Zurich",
        "ETH Zurich",
        "ETH Zurich"
      ],
      "Abstract": "Phrase-based statistical machine translation approaches have been highly successful in translating between natural languages and are heavily used by commercial systems (e.g. Google Translate).\n\nThe main objective of this work is to investigate the applicability of these approaches for translating between programming languages. Towards that, we investigated several variants of the phrase-based translation approach: i) a direct application of the approach to programming languages, ii) a novel modification of the approach to incorporate the grammatical structure of the target programming language (so to avoid generating target programs which do not parse), and iii) combines ii) with custom rules added to improve the quality of the translation.\n\nTo experiment with the above systems, we investigated machine translation from C\\# to Java. For the training, which takes about 60 hours, we used a parallel corpus of 20,499 C#-to-Java method translations. We then evaluated each of the three systems above by translating 1,000 C# methods. Our experimental results indicate that with the most advanced system, about 60% of the translated methods compile (the top ranked) and out of a random sample of 50 correctly compiled methods, 68% (34 methods) were semantically equivalent to the reference solution.",
      "Award": ""
    },
    {
      "Title": "Unifying Textual and Visual: a Theoretical Account of the Visual Perception of Programming Languages",
      "Key": "b706ceef-919c-402c-9883-d54df156af1c",
      "Type": "",
      "PersonsString": "St\u00e9phane Conversy",
      "AffiliationsString": "University of Toulouse - ENAC",
      "Authors": [
        "St\u00e9phane Conversy @ University of Toulouse - ENAC"
      ],
      "Affiliations": [
        "University of Toulouse - ENAC"
      ],
      "Abstract": "Firm principles which can be relied on to analyze and discuss textual and graphical code representations are still missing. We propose a framework relying on ScanVis, an extension of the Semiology of Graphics that models the perception and scanning of abstract graphics, to model and to provide plausible explanations of phenomena pertaining to the visual perception of representations of code. This framework unifies many aspects of the visual layout and appearance of programming languages and reveals similarities and substantial differences in the visual operations required by those notations. We also show how the framework may help compare and generate representations of programming languages with respect to visual perception. This work suggests that the gap between textual and graphical languages is narrow, and that all kind of programming languages should rely on the capability of the human visual system.",
      "Award": ""
    },
    {
      "Title": "Diagnosing Degenerate Forms in Software",
      "Key": "b09bdf5d-c320-4d8e-8d16-a87db85af7f8",
      "Type": "",
      "PersonsString": "Brian Spencer Dillon",
      "AffiliationsString": "undefined",
      "Authors": [
        "Brian Spencer Dillon @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "The degeneration of source code due to maintenance is a long known but little understood phenomenon. The lack of automated metrics designed to identify degenerate forms contributes significantly to logistical problems faced by current researchers when conducting empirical studies and experiments, studying large-scale projects, and characterizing the development and growth of degenerative forms. Furthermore, such metrics are essential for targeted refactoring and repairing degenerative forms. This dissertation research investigates a set of metrics targeted at specific degenerate forms common in software. The successful implementation and characterization of such metrics will enable further work along these lines.\n",
      "Award": ""
    },
    {
      "Title": "An Approach to Safely Evolve Program Families in C",
      "Key": "e39f3e19-1d68-46b4-a433-a0465cf27a4a",
      "Type": "",
      "PersonsString": "Flavio Medeiros",
      "AffiliationsString": "undefined",
      "Authors": [
        "Flavio Medeiros @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "The C preprocessor is widely used to handle variability and solve portability issues in program families. In this context, developers normally use tools like GCC and Clang. However, these tools are not variability-aware, i.e., they preprocess the code and consider each family member individually. As a result, even well-known and widely used families, such as Linux and Apache, contain bad smells and bugs related to variability. To minimize this problem, we propose an approach to safely evolve C program families. We develop a strategy to detect bugs related to variability and define refactorings to remove bad smells in preprocessor directives. Our supporting tool, Colligens, implements our strategy to detect bugs and applies our refactorings automatically. By using our approach in 40 open-source C program families, we detect 121 bugs related to variability, and developers accepted 78% of the patches we submit. Also, we remove 477 bad smells in 12 C program families without clone code as in previous studies.",
      "Award": ""
    },
    {
      "Title": "Programming with Managed Time",
      "Key": "261b0079-c0d5-49e6-b524-2ed56f4aa334",
      "Type": "",
      "PersonsString": "Sean McDirmid, Jonathan Edwards",
      "AffiliationsString": "Microsoft Research, MIT, USA",
      "Authors": [
        "Sean McDirmid @ Microsoft Research",
        "Jonathan Edwards @ MIT, USA"
      ],
      "Affiliations": [
        "Microsoft Research",
        "MIT, USA"
      ],
      "Abstract": "Time is of the essence when modifying state. Most programming languages expose the hardware's ability to update global state at any time, leaving the burden entirely on programmers to properly order all updates. Just as languages now manage memory to free us from meticulously allocating and freeing memory, languages should also manage time to take care of properly ordering state updates. We propose time management as a general language feature to relate various prior work but also to guide future research of this largely unexplored design space.\n\nWe propose a new form of managed time, Glitch, which ensures that all updates associated with an external event appear to execute simultaneously, removing the need to order execution manually. Glitch replays code as needed to reach an appearance of simultaneous execution. To do this, all updates must be commutative and capable of being rolled back, which is ensured through built-in state constructs and runtime monitoring. While these restrictions might seem onerous, we find them acceptable for many realistic programs. Glitch retains the familiar imperative programming model as much as possible, restricting rather than replacing it.\n\nManaged time also aides in live programming that provides immediate programmer feedback on how code edits affect execution. Live programming to date has been limited to special cases like pure functions, spreadsheets, or at the top level of games and graphics. Glitch is fully live: past program executions can be replayed in an IDE, while executions are incrementally revised under arbitrary code changes.",
      "Award": ""
    },
    {
      "Title": "Versionable, Branchable, and Mergeable Application State",
      "Key": "3f06ff9f-d658-4440-b09d-d647b4b2d879",
      "Type": "",
      "PersonsString": "David H. Lorenz, Boaz Rosenan",
      "AffiliationsString": "Open University and Technion IIT, University of Haifa",
      "Authors": [
        "David H. Lorenz @ Open University and Technion IIT",
        "Boaz Rosenan @ University of Haifa"
      ],
      "Affiliations": [
        "Open University and Technion IIT",
        "University of Haifa"
      ],
      "Abstract": "NoSQL databases are rapidly becoming the storage of choice for Web applications intended to scale. However, they trade consistency for availability. In this paper, we regain control over this trade-off by adapting an existing approach to application state, namely version control. To demonstrate that version control is applicable to the state of large-scale applications, we describe VerCASt, a version control system designed for application state and uses existing NoSQL databases to leverage their ability to store large amounts of data efficiently.",
      "Award": ""
    },
    {
      "Title": "The Semantics of Version Control",
      "Key": "50835462-cb0f-40a9-a805-fb8e33289568",
      "Type": "",
      "PersonsString": "Wouter Swierstra, Andres L\u00f6h",
      "AffiliationsString": "University of Utrecht, Well-Typed LLP",
      "Authors": [
        "Wouter Swierstra @ University of Utrecht",
        "Andres L\u00f6h @ Well-Typed LLP"
      ],
      "Affiliations": [
        "University of Utrecht",
        "Well-Typed LLP"
      ],
      "Abstract": "As software becomes increasingly complex, software configuration\nmanagement is becoming ever more important. This paper shows how\nlogics for reasoning about mutable state, such as separation logic,\ncan also be used to give semantics for version control systems. By\napplying these ideas from the programming language research\ncommunity, developers may reason formally about the broader software\ndevelopment process.",
      "Award": ""
    },
    {
      "Title": "Call by Meaning",
      "Key": "d1626d46-f84f-4df9-98ab-21d20124ad15",
      "Type": "",
      "PersonsString": "Hesam Samimi, Chris Deaton, Yoshiki Ohshima, Alessandro Warth, Todd Millstein",
      "AffiliationsString": "SAP Labs, Cycorp, Viewpoints Research Institute, SAP Labs, University of California, Los Angeles",
      "Authors": [
        "Hesam Samimi @ SAP Labs",
        "Chris Deaton @ Cycorp",
        "Yoshiki Ohshima @ Viewpoints Research Institute",
        "Alessandro Warth @ SAP Labs",
        "Todd Millstein @ University of California, Los Angeles"
      ],
      "Affiliations": [
        "SAP Labs",
        "Cycorp",
        "Viewpoints Research Institute",
        "SAP Labs",
        "University of California, Los Angeles"
      ],
      "Abstract": "Software development involves stitching existing components together. These data\/service components \nare usually not well-understood, as they are made by others and often obtained from somewhere on the \nInternet. This makes software development a daunting challenge, requiring programmers to manually \ndiscover the resources they need, understand their capabilities, adapt these resources to their \nneeds, and update the system as external components change.\n\nSoftware engineers have long realized the problem why automation seems impossible: the lack of \nsemantic \"understanding\" on the part of the machine about those components. A multitude of \nsolutions have been proposed under the umbrella term \"Semantic Web\" (SW), in which semantic \n\"markup\" of the components with concepts from semantic ontologies and the ability to invoke queries \nover those concepts enables a form of automated discovery and mediation among software services.\n\nOn the other hand, programming languages rarely provide mechanisms for anchoring objects\/data to \nreal-world concepts. Inspired by the aspirations of SW, in this paper we reformulate its visions \nfrom the perspective of a programming model, i.e., that components themselves should be able to \ninteract using semantic ontologies, rather than having a separate markup language and composition \nplatform. In the vision, a rich specification language and common sense knowledge base over \nreal-world concepts serves as a \"lingua franca\" to describe software components. Components can \nquery the system to automatically (1) discover other components that provide needed functionality\/\ndata (2) discover the appropriate API within that component in order to obtain what is intended, \nand even (3) implicitly interpret the provided data in the desired form independent of the form \noriginally presented by the provider component.\n\nBy demonstrating a successful case of realization of this vision on a microexample, we hope to show \nhow a programming languages (PL) approach to SW can be superior to existing engineered solutions, \nsince the generality and expressiveness in the language can be harnessed, and encourage PL \nresearchers to jump on the SW bandwagon.",
      "Award": ""
    },
    {
      "Title": "Group Activity",
      "Key": "1e4e06af-2a2a-4bf2-9379-f79a1aeb952b",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Group activity on hypotheses of programming languages",
      "Award": ""
    },
    {
      "Title": "Considering Productivity Effects of Explicit Type Declarations",
      "Key": "7eba0112-d55c-476d-b0c2-adb0e93da94f",
      "Type": "",
      "PersonsString": "Michael Coblenz, Jonathan Aldrich, Brad Myers, Joshua Sunshine",
      "AffiliationsString": "Carnegie Mellon University, Carnegie Mellon University, Carnegie Mellon University, Carnegie Mellon University",
      "Authors": [
        "Michael Coblenz @ Carnegie Mellon University",
        "Jonathan Aldrich @ Carnegie Mellon University",
        "Brad Myers @ Carnegie Mellon University",
        "Joshua Sunshine @ Carnegie Mellon University"
      ],
      "Affiliations": [
        "Carnegie Mellon University",
        "Carnegie Mellon University",
        "Carnegie Mellon University",
        "Carnegie Mellon University"
      ],
      "Abstract": "Static types may be used both by the language implementation and directly by the user as documentation. Though much existing work focuses primarily on the implications of static types on the semantics of programs, relatively little work considers the impact on usability that static types pro- vide. Though the omission of static type information may decrease program length and thereby improve readability, it may also decrease readability because users must then frequently derive type information manually while reading programs. As type inference becomes more popular in languages that are in widespread use, it is important to consider whether the adoption of type inference may impact productivity of developers.\n",
      "Award": ""
    },
    {
      "Title": "Usability Hypotheses in the Design of Plaid",
      "Key": "daae0cdd-3d64-4280-8487-49aabe32d881",
      "Type": "",
      "PersonsString": "Jonathan Aldrich, Joshua Sunshine",
      "AffiliationsString": "Carnegie Mellon University, Carnegie Mellon University",
      "Authors": [
        "Jonathan Aldrich @ Carnegie Mellon University",
        "Joshua Sunshine @ Carnegie Mellon University"
      ],
      "Affiliations": [
        "Carnegie Mellon University",
        "Carnegie Mellon University"
      ],
      "Abstract": "Plaid is a research programming language with a focus on typestate, permissions, and concurrency. Typestate describes ordering constraints on method calls to an object; Plaid incorporates typestate into both its object model and its type system. Permissions, incorporated into Plaid\u2019s type system and runtime, describe whether a reference can be aliased and whether aliases can change that reference. Permissions support static typestate checking, but they also allow Plaid\u2019s compiler to automatically parallelize Plaid code.\nIn this paper, we describe the usability-related hypotheses that drove the design of Plaid. We describe the evidence, both informal and scientific, that inspired and (in some cases) validated these hypotheses, and reflect on our experience designing and validating the language.",
      "Award": ""
    },
    {
      "Title": "Wyvern: Impacting Software Security via Programming Language Design",
      "Key": "fc6117fc-b950-44c1-b751-690bed100a7a",
      "Type": "",
      "PersonsString": "Darya Kurilova, Alex Potanin, Jonathan Aldrich",
      "AffiliationsString": "Carnegie Mellon University, Victoria University of Wellington, Carnegie Mellon University",
      "Authors": [
        "Darya Kurilova @ Carnegie Mellon University",
        "Alex Potanin @ Victoria University of Wellington",
        "Jonathan Aldrich @ Carnegie Mellon University"
      ],
      "Affiliations": [
        "Carnegie Mellon University",
        "Victoria University of Wellington",
        "Carnegie Mellon University"
      ],
      "Abstract": "Breaches of software security affect millions of people, and therefore it is crucial to strive for more secure software systems. However, the effect of programming language design on software security is not easily measured or studied. In the absence of scientific insight, opinions range from those that claim that programming language design has no effect on security of the system, to those that believe that programming language design is the only way to provide \u201chigh-assurance software.\u201d In this paper, we discuss how programming language design can impact software security by looking at a specific example: the Wyvern programming language. We report on how the design of the Wyvern programming language leverages security principles, together with hypotheses about how usability impacts security, in order to prevent command injection attacks. Furthermore, we discuss what security principles we considered in Wyvern\u2019s design.",
      "Award": ""
    },
    {
      "Title": "Asking and Answering Questions during a Programming Change Task in Pharo Language",
      "Key": "1d461abd-bf41-4235-93f1-415892abb4eb",
      "Type": "",
      "PersonsString": "Juraj Kubelka, Alexandre Bergel, Romain Robbes",
      "AffiliationsString": "University of Chile, undefined, undefined",
      "Authors": [
        "Juraj Kubelka @ University of Chile",
        "Alexandre Bergel @ undefined",
        "Romain Robbes @ undefined"
      ],
      "Affiliations": [
        "University of Chile",
        "undefined",
        "undefined"
      ],
      "Abstract": "Previous studies focus on the specific questions software engineers ask when evolving a codebase. Though these studies observe developers using statically typed languages, little is known about the developer questions using dynamically typed languages. Dynamically typed languages present new challenges to understanding and navigating in a codebase and could affect results reported by previous studies.\n\nThis paper replicates a previous study and presents the analysis of six programming sessions made in Pharo, a dynamically typed language. We found a similar result when comparing sessions on an unfamiliar codebase with the previous work. Our result on the familiar code greatly deviates from the replicated study, likely caused by different tasks and development strategies. Both missing type information and test driven development affected participant behavior and prudence on codebase understanding, where some participants made changes based on assumptions.\n\nWe provide a set of questions that are useful in characterizing activity related to the use of a dynamically typed language and test-driven development---questions not explicitly considered in previous research. We also present a number of issues that we would like to discuss during the PLATEAU workshop.",
      "Award": ""
    },
    {
      "Title": "Empirical Comparison of Visual to Hybrid Formula Manipulation in Educational Programming Languages for Teenagers",
      "Key": "5a4502b7-6880-4098-a69e-2f79ba6fdf92",
      "Type": "",
      "PersonsString": "Roxane Koitz, Wolfgang Slany",
      "AffiliationsString": "Graz University of Technology, Institute of Software Technology, Graz University of Technology\t",
      "Authors": [
        "Roxane Koitz @ Graz University of Technology",
        "Wolfgang Slany @ Institute of Software Technology, Graz University of Technology\t"
      ],
      "Affiliations": [
        "Graz University of Technology",
        "Institute of Software Technology, Graz University of Technology\t"
      ],
      "Abstract": "Visual programming environments hold great potential for end-user programming, as they, e.g., aim at diminishing the syntactical burden and enabling a focus on the semantic aspects of coding. Hence, graphical approaches have gained attention in the context of K-12 computer science education. Scratch, as being the prime example, is a visual educational language, where even formulas are composed utilizing Lego-style blocks. However, graphical creation and manipulation of complex and nested formulas can become overly cumbersome. Thus, we propose a hybrid approach employing visual creation and textual representation of formulas. In order to evaluate the method, a usability study has been conducted, comparing Scratch to our mobile programming environment, Pocket Code. The findings, while preliminary, indicate an increased efficiency and effectiveness of the hybrid approach employed in Pocket Code in contrast to a purely visual one in Scratch for teenager users.\n",
      "Award": ""
    },
    {
      "Title": "Usability and Suitability Survey of Features in Visual IDEs for Non-Programmers",
      "Key": "a1af7679-b3c8-4efb-a94b-f32c56307378",
      "Type": "",
      "PersonsString": "Jean Michel Rouly, Jonathan Orbeck, Eugene Syriani",
      "AffiliationsString": "George Mason University, University of Alabama, University of Oslo",
      "Authors": [
        "Jean Michel Rouly @ George Mason University",
        "Jonathan Orbeck @ University of Alabama",
        "Eugene Syriani @ University of Oslo"
      ],
      "Affiliations": [
        "George Mason University",
        "University of Alabama",
        "University of Oslo"
      ],
      "Abstract": "Software tools and working environments differ drastically from one domain to another. The software engineering domain is entertained by a diversity of rich integrated development environments (IDEs) that aim at simplifying the tasks and reducing the efforts of a programmer. Other domains are unfortunately not as cherished. In this paper, we survey twenty-five visual IDEs used in non-programming domains and evaluate how usable and fit they are for their domain. The goal of this research is to determine what features are needed in different domains and how they should be presented to the domain user.",
      "Award": ""
    },
    {
      "Title": "EUKLAS: Supporting Copy-and-Paste Strategies for Integrating Example Code",
      "Key": "a9a5fa96-cf16-41cf-b2cb-f9660fb0ee18",
      "Type": "",
      "PersonsString": "Christian Doerner, Andrew Faulring, Brad Myers",
      "AffiliationsString": "Senacor Technologies AG, Carnegie Mellon University\t, Carnegie Mellon University",
      "Authors": [
        "Christian Doerner @ Senacor Technologies AG",
        "Andrew Faulring @ Carnegie Mellon University\t",
        "Brad Myers @ Carnegie Mellon University"
      ],
      "Affiliations": [
        "Senacor Technologies AG",
        "Carnegie Mellon University\t",
        "Carnegie Mellon University"
      ],
      "Abstract": "Researchers have paid increasing attention in recent years to the fact that much development occurs though example modification. Helping programmers with some of the pitfalls and vagaries of working with example code is the goal of our tool, called Euklas. It helps developers to integrate JavaScript example code into their own projects by using familiar IDE interaction techniques of the Eclipse IDE. The Euklas plugin uses static, heuristic source code checks to highlight potential errors and to recommend potential fixes, when incomplete sections of code are copied from a working JavaScript example and pasted into the program being edited. The most unique feature of the tool is the ability to automatically import missing variable and function definitions from an example file into a new project file. Our preliminary user study of Euklas suggests that it supports users in fixing errors more easily.",
      "Award": ""
    },
    {
      "Title": "A Common Core for Language Tools",
      "Key": "4c76c3af-87e6-4579-8635-b5add9929ecf",
      "Type": "",
      "PersonsString": "Gabri\u00ebl Konat, Vlad Vergu, Guido Wachsmuth, Eelco Visser",
      "AffiliationsString": "Delft University of Technology, TU Delft, Delft University of Technology, Delft University of Technology",
      "Authors": [
        "Gabri\u00ebl Konat @ Delft University of Technology",
        "Vlad Vergu @ TU Delft",
        "Guido Wachsmuth @ Delft University of Technology",
        "Eelco Visser @ Delft University of Technology"
      ],
      "Affiliations": [
        "Delft University of Technology",
        "TU Delft",
        "Delft University of Technology",
        "Delft University of Technology"
      ],
      "Abstract": "Computer languages are used in different contexts, such as software development, release engineering, and performance engineering, and on different platforms like operation systems and integrated development environments (IDEs). These use cases and platforms have different characteristics and impose requirements on a language and its tooling. Developing a language and tooling that works in many contexts and platforms is hard, time consuming, and is not something that language engineers should be spending time on. Language workbenches alleviate a large part of this problem by providing IDE and command-line runtimes which run languages created with that language workbench. However, each language workbench has their own runtime system, resulting in a lot of duplicated effort and no easy way to interoperate between languages developed with different workbenches. A common core for language tools can serve as a library for language workbench runtime systems to prevent duplicated effort and support interoperability. We have inspected existing language workbenches and have ideas for a common architecture, but we have most likely not thought of everything. We think it will be an interesting topic for a discussion in the area of language tools. ",
      "Award": ""
    },
    {
      "Title": "SMAST: Constructing Languages for Multi-Disciplinary Engineering Problems",
      "Key": "ab37616b-067e-42aa-8c3e-1d2a96631a97",
      "Type": "",
      "PersonsString": "Kevin Baldor, Jianwei Niu",
      "AffiliationsString": "undefined, undefined",
      "Authors": [
        "Kevin Baldor @ undefined",
        "Jianwei Niu @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined"
      ],
      "Abstract": "Reuse of engineering solutions is a greater challenge than the reuse of software artifacts. Without the advantage of a common description language, automatic reuse tends to be ad hoc if available at all. We present a concept-stage project exploring the thesis that languages are the correct mechanism for capturing the capabilities of multi-disciplinary engineering teams for the purpose of automatic synthesis.",
      "Award": ""
    },
    {
      "Title": "Composable Syntax Macros",
      "Key": "efd06caf-eee4-4f2d-8393-38d809fc14d9",
      "Type": "",
      "PersonsString": "Chenglong Wang, Cyrus Omar, Jonathan Aldrich",
      "AffiliationsString": "undefined, undefined, Carnegie Mellon University",
      "Authors": [
        "Chenglong Wang @ undefined",
        "Cyrus Omar @ undefined",
        "Jonathan Aldrich @ Carnegie Mellon University"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "Carnegie Mellon University"
      ],
      "Abstract": "Based on our previous work on type-specific languages, we design a mechanism to use keywords to support syntax extension in a host language. By using the same strategies for delimiting specialized syntax, and the same mechanisms for ensuring hygiene, we will maintain the guarantee that syntax extensions can be composed while substantially increasing the expressiveness of our language (Wyvern).",
      "Award": ""
    },
    {
      "Title": "When Importless Becomes Meaningful: A Call for Tag-based Namespaces in Programming Languages",
      "Key": "b350f654-7951-40b1-9e27-15b5bc1d33f9",
      "Type": "",
      "PersonsString": "Tomas Tauber",
      "AffiliationsString": "undefined",
      "Authors": [
        "Tomas Tauber @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "Traditional programming language namespaces evolved from filesystem structures. We describe different scenarios where this rigid code organization becomes a limiting factor. After that, we propose a more flexible code organization using tags. We then illustrate it on Python, including how we can convert existing code structures to the new tag-based one. Finally, we discuss our plans how to extend this work to statically typed languages in the future.\n",
      "Award": ""
    },
    {
      "Title": "High-Performance Language Interoperability in Multi-Language Runtimes",
      "Key": "b781199c-0d26-4817-9af1-bd86b70bdd4d",
      "Type": "",
      "PersonsString": "Matthias Grimmer",
      "AffiliationsString": "undefined",
      "Authors": [
        "Matthias Grimmer @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "Programs often consist of parts that are written in different languages either because sub-problems lend themselves to being implemented in a particular language or because code in a specific language needs to be reused. However, multi-language programs often suffer from poor performance, complex cross-language interfaces, or insufficient flexibility. We propose a novel approach for composing multiple language implementations in a seamless way. It blurs the language borders by allowing foreign objects of one language to be used like regular objects in another language. Our interoperability mechanism targets language implementations that run on the same VM and have the same style of intermediate representation (IR), e.g., an abstract syntax tree (AST). For accessing foreign objects we generate foreign-language-specific IR patterns that we insert into the IR of the host application. Thus we avoid converting or marshalling foreign objects at the language border. A foreign object access is therefore as fast as it would be in the object\u2019s language of origin. Our mechanism also allows the just-in-time compiler of the host VM to inline and optimize across language borders.\n",
      "Award": ""
    },
    {
      "Title": "Compositionality in embedded DSLs",
      "Key": "6641ddca-95f3-49c7-859b-66cfa90828f5",
      "Type": "",
      "PersonsString": "Jeremy Gibbons",
      "AffiliationsString": "University of Oxford, UK",
      "Authors": [
        "Jeremy Gibbons @ University of Oxford, UK"
      ],
      "Affiliations": [
        "University of Oxford, UK"
      ],
      "Abstract": "There are two main approaches to implementing domain-specific languages. With the standalone approach,independent tools such as compilers and run-time environments for the DSL are implemented in one or more general-purpose programming languages. With the embedded approach, the DSL implementation takes the form of a library of definitions in the host language, and a program in the DSL is merely a program in the host language that makes use of the library.\n\nAmongst embedded DSLs, there are two further refinements. With a deep embedding, terms in the DSL are implemented simply to construct an abstract syntax tree (AST), which is subsequently transformed for optimization and traversed for evaluation. With a shallow embedding, terms in the DSL are implemented directly by their semantics, bypassing the intermediate AST and its traversal. Deep embeddings might seem like the obvious approach, but Kamin and Erwig (among others) argue that shallow embeddings are superior.\n\nOur focus in this talk proposal is the relationship between deep and shallow embeddings of DSLs, and the connection to compositional semantics. ",
      "Award": ""
    },
    {
      "Title": "Formal Semantics as a Language Designer\u2019s Toolbox: A case for semantics-inspired language design",
      "Key": "78460da6-8f8c-40db-b609-6c6c5ea51f8f",
      "Type": "",
      "PersonsString": "Paolo G. Giarrusso, Klaus Ostermann, Tillmann Rendel, Eric Walkingshaw",
      "AffiliationsString": "undefined, University of Marburg, University of Marburg, University of Marburg",
      "Authors": [
        "Paolo G. Giarrusso @ undefined",
        "Klaus Ostermann @ University of Marburg",
        "Tillmann Rendel @ University of Marburg",
        "Eric Walkingshaw @ University of Marburg"
      ],
      "Affiliations": [
        "undefined",
        "University of Marburg",
        "University of Marburg",
        "University of Marburg"
      ],
      "Abstract": "With the rise of domain-specific languages, more people are\ndesigning languages than ever, but the art of language design is\nhard to master. In this talk, we make a case for adapting\ninsights from formal semantics into design patterns and\nconceptual tools for language design. Semanticists have invested\nsignificant effort in developing these insights in the pursuit of\nmathematical elegance, indirectly providing us with a toolbox\nfull of design tools that are simple and powerful. We will\nintroduce a few of these design tools, illustrating how language\ndesigners can start applying insights from formal semantics right\nnow, without being experts in the subject or incurring the\noverhead of formalizing their entire language. The design tools\nwe present are just a starting point and we hope to inspire other\nlanguage designers to adapt this utilitarian view of formal\nsemantics, to help us reuse the effort and expertise of\nsemanticists by adapting their insights into easily applied\ndesign tools.",
      "Award": ""
    },
    {
      "Title": "Welcome & Introductions",
      "Key": "a60beac4-4b22-48a9-9ed2-f1c6fb156ed8",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Opening",
      "Key": "14eac5e6-8a2e-4c73-af4b-e266b4cb39e2",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Introduction and Welcome",
      "Award": ""
    },
    {
      "Title": "The 3 questions every enterprise mobile application developer should ask",
      "Key": "7476ab14-01f4-48fe-abe5-4e4d50658046",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Dr. Daniel M. Yellin",
      "Award": ""
    },
    {
      "Title": "Helping Children Eat Well Via Mobile Software",
      "Key": "9a578686-915f-4876-b5e3-d3eea10f459e",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Reducing Attack Surface on Hybrid Mobile Apps",
      "Key": "e4f289ab-1371-412f-808b-c628a4ef25a7",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Idea Garden: Helping End-User Programmers Help Themselves",
      "Key": "05df93d8-303a-4d52-8ed8-20462bac5c37",
      "Type": "",
      "PersonsString": "William Jernigan",
      "AffiliationsString": "Oregon State University",
      "Authors": [
        "William Jernigan @ Oregon State University"
      ],
      "Affiliations": [
        "Oregon State University"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Additional presentation on error message design",
      "Key": "6cd52208-04a7-4bad-8ea1-8b9303387616",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Open discussion on error messages and feedback design",
      "Key": "973bdc16-679b-448d-a2a5-e775190a5d4f",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Impromptu topics",
      "Key": "c8288952-99a3-4096-a2ad-38538b116ce3",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Flexible time to discuss issues that have come up during the rest of the day.",
      "Award": ""
    },
    {
      "Title": "Multiple Inheritance in AgentSpeak(L)-style Programming Languages ",
      "Key": "8e162457-7025-4b70-8583-ca7815c6f37b",
      "Type": "",
      "PersonsString": "Dhaon  Akshat, Rem Collier",
      "AffiliationsString": "undefined, undefined",
      "Authors": [
        "Dhaon  Akshat @ undefined",
        "Rem Collier @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": " From Actor Event-Loop to Agent Control-Loop - Impact on Programming",
      "Key": "aa9d99fa-6316-4399-8a34-74761a1934bf",
      "Type": "",
      "PersonsString": "Alessandro Ricci",
      "AffiliationsString": "University of Bologna, Italy",
      "Authors": [
        "Alessandro Ricci @ University of Bologna, Italy"
      ],
      "Affiliations": [
        "University of Bologna, Italy"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Fault Tolerant Distributed Computing using Asynchronous Local Checkpointing",
      "Key": "bacc1622-080c-47c6-bd6c-2784cd040e45",
      "Type": "",
      "PersonsString": "Phillip  Kuang, John  Field, Carlos Varela",
      "AffiliationsString": "undefined, undefined, Rensselaer Polytechnic Institute, US",
      "Authors": [
        "Phillip  Kuang @ undefined",
        "John  Field @ undefined",
        "Carlos Varela @ Rensselaer Polytechnic Institute, US"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "Rensselaer Polytechnic Institute, US"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Scaling-Up Behavioral Programming: Steps from Basic Principles to Application Architectures ",
      "Key": "f494e9ba-d1ae-4c53-b54a-0fea3875934d",
      "Type": "",
      "PersonsString": "David  Harel, Guy  Katz",
      "AffiliationsString": "undefined, undefined",
      "Authors": [
        "David  Harel @ undefined",
        "Guy  Katz @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Typed Objects in JavaScript",
      "Key": "07d07cdb-570e-4f47-82b4-15db72d02dac",
      "Type": "",
      "PersonsString": "Nicholas Matsakis, David Herman, Dmitry Lomov",
      "AffiliationsString": "Mozilla Corporation, undefined, undefined",
      "Authors": [
        "Nicholas Matsakis @ Mozilla Corporation",
        "David Herman @ undefined",
        "Dmitry Lomov @ undefined"
      ],
      "Affiliations": [
        "Mozilla Corporation",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "On the Use of Type Predicates in Object-Oriented Software: The Case of Smalltalk",
      "Key": "3b6c2b31-fbd0-4e43-aa32-b7f04e99c65f",
      "Type": "",
      "PersonsString": "Oscar Calla\u00fa, Romain Robbes, \u00c9ric Tanter, David R\u00f6thlisberger, Alexandre Bergel",
      "AffiliationsString": "University of Chile, undefined, University of Chile, undefined, undefined",
      "Authors": [
        "Oscar Calla\u00fa @ University of Chile",
        "Romain Robbes @ undefined",
        "\u00c9ric Tanter @ University of Chile",
        "David R\u00f6thlisberger @ undefined",
        "Alexandre Bergel @ undefined"
      ],
      "Affiliations": [
        "University of Chile",
        "undefined",
        "University of Chile",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Object Versioning to Support Recovery Needs: Using Proxies to Preserve Previous Development States in Lively",
      "Key": "78acd378-c420-4b57-b562-e6c47470ac40",
      "Type": "",
      "PersonsString": "Bastian Steinert, Lauritz Thamsen, Tim Felgentreff, Robert Hirschfeld",
      "AffiliationsString": "Hasso Plattner Institute, undefined, Hasso-Plattner-Institute, Potsdam, Hasso-Plattner-Institute, Potsdam",
      "Authors": [
        "Bastian Steinert @ Hasso Plattner Institute",
        "Lauritz Thamsen @ undefined",
        "Tim Felgentreff @ Hasso-Plattner-Institute, Potsdam",
        "Robert Hirschfeld @ Hasso-Plattner-Institute, Potsdam"
      ],
      "Affiliations": [
        "Hasso Plattner Institute",
        "undefined",
        "Hasso-Plattner-Institute, Potsdam",
        "Hasso-Plattner-Institute, Potsdam"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Dynamic Detection of Object Capability Violations Through Model Checking",
      "Key": "89afdd1d-e5ad-4ae0-842b-55f47a07f872",
      "Type": "",
      "PersonsString": "Dustin Rhodes, Tim Disney, Cormac Flanagan",
      "AffiliationsString": "undefined, undefined, UC Santa Cruz",
      "Authors": [
        "Dustin Rhodes @ undefined",
        "Tim Disney @ undefined",
        "Cormac Flanagan @ UC Santa Cruz"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "UC Santa Cruz"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Panel: How Mobile affects Business Processes? : The Research Perspective",
      "Key": "545c31ec-2131-47eb-8fde-2584477766b1",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Wearable-based mobile app for decision making: The case of a safe workplace",
      "Key": "841973ac-57c1-43ae-84c0-03d2e2f96f71",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited Talk: Integrating Security, Analytics and Application Management into the Mobile Development Lifecycle",
      "Key": "cdf91737-10de-4558-82d0-9bd9119eab12",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited Talk: User Feedback in Mobile Development",
      "Key": "21cb42f6-1d7d-40c9-9934-ce1b319f3fc1",
      "Type": "",
      "PersonsString": "Bernd Bruegge",
      "AffiliationsString": "Technische Universit\u00e4t M\u00fcnchen",
      "Authors": [
        "Bernd Bruegge @ Technische Universit\u00e4t M\u00fcnchen"
      ],
      "Affiliations": [
        "Technische Universit\u00e4t M\u00fcnchen"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited Talk: Rapidly Prototyping Apps for Mobile Cloud-Connected Devices",
      "Key": "64743e98-fdb2-4ddd-b626-63887ca11f6b",
      "Type": "",
      "PersonsString": "Nikolai Tillmann",
      "AffiliationsString": "Microsoft Research",
      "Authors": [
        "Nikolai Tillmann @ Microsoft Research"
      ],
      "Affiliations": [
        "Microsoft Research"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited Talk: TouchGuru - Integrating Static Analysis with a Mobile Development Environment",
      "Key": "ab6f7495-c5ac-43ed-8b28-aeaee5bac92e",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Contextion: A Framework for Developing Context-Aware Mobile Applications",
      "Key": "e673da88-0a45-4248-b015-0cc4c257d864",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Scriptable Operating Systems with Lua",
      "Key": "ad3d9f39-b6d8-4bd0-9f98-6bafdb021fbe",
      "Type": "",
      "PersonsString": "Lourival Vieira Neto, Roberto Ierusalimschy, Ana L\u00facia de Moura, Marc Balmer",
      "AffiliationsString": "The NetBSD Foundation, PUC-Rio, undefined, undefined",
      "Authors": [
        "Lourival Vieira Neto @ The NetBSD Foundation",
        "Roberto Ierusalimschy @ PUC-Rio",
        "Ana L\u00facia de Moura @ undefined",
        "Marc Balmer @ undefined"
      ],
      "Affiliations": [
        "The NetBSD Foundation",
        "PUC-Rio",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited talk: Why do we know so little about programming languages, and what would have happened if we had known more?",
      "Key": "ca2d830c-cef2-4377-b2a4-baf4e1619e20",
      "Type": "",
      "PersonsString": "Stefan Hanenberg",
      "AffiliationsString": "University of Duisburg-Essen",
      "Authors": [
        "Stefan Hanenberg @ University of Duisburg-Essen"
      ],
      "Affiliations": [
        "University of Duisburg-Essen"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "An Automatic Actors to Threads Mapping Technique for JVM-based Actor Frameworks ",
      "Key": "198c175d-1c5e-41b0-b8ba-9691a9db05f0",
      "Type": "",
      "PersonsString": "Ganesha  Upadhyaya, Hridesh Rajan",
      "AffiliationsString": "undefined, undefined",
      "Authors": [
        "Ganesha  Upadhyaya @ undefined",
        "Hridesh Rajan @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "CAF - The C++ Actor Framework for Scalable and Resource-efficient Applications",
      "Key": "6a9d7918-78fb-4248-8c5d-6577f0675096",
      "Type": "",
      "PersonsString": "Dominik  Charousset, Raphael  Hiesgen, Thomas  Schmidt",
      "AffiliationsString": "undefined, undefined, undefined",
      "Authors": [
        "Dominik  Charousset @ undefined",
        "Raphael  Hiesgen @ undefined",
        "Thomas  Schmidt @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Event-based Analysis of Timed Rebeca Models using SQL ",
      "Key": "9f75fbfa-92ae-4e03-a2de-1ee28ca16ee3",
      "Type": "",
      "PersonsString": "Brynjar  Magnusson, Ehsan Khamespanah, Marjan Sirjani, Ramtin  Khosravi",
      "AffiliationsString": "undefined, undefined, undefined, undefined",
      "Authors": [
        "Brynjar  Magnusson @ undefined",
        "Ehsan Khamespanah @ undefined",
        "Marjan Sirjani @ undefined",
        "Ramtin  Khosravi @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": " Efficient TCTL Model Checking Algorithm for Timed Actors ",
      "Key": "d63c2687-c92b-4510-bc20-a1c91bd431f3",
      "Type": "",
      "PersonsString": "Ehsan Khamespanah, Ramtin  Khosravi, Marjan Sirjani",
      "AffiliationsString": "undefined, undefined, undefined",
      "Authors": [
        "Ehsan Khamespanah @ undefined",
        "Ramtin  Khosravi @ undefined",
        "Marjan Sirjani @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Dynamic Page Sharing Optimization for the R Language",
      "Key": "0888529c-a6a2-4375-9504-349ffb03313b",
      "Type": "",
      "PersonsString": "Helena Kotthaus, Ingo Korb, Michael Engel, Peter Marwedel",
      "AffiliationsString": "Department of Computer Science 12, TU Dortmund University, undefined, undefined, undefined",
      "Authors": [
        "Helena Kotthaus @ Department of Computer Science 12, TU Dortmund University",
        "Ingo Korb @ undefined",
        "Michael Engel @ undefined",
        "Peter Marwedel @ undefined"
      ],
      "Affiliations": [
        "Department of Computer Science 12, TU Dortmund University",
        "undefined",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "SqueakJS - A Modern and Practical Smalltalk That Runs in Any Browser",
      "Key": "0eff8919-cfdd-4e9b-9c40-f3aa0c9e53ef",
      "Type": "",
      "PersonsString": "Bert Freudenberg, Dan Ingalls, Tim Felgentreff, Tobias Pape, Robert Hirschfeld",
      "AffiliationsString": "undefined, undefined, Hasso-Plattner-Institute, Potsdam, Hasso-Plattner-Institute, Potsdam, Hasso-Plattner-Institute, Potsdam",
      "Authors": [
        "Bert Freudenberg @ undefined",
        "Dan Ingalls @ undefined",
        "Tim Felgentreff @ Hasso-Plattner-Institute, Potsdam",
        "Tobias Pape @ Hasso-Plattner-Institute, Potsdam",
        "Robert Hirschfeld @ Hasso-Plattner-Institute, Potsdam"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "Hasso-Plattner-Institute, Potsdam",
        "Hasso-Plattner-Institute, Potsdam",
        "Hasso-Plattner-Institute, Potsdam"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "ACDC-JS: Explorative Benchmarking of JavaScript Memory Management",
      "Key": "a2ce0cf0-a4a3-43b4-8d02-cb305cf85ede",
      "Type": "",
      "PersonsString": "Martin Aigner, Thomas H\u00fctter, Christoph Kirsch, Alexander Miller, Hannes Payer, Mario Preishuber",
      "AffiliationsString": "University of Salzburg, undefined, undefined, undefined, undefined, undefined",
      "Authors": [
        "Martin Aigner @ University of Salzburg",
        "Thomas H\u00fctter @ undefined",
        "Christoph Kirsch @ undefined",
        "Alexander Miller @ undefined",
        "Hannes Payer @ undefined",
        "Mario Preishuber @ undefined"
      ],
      "Affiliations": [
        "University of Salzburg",
        "undefined",
        "undefined",
        "undefined",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Using JavaScript and WebCL for Numerical Computations: A Comparative Study of Native and Web Technologies",
      "Key": "e7d7f05d-df77-43e8-9c81-fa3e61df8be3",
      "Type": "",
      "PersonsString": "Faiz Khan, Vincent Foley-Bourgon, Sujay Kathrotia, Erick Lavoie, Laurie Hendren",
      "AffiliationsString": "undefined, undefined, undefined, McGill University, McGill University",
      "Authors": [
        "Faiz Khan @ undefined",
        "Vincent Foley-Bourgon @ undefined",
        "Sujay Kathrotia @ undefined",
        "Erick Lavoie @ McGill University",
        "Laurie Hendren @ McGill University"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "undefined",
        "McGill University",
        "McGill University"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Description Logic as Programming Language",
      "Key": "36def2d8-3cba-470b-9175-85d48ce59204",
      "Type": "",
      "PersonsString": "James Skene",
      "AffiliationsString": "Auckland University of Technology",
      "Authors": [
        "James Skene @ Auckland University of Technology"
      ],
      "Affiliations": [
        "Auckland University of Technology"
      ],
      "Abstract": "This paper introduces the use of Description Logic as a programming\nlanguage, giving: a logic with appropriate concept\nconstructors and sentential forms; some example programs;\nrequirements for the results of program execution; a\ntableau algorithm that provably produces the desired results;\nprinciples for discarding sentences once no longer needed\nso that algorithms with higher time complexity than space\ncomplexity can be implemented; a worked example of program\nexecution; and a discussion of outstanding theoretical\nchallenges.",
      "Award": ""
    },
    {
      "Title": "It's only illegal if you get caught",
      "Key": "4edf93a7-6f32-4ec2-8987-891e57bc248d",
      "Type": "",
      "PersonsString": "Rapha\u00ebl Proust, Alan Mycroft",
      "AffiliationsString": "University of Cambridge, University of Cambridge",
      "Authors": [
        "Rapha\u00ebl Proust @ University of Cambridge",
        "Alan Mycroft @ University of Cambridge"
      ],
      "Affiliations": [
        "University of Cambridge",
        "University of Cambridge"
      ],
      "Abstract": "Programming languages and coding standards provide invariants to ease reasoning about the correctness of code.\nAlthough useful, invariants are often intentionally broken by programmers for performance or compatibility purposes.\nAn operation that consists of multiple steps can preserve an invariant overall even though it breaks it temporarily during the process\u2014e.g., inserting a node into a doubly linked list takes two operations between which the list is ill-formed.\nIt is important that intermediate states of these operations are not observable by the rest of the program.\nWe explore various devices that are used to bundle together the different steps of such an operation in a way that hides intermediate states\u2014bringing some form of atomicity.\nHowever, while all these constructs might work in a certain context there is no way to ensure they still work for extensions and new versions of the programming language, the underlying operating system, the linked libraries, or even the processor architecture.\nWe propose a new construct, opaque, to overcome these problems\u2014decoupling code correctness and execution context\u2014and future-proof invariant-breaking code by insisting that both current and future versions of the compiler treat the enclosed block as having no observable intermediate states.",
      "Award": ""
    },
    {
      "Title": "Mining the Ecosystem to Improve Type Inference For Dynamically Typed Languages",
      "Key": "901966b8-c2a6-442f-accf-068288fd47bc",
      "Type": "",
      "PersonsString": "Boris Spasojevic, Mircea Lungu, Oscar Nierstrasz",
      "AffiliationsString": "University of Bern, Switzerland, University of Bern, Switzerland, University of Bern",
      "Authors": [
        "Boris Spasojevic @ University of Bern, Switzerland",
        "Mircea Lungu @ University of Bern, Switzerland",
        "Oscar Nierstrasz @ University of Bern"
      ],
      "Affiliations": [
        "University of Bern, Switzerland",
        "University of Bern, Switzerland",
        "University of Bern"
      ],
      "Abstract": "Dynamically typed languages lack information about the types of variables in the source code. Developers care about this informa- tion as it supports program comprehension. Basic type inference techniques are helpful, but may yield many false positives or nega- tives.\nWe propose to mine information from the software ecosystem on how frequently given types are inferred unambiguously to im- prove the quality of type inference for a single system.\nThis paper presents an approach to augment existing type infer- ence techniques by supplementing the information available in the source code of a project with data from other projects written in the same language. For all available projects, we track how often messages are sent to instance variables throughout the source code. Then, predictions for the type of a variable are made based on the messages sent to it.\nThe evaluation of a proof-of-concept prototype shows that this approach works well for types that are sufficiently popular, like those found in the standard libraries, and tends to create false positives for unpopular or domain specific types. The false positives are, in most cases, fairly easily identifiable. Also, the evaluation data shows a substantial increase in the number of correctly inferred types when compared to the non-augmented type inference.",
      "Award": ""
    },
    {
      "Title": "Korz: Simple, Symmetric, Subjective,\u2028 Context-Oriented Programming",
      "Key": "f512b9b2-27c5-4e65-a488-ff543d19fb2b",
      "Type": "",
      "PersonsString": "David Ungar, Harold Ossher, Doug Kimelman",
      "AffiliationsString": "IBM Research, IBM Research, IBM Research",
      "Authors": [
        "David Ungar @ IBM Research",
        "Harold Ossher @ IBM Research",
        "Doug Kimelman @ IBM Research"
      ],
      "Affiliations": [
        "IBM Research",
        "IBM Research",
        "IBM Research"
      ],
      "Abstract": "Korz is a new computational model that provides for context-oriented programming by combining implicit arguments and multiple dispatch in a slot-based model. This synthesis enables the writing of software that supports contextual variation along multiple dimensions, and graceful evolution of that software to support new, unexpected dimensions of variability, without the need for additional mechanism such as layers or aspects. With Korz, a system consists of a sea of method and data slots in a multidimensional space. There is no fixed organization of slots into objects \u2013 a slot pertains to a number of objects instead of being contained by a single object \u2013 and slots can come together according to the implicit context in any given situation, yielding subjective objects. There is no dominant decomposition, and no dimension holds sway over any other. IDE support is essential for managing complexity when working with the slot space and with subjectivity, allowing the task at hand to dictate what subspaces to isolate and what dominance of dimensions to use when presenting nested views to the user. We have implemented a prototype interpreter and IDE, and used it on several examples. This early experience has revealed much that needs to be done, but has also shown considerable promise. It seems that Korz's particular combination of concepts, each well-known from the past, is indeed more powerful than the sum of its parts.",
      "Award": ""
    },
    {
      "Title": "Capturing and Exploiting IDE Interactions",
      "Key": "809efd51-c660-49dc-9073-90b9e8af376d",
      "Type": "",
      "PersonsString": "Zhongxian Gu, Drew Schleck, Earl Barr, Zhendong Su",
      "AffiliationsString": "UC Davis, UC Davis, University College London, University of California, Davis",
      "Authors": [
        "Zhongxian Gu @ UC Davis",
        "Drew Schleck @ UC Davis",
        "Earl Barr @ University College London",
        "Zhendong Su @ University of California, Davis"
      ],
      "Affiliations": [
        "UC Davis",
        "UC Davis",
        "University College London",
        "University of California, Davis"
      ],
      "Abstract": "Integrated development environments (IDEs) dominate the production and maintenance of software. Developers interact intensively with their IDEs while working. These interactions reflect a developer\u2019s thought process and work habits. By capturing and exploiting comprehensive, fine-grained IDE interactions, we can build intelligent IDEs that improve programmer productivity. This next generation of IDEs will incorporate a general framework to capture and exploit IDE interactions, and create an ecosystem of developer-aware applications and plugins. We have developed IDE++ on top of the popular Eclipse IDE to demonstrate the utility of such a framework. To demonstrate IDE++\u2019s comprehensive and granular capture of interactions, we capture then faithfully play a developer\u2019s IDE actions on six nontrivial programming tasks. We built four applications upon IDE++ to illustrate 1) the need for capturing comprehensive, fine-grained IDE interactions, and 2) the promise of developer-aware IDEs.",
      "Award": ""
    },
    {
      "Title": "Multi-tier Functional Reactive Programming for the Web",
      "Key": "ac96716c-174a-4a70-aee1-766039d800d5",
      "Type": "",
      "PersonsString": "Bob Reynders, Dominique Devriese, Frank Piessens",
      "AffiliationsString": "iMinds - Distrinet, KU Leuven, iMinds - Distrinet, KU Leuven, iMinds - Distrinet, KU Leuven",
      "Authors": [
        "Bob Reynders @ iMinds - Distrinet, KU Leuven",
        "Dominique Devriese @ iMinds - Distrinet, KU Leuven",
        "Frank Piessens @ iMinds - Distrinet, KU Leuven"
      ],
      "Affiliations": [
        "iMinds - Distrinet, KU Leuven",
        "iMinds - Distrinet, KU Leuven",
        "iMinds - Distrinet, KU Leuven"
      ],
      "Abstract": "The development of robust and efficient interactive web applications\nis challenging, because developers have to deal with multiple\nprogramming languages, asynchronous events, propagating data and\nevents between clients and servers, data consistency and much more.\nSeveral approaches for (partly) addressing these challenges have been\nproposed. Two important ones are (1) multi-tier languages and\n(2) functional reactive programming (FRP). Multi-tier programming\nlanguages support the development of client and server in a single\nlanguage, and hide much of the complexity related to distribution.\nFRP offers the right abstractions to make event-driven programming\nconvenient, safe and composable. The existence of mature and widely\nused implementations of both these approaches is evidence of their\nusefulness. However, existing web frameworks and programming\nlanguages exploit the benefits of both approaches separately, for\nexample by restricting the use of FRP to the client side.\n\nWe propose multi-tier FRP for the Web, a novel approach to writing web\napplications that deeply integrates FRP and multi-tier languages, and\nwhere the whole is greater than the sum of its parts. In multi-tier\nFRP, the developer programs server and client together as an FRP\napplication composed of behaviors (signals) and events. He\/she chooses\nexplicitly where the boundary between server and client is crossed. To\nmake our approach more concrete and provide evidence of its potential,\nthis paper presents a concrete design and implementation of a\nmulti-tier FRP API for the web in the programming language Scala,\nusing an embedded JavaScript DSL that makes Scala usable as a\nmulti-tier language. This allows us to present initial evidence of the\nbenefits of the multi-tier FRP approach on example applications, and\nto experiment with possible answers to the remaining questions.\nConcretely, we show possible solutions for problems like exposing\nclient identity on the server and efficiently pre-loading clients with\nthe latest application state. Our results show that multi-tier FRP is\na promising, declarative, yet practical way of writing web\napplications.",
      "Award": ""
    },
    {
      "Title": "A Language Designer\u2019s Workbench. A One-Stop-Shop for Implementation and Verification of Language Designs",
      "Key": "dfc99d3d-9833-4af5-8dc8-a20e0f79414e",
      "Type": "",
      "PersonsString": "Eelco Visser, Guido Wachsmuth, Andrew Tolmach, Pierre Neron, Vlad Vergu, Augusto Passalaqua, Gabri\u00ebl Konat",
      "AffiliationsString": "Delft University of Technology, Delft University of Technology, Portland State University, TU Delft, TU Delft, TU Delft, Delft University of Technology",
      "Authors": [
        "Eelco Visser @ Delft University of Technology",
        "Guido Wachsmuth @ Delft University of Technology",
        "Andrew Tolmach @ Portland State University",
        "Pierre Neron @ TU Delft",
        "Vlad Vergu @ TU Delft",
        "Augusto Passalaqua @ TU Delft",
        "Gabri\u00ebl Konat @ Delft University of Technology"
      ],
      "Affiliations": [
        "Delft University of Technology",
        "Delft University of Technology",
        "Portland State University",
        "TU Delft",
        "TU Delft",
        "TU Delft",
        "Delft University of Technology"
      ],
      "Abstract": "The realization of a language design requires multiple ar- tifacts that redundantly encode the same information. This entails significant effort for language implementors, and of- ten results in late detection of errors in language definitions. In this paper we present a proof-of-concept language de- signer\u2019s workbench that supports generation of IDEs, inter- preters, and verification infrastructure from a single source. This constitutes a first milestone on the way to a system that fully automates language implementation and verification.",
      "Award": ""
    },
    {
      "Title": "Towards Tierless Programming in a General-Purpose Language",
      "Key": "eebb47ce-4d9a-456a-ab48-96509a6248c3",
      "Type": "",
      "PersonsString": "Laure Philips, Coen De Roover, Tom Van Cutsem, Wolfgang  De Meuter",
      "AffiliationsString": "Software Languages Lab, Software Languages Lab, Software Engineering Laboratory, Alcatel-Lucent Bell Labs, Vrije Universiteit Brussel",
      "Authors": [
        "Laure Philips @ Software Languages Lab",
        "Coen De Roover @ Software Languages Lab, Software Engineering Laboratory",
        "Tom Van Cutsem @ Alcatel-Lucent Bell Labs",
        "Wolfgang  De Meuter @ Vrije Universiteit Brussel"
      ],
      "Affiliations": [
        "Software Languages Lab",
        "Software Languages Lab, Software Engineering Laboratory",
        "Alcatel-Lucent Bell Labs",
        "Vrije Universiteit Brussel"
      ],
      "Abstract": "Tierless programming languages enable developing the typical server, client and database tiers of a web application as a single mono-linguistic program.  \nThis development style is in stark contrast to the current practice which requires combining multiple technologies and programming languages.\nA myriad of tierless programming languages has already been proposed, often featuring a JavaScript-like syntax.\nInstead of introducing yet another, we advocate that it should be possible to develop tierless web applications in existing general-purpose languages.\nThis not only reduces the complexity that developers are exposed to, but also precludes the need for new development tools. \nWe concretize this novel approach to tierless programming by discussing requirements on its future instantiations.\nWe explore the design space of the program analysis for determining and the program transformation for realizing the tier split respectively.\nThe former corresponds to new adaptations of an old familiar, program slicing,  for tier splitting. \nThe latter includes several strategies for handling cross-tier function calls and data accesses.\nUsing a prototype instantiation for JavaScript, we demonstrate the feasibility of our approach on an example web application.\nWe conclude with a discussion of open questions and challenges for future research.",
      "Award": ""
    },
    {
      "Title": "Group Discussion\/Panel & Closing",
      "Key": "41e6445a-a6b9-4511-a698-19e0e5708f65",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "A Rationale for Faust Design Decisions",
      "Key": "88141892-f0b4-4cef-b838-9874c9abb04e",
      "Type": "",
      "PersonsString": "Yann Orlarey, Dominique Fober, St\u00e9phane Letz, Albert Gr\u00e4f, Pierre Jouvelot",
      "AffiliationsString": "undefined, undefined, undefined, undefined, undefined",
      "Authors": [
        "Yann Orlarey @ undefined",
        "Dominique Fober @ undefined",
        "St\u00e9phane Letz @ undefined",
        "Albert Gr\u00e4f @ undefined",
        "Pierre Jouvelot @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "undefined",
        "undefined",
        "undefined"
      ],
      "Abstract": "In this presentation we outline various decisions we took in the design of Faust [Functional\nAudio Stream], a DSL used on stage for concerts and artistic productions, in education and\nresearch, as well as in open sources projects and commercial applications.",
      "Award": ""
    },
    {
      "Title": "Invited Speaker: A Brief, Opinionated History of the API",
      "Key": "7ccce3b5-d26c-4dfd-8dfc-3b881fca8b90",
      "Type": "",
      "PersonsString": "Josh Bloch",
      "AffiliationsString": "undefined",
      "Authors": [
        "Josh Bloch @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "APIs have been with us for 60 years or so. They come in all different shapes, sizes, and disguises. In this talk we'll look at a few APIs, focusing on what makes them good, what makes them successful, and why the correlation between quality and success isn't as high we might want it to be.",
      "Award": ""
    },
    {
      "Title": "Structured Editing for HCI Metacomputing Universal Syntax and Deconstructible User Interfaces",
      "Key": "5cec4c24-5eb5-4d25-83e3-9e6817bccd76",
      "Type": "",
      "PersonsString": "Christopher Hall",
      "AffiliationsString": "undefined",
      "Authors": [
        "Christopher Hall @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "There is a classic design tension between user friendly versus expert friendly user interface design, and a classic design tension be- tween binary versus printable data format design. This work sets out to expose both sets of design tensions as having the same cause and solution. Information representations and user interface architecture both lack a self-descriptive capacity. By raising the common denominator of computing to a foundation that is metadata friendly, structured editing can place human-readable strings and graphical user interfaces on the same spectrum. Smoothing out the gradients of interacting with computation creates new opportunities for unifying software systems as a developer and having an outlet for accruing and applying computational literacy as an end-user.\n",
      "Award": ""
    },
    {
      "Title": "Discussion and Wrap Up",
      "Key": "c9c5fc26-171e-4151-9b74-eb705557c322",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Feedback on Course Design: Project-based software engineering education in an evening master's program",
      "Key": "03dbb57c-ea71-478b-a36f-d9168e426bdf",
      "Type": "",
      "PersonsString": "Yadran Eterovic",
      "AffiliationsString": "Pontificia Universidad Catlica de Chile",
      "Authors": [
        "Yadran Eterovic @ Pontificia Universidad Catlica de Chile"
      ],
      "Affiliations": [
        "Pontificia Universidad Catlica de Chile"
      ],
      "Abstract": "As part of an evening master\u2019s program, we need to teach software engineering to professionals who work in software development but who have no formal education in software engineering. The first challenge was to decide which subjects should be taught; the second, how to teach these subjects given the time restrictions imposed by the program structure.\n\nThe presenter has requested feedback on his course design from the SPLASH-E community.  He will give a short overview of the course goals and constraints, followed by the current design.  The audience will then provide suggestions and feedback to help the presenter tune the course to its goals.",
      "Award": ""
    },
    {
      "Title": "Open Discussion (around course designs)",
      "Key": "2326f319-ded9-43c2-a34b-6bc000771734",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Audience-wide discussion on themes and ideas raised in the short presentations in this session",
      "Award": ""
    },
    {
      "Title": "An Experience Report at Teaching Group Based Agile Software Engineering Teams",
      "Key": "79c45662-b64b-4b45-baf9-3eea1a85ab6e",
      "Type": "",
      "PersonsString": "Craig Anslow, Frank Maurer",
      "AffiliationsString": "University of Calgary, undefined",
      "Authors": [
        "Craig Anslow @ University of Calgary",
        "Frank Maurer @ undefined"
      ],
      "Affiliations": [
        "University of Calgary",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Additional presentation regarding course design",
      "Key": "f1b8dea2-b3e6-4b91-a3d4-dc3be5837504",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Opening & Welcome",
      "Key": "8b43ffe1-308f-4ee1-bfd1-e2b89ad87423",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Upgrade Programming for Mobile Cloud",
      "Key": "f50d7ffe-f9bd-48b6-8603-d092b134865d",
      "Type": "",
      "PersonsString": "Gul Agha",
      "AffiliationsString": "University of Illinois at Urbana-Champaign",
      "Authors": [
        "Gul Agha @ University of Illinois at Urbana-Champaign"
      ],
      "Affiliations": [
        "University of Illinois at Urbana-Champaign"
      ],
      "Abstract": "While many mobile device applications are backed by cloud servers and storage, the current programming technology is tedious and potentially error prone. Developing individual application parts is not difficult, but developing an entire system is far more challenging and there\u2019s currently no way to map user-level application code to the computational resources available in a flexible way. In this invited talk, Agha talks about a new methodology for building mobile cloud applications that can leverage cloud resources in a scalable way, while dramatically simplifying the development effort. This is the subject of the NSF-funded project entitled \u201cModel-based, Event-Driven Scalable Programming for the Mobile Cloud,\u201d lead by Agha  along with Illinois computer science professor Darko Marinov, in collaboration with Daniel Jackson at MIT. The project aims to develop a high-end interface language that\u2019s simple for programmers, while back-end programming could still be done using an actors model, which is optimal for scaling and was developed by Agha in 1985. This will make it easier to program web applications without compromising their efficiency and scalability in execution, using the actors model. ",
      "Award": ""
    },
    {
      "Title": "Selectors: Actors with Multiple Guarded Mailboxes",
      "Key": "f66d534e-8aa6-4ffd-b1fb-c8825096f428",
      "Type": "",
      "PersonsString": "Shams Imam, Vivek Sarkar",
      "AffiliationsString": "Rice University, Rice University",
      "Authors": [
        "Shams Imam @ Rice University",
        "Vivek Sarkar @ Rice University"
      ],
      "Affiliations": [
        "Rice University",
        "Rice University"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Lucas Waye. \"Privacy Integrated Data Stream Queries\"",
      "Key": "8239a4d7-f2d6-485e-9c80-7cf6a7f1d189",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Research on dierential privacy is generally concerned with\nexamining data sets that are static. Because the data sets do\nnot change, every computation on them produces \\one-shot\"\nquery results; the results do not change aside from random-\nness introduced for privacy . There are many circumstances,\nhowever, where this model does not apply, or is simply in-\nfeasible. Data streams are examples of non-static data sets\nwhere results may change as more data is streamed. Theo-\nretical support for dierential privacy with data streams has\nbeen researched in the form of dierentially private stream-\ning algorithms. In this paper, we present a practical frame-\nwork for which a non-expert can perform dierentially pri-\nvate operations on data streams. The system is built as\nan extension to PINQ, a dierentially private programming\nframework for static data sets. The streaming extension\nprovides a programmatic interface for the dierent types of\nstreaming dierential privacy from the literature so that the\nprivacy trade-os of each type of algorithm can be under-\nstood by a non-expert programmer.",
      "Award": ""
    },
    {
      "Title": "Keynote 2: Caspar Bowden",
      "Key": "f98d52fc-a9c0-4edf-bcde-c7b0498d6dc1",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Caspar gives a keynote.",
      "Award": ""
    },
    {
      "Title": "Welcome and Introduction of First Keynote",
      "Key": "72103364-5d14-4a64-ae3c-6ba0a8d7a633",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Welcome and Introduction of Keynote Speaker",
      "Award": ""
    },
    {
      "Title": "Keynote 1: Stephen Chong",
      "Key": "ad25a867-d7b1-4bda-a45f-f504f42b94cd",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Stephen Chong gives a talk",
      "Award": ""
    },
    {
      "Title": "PENCIL: A platform-neutral intermediate language for the parallelizing compilation of DSLs",
      "Key": "5d36725c-528d-4d68-b281-36278701824f",
      "Type": "",
      "PersonsString": "Ulysse Beaugnon, Riyadh Baghdadi, Mohammed Javed Absar, Adam Betts, Albert Cohen, Alastair Donaldson, Tobias Grosser, Sven van Haastregt, Yabin Hu, Jeroen Ketema, Alexey Kravets, Anton Lokmotov, Sven Verdoolaege",
      "AffiliationsString": "undefined, undefined, undefined, undefined, INRIA, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined",
      "Authors": [
        "Ulysse Beaugnon @ undefined",
        "Riyadh Baghdadi @ undefined",
        "Mohammed Javed Absar @ undefined",
        "Adam Betts @ undefined",
        "Albert Cohen @ INRIA",
        "Alastair Donaldson @ undefined",
        "Tobias Grosser @ undefined",
        "Sven van Haastregt @ undefined",
        "Yabin Hu @ undefined",
        "Jeroen Ketema @ undefined",
        "Alexey Kravets @ undefined",
        "Anton Lokmotov @ undefined",
        "Sven Verdoolaege @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "undefined",
        "undefined",
        "INRIA",
        "undefined",
        "undefined",
        "undefined",
        "undefined",
        "undefined",
        "undefined",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Stella: A DSL for structuring high-performance simulations in Python",
      "Key": "94edd843-07e4-486a-8049-d20c60b9ed51",
      "Type": "",
      "PersonsString": "David Mohr, Darko Stefanovic",
      "AffiliationsString": "undefined, undefined",
      "Authors": [
        "David Mohr @ undefined",
        "Darko Stefanovic @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined"
      ],
      "Abstract": "We want to make it easier and quicker to write well performing scientific\nsimulations code that will (1) run fast on CPUs, and (2) be possible to\nmaintain across the matrix of science experiments simulated vs. code versions\nwhich is inadvertently created in the course of working in an area. Instead of\nprototyping in a high-level language and then rewriting in a lower-level\nlanguage, we created a DSL embedded in Python which is transparently usable,\nretains some OOP features, compiles to machine code, and executes at speed\nsimilar to C.",
      "Award": ""
    },
    {
      "Title": "Accordion: An EDSL for Hardware Instruction Set Extensions",
      "Key": "d9bb16ee-c3bf-43b7-8c18-c8cc779d8970",
      "Type": "",
      "PersonsString": "Matthew Fernandez, Rebekah Leslie-Hurd",
      "AffiliationsString": "undefined, undefined",
      "Authors": [
        "Matthew Fernandez @ undefined",
        "Rebekah Leslie-Hurd @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined"
      ],
      "Abstract": "This talk will describe a DSL for representing the SGX extensions to the Intel Architecture instruction set, the accompanying compiler and some early results of its use. It is hoped that our experience may be of interest to the community and instructive in embedded DSLs. In future we intend to explore repurposing our language for representing other instruction set extensions and reflecting output from the model checkers back into the DSL to better explain traces to the user. The talk will explain these future directions and we are receptive to further ideas from the community.",
      "Award": ""
    },
    {
      "Title": "Next Steps",
      "Key": "424bd2e3-e1b2-42be-90ab-91c4a461880d",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "The Program Chairs lead a session on the utility of PSP 2014, the lessons learned and how to proceed in 2015.",
      "Award": ""
    },
    {
      "Title": "Best Paper Award",
      "Key": "451e1c4e-7b69-430f-8fbb-4a354c4cd226",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Best paper given to the best student paper.",
      "Award": ""
    },
    {
      "Title": "PANEL: Security and Privacy in Programming",
      "Key": "d1bd0cb7-eda1-42c6-a3ec-d1bbc1caca31",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Panel discussion",
      "Award": ""
    },
    {
      "Title": "Activity: Hands-on Integrating Mobile to your Business Process",
      "Key": "a401afe9-0ee8-47cc-b2eb-02281d7f9267",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Modular Reasoning in Capsule",
      "Key": "1b259511-2dde-4683-9899-bc9e4591338d",
      "Type": "",
      "PersonsString": "Mehdi Bagherzadeh, Hridesh Rajan",
      "AffiliationsString": "Iowa State University, undefined",
      "Authors": [
        "Mehdi Bagherzadeh @ Iowa State University",
        "Hridesh Rajan @ undefined"
      ],
      "Affiliations": [
        "Iowa State University",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Composita: Bringing Order to Agent Communications",
      "Key": "6f958351-5053-4028-bb5d-9147cca33479",
      "Type": "",
      "PersonsString": "Luc Bl\u00e4ser",
      "AffiliationsString": "undefined",
      "Authors": [
        "Luc Bl\u00e4ser @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Savina - An Actor Benchmark Suite",
      "Key": "86fe3cf4-d715-4468-9ea1-df4ab8e6284f",
      "Type": "",
      "PersonsString": "Shams Imam, Vivek Sarkar",
      "AffiliationsString": "Rice University, Rice University",
      "Authors": [
        "Shams Imam @ Rice University",
        "Vivek Sarkar @ Rice University"
      ],
      "Affiliations": [
        "Rice University",
        "Rice University"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Closing",
      "Key": "928bf014-bdd2-4d06-94e6-4d4a9de52936",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Supporting Relative Location Constraints in Actor Systems \t",
      "Key": "ae792373-86fc-40b3-a743-69d28fcd1621",
      "Type": "",
      "PersonsString": "Xinghui Zhao, Hua  Zhang, Nadeem Jamali",
      "AffiliationsString": "University of Washington, undefined, undefined",
      "Authors": [
        "Xinghui Zhao @ University of Washington",
        "Hua  Zhang @ undefined",
        "Nadeem Jamali @ undefined"
      ],
      "Affiliations": [
        "University of Washington",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Brainstorming & Discussion",
      "Key": "cf0c0695-995a-4839-a2ef-c12e274ac237",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Open Discussion (around drag-and-drop language design)",
      "Key": "5ef2974f-a3b3-40a2-9138-fd2be25111c5",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Business Meeting",
      "Key": "6bf5101b-94e1-467d-8628-1b2bae4a13cf",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Wrap up and discussion of what worked, what didn't, and ideas for growing and sustaining SPLASH-E",
      "Award": ""
    },
    {
      "Title": "yaPOSH: Engineering Behaviors for Videogame Characters",
      "Key": "9ef1a4e8-7c8e-4f10-9143-de8ea58aca60",
      "Type": "",
      "PersonsString": "Jakub Gemrot, Martin \u010cern\u00fd, Cyril Brom",
      "AffiliationsString": "Faculty of Mathematics and Physics, Charles University in Prague, Faculty of Mathematics and Physics, Charles University in Prague, Faculty of Mathematics and Physics, Charles University in Prague",
      "Authors": [
        "Jakub Gemrot @ Faculty of Mathematics and Physics, Charles University in Prague",
        "Martin \u010cern\u00fd @ Faculty of Mathematics and Physics, Charles University in Prague",
        "Cyril Brom @ Faculty of Mathematics and Physics, Charles University in Prague"
      ],
      "Affiliations": [
        "Faculty of Mathematics and Physics, Charles University in Prague",
        "Faculty of Mathematics and Physics, Charles University in Prague",
        "Faculty of Mathematics and Physics, Charles University in Prague"
      ],
      "Abstract": "We present yaPOSH \u2013 a visual tool for design of character behaviors in videogames.  yaPOSH allows for separation of the behavior design from the actual behavior implementation. Students report that the tool helped them to separate their thoughts and development efforts between the design and implementation. Additionally we show that implementation details of the yaPOSH tool had positive impact on the effectiveness of learning.",
      "Award": ""
    },
    {
      "Title": "Using Catrobat, a Scratch-like visual programming language for smartphones, in a middle school physics course",
      "Key": "b6e9e41e-e9da-42de-8765-b79046684aba",
      "Type": "",
      "PersonsString": "Roxane Koitz, Wolfgang Slany",
      "AffiliationsString": "Graz University of Technology, Institute of Software Technology, Graz University of Technology\t",
      "Authors": [
        "Roxane Koitz @ Graz University of Technology",
        "Wolfgang Slany @ Institute of Software Technology, Graz University of Technology\t"
      ],
      "Affiliations": [
        "Graz University of Technology",
        "Institute of Software Technology, Graz University of Technology\t"
      ],
      "Abstract": "Pocket Code allows you to create and execute Catrobat programs in a visual, \"LEGO-style\" programming environment. Pocket Code and Catrobat are inspired by MIT\u2019s Scratch but independently developed and entirely running on smartphones and tablets \u2013 no Laptop or PC whatsoever is needed to create or execute Catrobat programs. With Pocket Code you can develop your own games, animations, or music videos, taking advantage of multi-touch, built-in sensors, and the full display resolution of your device. It also allows wirelessly controlling external hardware such as Arduino boards, Lego Mindstorms robots, or Parrot\u2019s AR.Drone. Pocket Code allows you to download Catrobat programs that others have made and upload programs to the Web, all under free open source licenses to foster learning, sharing, and remixing. All major mobile platforms are supported. Google is promoting Pocket Code through their Google Play for Education platform, and Catrobat has been chosen as the official programming language for OLPC tablets. Pocket Code encourages tinkering and allows you to iteratively create your own apps using just one finger. A first app can be running in less than one minute. I will demo Pocket Code live during my presentation and report about our experiences in physics project at school.",
      "Award": ""
    },
    {
      "Title": "Jonathan Gallagher, Robin Gonzalez and Michael Locasto.\t\"Verifying Security Patches\"",
      "Key": "9e6aa30f-b9a6-4788-91ba-5fe015440888",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "In this paper, we introduce a formal framework for ensuring\nthe correctness of security patches. We discuss the issues\nand provide a sketch of how one could implement a system\nthat proves (in many cases) or strongly veries (in other\ncases) that a security patch xes a bug, and changes nothing\nelse about the semantics of a program. We make use of an\nanalysis of \\bug surfaces\" { the set of inputs that trigger a\nbug, to give a type theoretic characterization of the nonbuggy\nsurface of a program. We thus give credence to the\nLangsec notion that security \naws are often about input\nhandling, and show how formal patch and bug analysis can\nbe used to dene a more correct input type for a program.\n\n",
      "Award": ""
    },
    {
      "Title": "Nathan Fulton, Cyrus Omar and Jonathan Aldrich. \"Statically Typed String Sanitation Inside a Python\"",
      "Key": "aabde152-bdfb-4d0c-a551-a61f57b31f25",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Web applications must ultimately command systems like\nweb browsers and database engines using strings. Strings\nderived from improperly sanitized user input can thus be\na vector for command injection attacks. In this paper, we\nintroduce regular string types, which classify strings known\nstatically to be in a specified regular language. These types\ncome equipped with common operations like concatenation,\nsubstitution and coercion, so they can be used to implement,\nin a conventional manner, the portions of a web application\nor application framework that must directly construct com-\nmand strings. Simple type annotations at key interfaces can\nbe used to statically verify that sanitization has been per-\nformed correctly without introducing redundant run-time\nchecks. We specify this type system in a minimal typed\nlambda calculus, \u03bbRS.<br \/><br \/>\nTo be practical, adopting a specialized type system like\nthis should not require the adoption of a new programming\nlanguage. Instead, we advocate for extensible type systems:\nnew type system fragments like this should be implemented\nas libraries atop a mechanism that guarantees that they can\nbe safely composed. We support this with two contribu-\ntions. First, we specify a translation from \u03bbRS to a language\nfragment containing only standard strings and regular ex-\npressions. Second, taking Python as a language with these\nconstructs, we implement the type system together with the\ntranslation as a library using atlang, an extensible static\ntype system for Python being developed by the authors.",
      "Award": ""
    },
    {
      "Title": "Open Discussion (around motivating learning)",
      "Key": "09fb68d2-dae8-4170-822b-feb4eb296e0f",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Meet, Greet, and Caffeinate",
      "Key": "4406eb7b-3eb4-4e94-8ac4-549a8e9a7742",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "Casual social time before the actual program begins at 9am",
      "Award": ""
    },
    {
      "Title": "Talk on the CORGIS Big-Data Framework and the MUSIC model for assessing student motivation",
      "Key": "78f22bca-c0a5-4c37-a596-13a0f6e1602b",
      "Type": "",
      "PersonsString": "Austin Cory Bart, Jason Riddle, Omar Saleem, Bushra Chowdhury, Eli Tilevich, Cliff Shaffer, Dennis Kafura",
      "AffiliationsString": "Virginia Tech, Virginia Tech, Virginia Tech, Virginia Tech, Virginia Tech, Virginia Tech, Virginia Tech",
      "Authors": [
        "Austin Cory Bart @ Virginia Tech",
        "Jason Riddle @ Virginia Tech",
        "Omar Saleem @ Virginia Tech",
        "Bushra Chowdhury @ Virginia Tech",
        "Eli Tilevich @ Virginia Tech",
        "Cliff Shaffer @ Virginia Tech",
        "Dennis Kafura @ Virginia Tech"
      ],
      "Affiliations": [
        "Virginia Tech",
        "Virginia Tech",
        "Virginia Tech",
        "Virginia Tech",
        "Virginia Tech",
        "Virginia Tech",
        "Virginia Tech"
      ],
      "Abstract": "As Computer Science expands to more non-CS majors under the banner of Computational Thinking, it is important that these students perceive the experience as useful to them. Authentic and motivating projects is one way to engage students. To that end, big data - crucial in fields from agriculture to history to science and beyond - offers a promising educational option. However, teaching big data topics to non-CS majors is a challenging undertaking, strewn with technological obstacles such as the unavailability of data, irregular structure, and difficulty of dissemination. To solve the technical difficulties, we introduce a new project: CORGIS - a \"Collection of Real-time, Giant, Interesting, Situated Datasets\" which encompasses two distinct goals: (1) create a new context for introductory programming, and (2) introduce new content related to big data. CORGIS accommodates both of these goals by means of technological scaffolding. The CORGIS project comprises a collection of libraries that provide an interface to big data for students, and architectures for rapidly enabling new high velocity and high volume data sources. \n\nIn this talk, we give an overview of CORGIS' capabilities, review a model (MUSIC) others have developed for assessing student motivation, and discuss how we might apply MUSIC to assess CORGIS.",
      "Award": ""
    },
    {
      "Title": "Short Talk on the Gidget Tool for Learning Programming",
      "Key": "83191370-fe70-4fea-b05e-850259a52530",
      "Type": "",
      "PersonsString": "Michael Lee",
      "AffiliationsString": "University of Washington",
      "Authors": [
        "Michael Lee @ University of Washington"
      ],
      "Affiliations": [
        "University of Washington"
      ],
      "Abstract": "Gidget is a puzzle-based system for teaching early programming and debugging skills.  This talk discusses some of the design and HCI lessons learned from running user-studies to evaluate student learning in Gidget.",
      "Award": ""
    },
    {
      "Title": "How Developers Use Data Race Detection Tools",
      "Key": "15ab400a-cc7a-463b-9114-bdc59f2f48f8",
      "Type": "",
      "PersonsString": "Caitlin Sadowski, Jaeheon  Yi",
      "AffiliationsString": "Google, Google",
      "Authors": [
        "Caitlin Sadowski @ Google",
        "Jaeheon  Yi @ Google"
      ],
      "Affiliations": [
        "Google",
        "Google"
      ],
      "Abstract": "Developers need help with multithreaded programming. We investigate how two program analysis tools are used by developers at Google: ThreadSafety, an annotation-based static data race analysis, and TSan, a dynamic data race detector. The data was collected by interviewing seven veteran industry developers at Google, and provides unique insight into how four different teams use tooling in different ways to help with multithreaded programming. The result is a collection of perceived pros and cons of using ThreadSafety and TSan, as well as general issues with multithreading.",
      "Award": ""
    },
    {
      "Title": "Research.js: Evaluating Your Research on the Web",
      "Key": "3171ac48-526a-4137-9754-5f56dcf1f466",
      "Type": "",
      "PersonsString": "Joel Galenson, Cindy Rubio-Gonzalez, Sarah Chasins, Liang Gong",
      "AffiliationsString": "University of California, Berkeley, University of California, Berkeley, University of California, Berkeley, University of California, Berkeley",
      "Authors": [
        "Joel Galenson @ University of California, Berkeley",
        "Cindy Rubio-Gonzalez @ University of California, Berkeley",
        "Sarah Chasins @ University of California, Berkeley",
        "Liang Gong @ University of California, Berkeley"
      ],
      "Affiliations": [
        "University of California, Berkeley",
        "University of California, Berkeley",
        "University of California, Berkeley",
        "University of California, Berkeley"
      ],
      "Abstract": "Many research projects are publicly available but rarely used due to the difficulty of building and installing them. We propose that researchers compile their projects to JavaScript and put them online to make them more accessible to new users and thus facilitate large-scale online usability studies.\n",
      "Award": ""
    },
    {
      "Title": "Invited Talk #2",
      "Key": "4aeb4d97-db2d-4af5-80f5-874407f8d038",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited Talk #1",
      "Key": "57d6f6a1-b0fb-45ab-b15e-e8fb3985f250",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited Talk #3",
      "Key": "5a905f90-05ac-4d2f-8763-15cdb1f2e2f4",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Supporting Social Interactions and Awareness in Educational Programming Environments",
      "Key": "745974cd-3266-49db-9d88-b0496b46c431",
      "Type": "",
      "PersonsString": "Adam Carter, Christopher Hundhausen",
      "AffiliationsString": "Washington State University, Washington State University",
      "Authors": [
        "Adam Carter @ Washington State University",
        "Christopher Hundhausen @ Washington State University"
      ],
      "Affiliations": [
        "Washington State University",
        "Washington State University"
      ],
      "Abstract": "Empirical evaluations of programming environments have traditionally focused on human performance measures such as task efficiency, error rates, and learnability. In addition to these effectiveness measures, we believe there is good reason to consider the ability of programming environments to promote *social interactions and awareness* during programming tasks. Indeed, especially in educational contexts, programming success and persistence in the computing discipline have been positively correlated with programmers\u2019 sense of community and ability to communicate with others. We introduce *social programming environments* as a new breed of educational programming environment designed to promote social interaction and awareness, and we propose a way to evaluate such environments relative to social learning theory.",
      "Award": ""
    },
    {
      "Title": "Design and Evaluation of Gradual Typing for Python",
      "Key": "11cf4eba-e492-413d-9ba4-f8b2cde4e7b3",
      "Type": "",
      "PersonsString": "Michael Vitousek, Andrew Kent, Jeremy Siek, Jim Baker",
      "AffiliationsString": "undefined, undefined, undefined, undefined",
      "Authors": [
        "Michael Vitousek @ undefined",
        "Andrew Kent @ undefined",
        "Jeremy Siek @ undefined",
        "Jim Baker @ undefined"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Abstracting Abstract Control",
      "Key": "25404fc1-3b91-4d9b-8b79-b1b4ff81fea6",
      "Type": "",
      "PersonsString": "J. Ian Johnson, David Van Horn",
      "AffiliationsString": "Northeastern University, undefined",
      "Authors": [
        "J. Ian Johnson @ Northeastern University",
        "David Van Horn @ undefined"
      ],
      "Affiliations": [
        "Northeastern University",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Sweeten Your JavaScript: Hygienic Macros for ES5",
      "Key": "8677c384-60f1-4f9a-b04c-556a184c61a8",
      "Type": "",
      "PersonsString": "Tim Disney, Nathan Faubion, David Herman, Cormac Flanagan",
      "AffiliationsString": "undefined, undefined, undefined, UC Santa Cruz",
      "Authors": [
        "Tim Disney @ undefined",
        "Nathan Faubion @ undefined",
        "David Herman @ undefined",
        "Cormac Flanagan @ UC Santa Cruz"
      ],
      "Affiliations": [
        "undefined",
        "undefined",
        "undefined",
        "UC Santa Cruz"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Contracts for Domain-Specific Languages in Ruby",
      "Key": "ec9c3af1-1643-4fb5-8804-435b286ba0e5",
      "Type": "",
      "PersonsString": "T. Stephen  Strickland, Brianna M. Ren, Jeffrey S. Foster",
      "AffiliationsString": "Brown University, undefined, undefined",
      "Authors": [
        "T. Stephen  Strickland @ Brown University",
        "Brianna M. Ren @ undefined",
        "Jeffrey S. Foster @ undefined"
      ],
      "Affiliations": [
        "Brown University",
        "undefined",
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Introductions",
      "Key": "067188cd-6e0d-486a-9d15-d8bd0ecd2574",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "#### Welcome:\n\nLukasz Ziarek, SUNY Buffalo, USA\n\n#### Elevator Talks by Students:\n\nTwo-minute teasers",
      "Award": ""
    },
    {
      "Title": "Structured Source Retrieval for Improving Software Search during Program Comprehension Tasks",
      "Key": "ddfd57a6-e716-4fd6-a9f3-45b7e75e6459",
      "Type": "",
      "PersonsString": "Brian Eddy",
      "AffiliationsString": "undefined",
      "Authors": [
        "Brian Eddy @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "During the software maintenance and evolution phase, the majority of a developer\u2019s time is spent on programming comprehension tasks. Feature location (i.e., finding the first location to make a modification), impact analysis (i.e., determining what and to what extent a program is affected by a change), and traceability (i.e., determining where requirements are implemented in the program), are all examples of such tasks. Recent research in the area of program comprehension has focused on using textual information, structural information (i.e., information regarding the creation and use of objects and methods within the code), and execution traces to develop tools that ease the burden on developers and decrease the time spent in each task. Furthermore, new studies in automating these tasks have started using text retrieval techniques, such as the vector space model (VSM), latent semantic indexing (LSI), and latent Dirichlet allocation (LDA) for searching software. This doctoral symposium summary presents two promising areas for improving existing techniques by combining structural information with text retrieval. The first is a methodology for evaluating the usefulness of text obtained from a program by looking at the structural location of terms (e.g., method name, comments, identifiers). The second focuses on improving the existing text retrieval approaches by providing more flexible queries (i.e., search strings). These two areas are complementary to each other and may be combined.",
      "Award": ""
    },
    {
      "Title": "Threading Concepts",
      "Key": "57828b00-3d5f-4f5a-9a95-db61f6f9b39d",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Parallel Programming Patterns",
      "Key": "7d604802-ca07-4586-b80b-f898baa7a3db",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Welcome and class overview",
      "Key": "7f6f74aa-3021-4af7-8df2-e1dae37a3a4f",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Registration and check-in",
      "Key": "8b8619a2-25f5-448e-b97c-74b032517748",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Programming with Eclipse",
      "Key": "8ed5731a-d042-4aa9-8288-8f71b384a08f",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Multicore Architecture",
      "Key": "9fbe9d58-da44-4ddc-9789-dfa794fe8ecc",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Correctness, Thread-safety, and Scalability",
      "Key": "01745629-ece7-4f43-8768-ff6439422cc6",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Parallelism with with Lightweight Task Framework and Parallel Streams in Java 7\/8",
      "Key": "276a488b-85b7-431c-abd4-351ec69c33cf",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Refactoring for Improving Throughput and Scalability",
      "Key": "9c173dfa-48b5-416c-aaad-c62e796e2361",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Advanced Concurrency",
      "Key": "f484ca72-bdfb-4c22-95bf-452b21701791",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Parallelism with Java Threads and ThreadPools",
      "Key": "6c1b57e0-9996-4122-8e7b-a0602288073c",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Thread-safety with Atomics* and Concurrent Collections",
      "Key": "782230c3-2810-4c85-a776-61eb6220c780",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited Talk 2: Dependence Programing with CnC",
      "Key": "1dde41a3-59ea-4ce8-b6d0-20c03ba58a94",
      "Type": "",
      "PersonsString": "Frank  Schlimbach",
      "AffiliationsString": "undefined",
      "Authors": [
        "Frank  Schlimbach @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "The major difficulty of traditional approaches to writing parallel software stems from their serial heritage. Typical serial programs are over-constraint in the sense that they make decisions that are semantically unnecessary. At the same time they do not explicitly  express the information that's needed to deduce a correct parallel program execution. The programmer is left alone with the painful task of separating what in the given serial execution ordering is semantically required and what is only a serialization artefact. A more productive approach is to let the programmer explicitly identify what precludes parallel execution in the application and leave out all others. There are exactly two reasons that computations cannot execute in parallel. If one computation produces data that the other one consumes, the producer must execute before the consumer. If one computation determines if another will execute, the controller must execute before the controllee. CnC lets you define exactly these two types of dependences between computations. With this information a programmer, a compiler or a runtime system can then take care of a correct serial or parallel execution. Its high-level but yet precise formulation allows an extensive separation of semantic concerns and tuning concerns such as parallelization. This makes optimizations for a given platform as well as migrating between different targets simpler. Last but not least a CnC specification puts no artificial limits on the parallelization and so allows fully asynchronous execution, not even requiring barriers between modules.",
      "Award": ""
    },
    {
      "Title": "Consideration of loop parallelization on heterogeneous multicore architecture using path and data dependence profiling",
      "Key": "49556f76-7177-40d0-8233-6802fd108dac",
      "Type": "",
      "PersonsString": "Takanobu  Baba",
      "AffiliationsString": "undefined",
      "Authors": [
        "Takanobu  Baba @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Discovering Parallelization Opportunities in Sequential Programs --- A Closer-to-Complete Solution",
      "Key": "5d7f75b7-61bf-43dd-a6df-101ff2a18ed5",
      "Type": "",
      "PersonsString": "Zhen Li",
      "AffiliationsString": "undefined",
      "Authors": [
        "Zhen Li @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Opening",
      "Key": "1cc1aa2e-1307-43bb-ad11-0200f1062ea8",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Lighthouse: A User-Centered Web Service for Linear Algebra Software",
      "Key": "1f42cff0-d0d7-4409-b762-4a9c2192e133",
      "Type": "",
      "PersonsString": "Boyana Norris",
      "AffiliationsString": "undefined",
      "Authors": [
        "Boyana Norris @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited Talk 1: Automatic and Precise Program Analyses for Reliable and Efficient Concurrency",
      "Key": "bcd19a18-8c8e-430f-b52e-309367c0b9cd",
      "Type": "",
      "PersonsString": "Michael Pradel",
      "AffiliationsString": "University of California, Berkeley, USA",
      "Authors": [
        "Michael Pradel @ University of California, Berkeley, USA"
      ],
      "Affiliations": [
        "University of California, Berkeley, USA"
      ],
      "Abstract": "Developers of concurrent software strive for two contradictory goals. On\nthe one hand, the software should be reliable, which requires to\ncarefully synchronize concurrent accesses to shared data. On the other\nhand, the software should be efficient, which is difficult to realize in\nthe presence of unnecessary synchronization operations. To help\ndevelopers balance these two goals, this talk explores program analyses\nthat detect correctness and performance problems. The presented analyses\nare automatic, in the sense that they run on existing software with\nminimal effort, and precise, in the sense that all reported problems are\ntrue positives. The key idea is to combine techniques for generating\nconcurrent tests with dynamic analyses that detect problems even though\nthere is no explicit specification. We present two implementations of\nthis idea that detect problems in widely used thread-safe classes, and\ndiscuss open challenges to be addressed in future research.\n",
      "Award": ""
    },
    {
      "Title": "Characterizing the Energy Efficiency of Java's Thread-Safe Collections in a Multi-Core Environment",
      "Key": "6a919a61-4904-4a58-a1ab-96ec6a84318f",
      "Type": "",
      "PersonsString": "Fernando Castor",
      "AffiliationsString": "UFPE",
      "Authors": [
        "Fernando Castor @ UFPE"
      ],
      "Affiliations": [
        "UFPE"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Resource-Based Transaction Management for Best-Effort Hardware Transactional Memory",
      "Key": "a05f8871-1870-4561-a62a-86357518544f",
      "Type": "",
      "PersonsString": "Christina Peterson",
      "AffiliationsString": "undefined",
      "Authors": [
        "Christina Peterson @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "On Scaling Dynamic Programming Problems with a Multithreaded Tabling System",
      "Key": "a64ded47-b132-46d3-90d9-0dd12c105325",
      "Type": "",
      "PersonsString": "Miguel  Areias ",
      "AffiliationsString": "undefined",
      "Authors": [
        "Miguel  Areias  @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Nebo: An efficient, parallel, and portable domain-specific language for numerically solving",
      "Key": "fe91c80c-6e10-4623-865e-48ed97472438",
      "Type": "",
      "PersonsString": "Christopher Earl",
      "AffiliationsString": "undefined",
      "Authors": [
        "Christopher Earl @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Critical-Blame Analysis for OpenMP 4.0 Offloading on Intel Xeon Phi",
      "Key": "37c885cf-ff18-4dee-931a-7a999713a480",
      "Type": "",
      "PersonsString": "Robert Dietrich",
      "AffiliationsString": "undefined",
      "Authors": [
        "Robert Dietrich @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Invited Talk 3: Applying Software Engineering Principles to Computational Science",
      "Key": "7aaf6e7b-8f6e-48b8-8d5e-b2c554b50e44",
      "Type": "",
      "PersonsString": "Jeff Carver",
      "AffiliationsString": "University of Alabama",
      "Authors": [
        "Jeff Carver @ University of Alabama"
      ],
      "Affiliations": [
        "University of Alabama"
      ],
      "Abstract": "The increase in the importance of Computational Science software motivates the need to identify and understand which software engineering (SE) practices are appropriate. Because of the uniqueness of the computational science domain, exiting SE tools and techniques developed for the business\/IT community are often not efficient or effective. Appropriate SE solutions must account for the salient characteristics of the computational science development environment. To identify these solutions, members of the SE community must interact with members of the computational science community. This presentation will discuss the findings from a series of case studies of CSE projects and the results of an ongoing workshop series. First, a series of case studies of computational science projects were conducted as part of the DARPA High Productivity Computing Systems (HPCS) project. The main goal of these studies was to understand how SE principles were and were not being applied in computational science along with some of the reasons why. The studies resulted in nine lessons learned about computational science software that are important to consider moving forward. Second, the Software Engineering for Computational Science and Engineering workshop brings together software engineers and computational scientists. The outcomes of this workshop series provide interesting insight into potential future trends.",
      "Award": ""
    },
    {
      "Title": "A Parallelization Approach for Resource Restricted Embedded Heterogeneous MPSoCs Inspired by OpenMP",
      "Key": "cf08c66d-368e-4fc4-9d60-95e30a588cda",
      "Type": "",
      "PersonsString": "Olaf Neugebauer",
      "AffiliationsString": "undefined",
      "Authors": [
        "Olaf Neugebauer @ undefined"
      ],
      "Affiliations": [
        "undefined"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "A Simple, Symmetric, Subjective Foundation for Object-, Aspect- and Context-Oriented Programming",
      "Key": "bde31022-675b-4119-91b1-a9372ec4248f",
      "Type": "",
      "PersonsString": "Harold Ossher, David Ungar, Doug Kimelman",
      "AffiliationsString": "IBM Research, IBM Research, IBM Research",
      "Authors": [
        "Harold Ossher @ IBM Research",
        "David Ungar @ IBM Research",
        "Doug Kimelman @ IBM Research"
      ],
      "Affiliations": [
        "IBM Research",
        "IBM Research",
        "IBM Research"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "The Success, Failure, and Future of Distributed Objects",
      "Key": "f073ad5b-f138-4614-899e-9e309fe1f9c0",
      "Type": "",
      "PersonsString": "Jonathan Aldrich",
      "AffiliationsString": "Carnegie Mellon University",
      "Authors": [
        "Jonathan Aldrich @ Carnegie Mellon University"
      ],
      "Affiliations": [
        "Carnegie Mellon University"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Informal Group Discussion",
      "Key": "852e205c-0559-4d71-b22e-3213d60e4752",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Program Equivalence by Observing Some of the Method Calls",
      "Key": "b8602b6f-fe45-4e75-b745-b3feacca247d",
      "Type": "",
      "PersonsString": "Tim Wood, Sophia Drossopoulou",
      "AffiliationsString": "Imperial College, Imperial College London",
      "Authors": [
        "Tim Wood @ Imperial College",
        "Sophia Drossopoulou @ Imperial College London"
      ],
      "Affiliations": [
        "Imperial College",
        "Imperial College London"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "The Problem of Structural Type Tests in a Gradual-Typed Language",
      "Key": "bd28a1a3-64f0-4ba1-9a42-c972ce1752c2",
      "Type": "",
      "PersonsString": "John  Boyland",
      "AffiliationsString": "University of Wisconsin, Milwaukee",
      "Authors": [
        "John  Boyland @ University of Wisconsin, Milwaukee"
      ],
      "Affiliations": [
        "University of Wisconsin, Milwaukee"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Managing Gradual Typing with Message-Safety in Dart",
      "Key": "ee91b938-b485-4471-8f7f-25bf298dabba",
      "Type": "",
      "PersonsString": "",
      "AffiliationsString": "",
      "Authors": [
        
      ],
      "Affiliations": [
        
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Extensibilty for the masses",
      "Key": "724c99f3-0cf2-4a59-8834-57ca28fe89c8",
      "Type": "",
      "PersonsString": "William Cook",
      "AffiliationsString": "UT Austin",
      "Authors": [
        "William Cook @ UT Austin"
      ],
      "Affiliations": [
        "UT Austin"
      ],
      "Abstract": "",
      "Award": ""
    },
    {
      "Title": "Exercises in Programming Style",
      "Key": "2577cb50-08d8-49b3-93c3-47e6aeca9acd",
      "Type": "",
      "PersonsString": "Crista Lopes",
      "AffiliationsString": "University of California, Irvine",
      "Authors": [
        "Crista Lopes @ University of California, Irvine"
      ],
      "Affiliations": [
        "University of California, Irvine"
      ],
      "Abstract": "Back in the 1940s, a French writer called Raymond Queneau wrote an interesting book with the title Exercises in Style featuring 99 renditions of the exact same short story, each written in a different style. In my book \u201cExercises in Programming Style\u201d (available in June 2014) I shamelessly do the same for a simple program. From monolithic to object-oriented to continuations to relational to publish\/subscribe to monadic to aspect-oriented to map-reduce, and much more, you will get a tour through the richness of human computational thought by means of implementing one simple program in many different ways. This is more than an academic exercise; large-scale systems design feeds on these ways of thinking. I will talk about the dangers of getting trapped in just one or two prescribed styles during your career, and the need to truly understand this wide variety of concepts when architecting software.",
      "Award": ""
    },
    {
      "Title": "Programming Distributed Algorithms",
      "Key": "434aa9f1-8db1-40a7-a78b-897d86cdb05d",
      "Type": "",
      "PersonsString": "Annie Liu, Scott Stoller, Bo Lin",
      "AffiliationsString": "Stony Brook University, Stony Brook University, Stony Brook University",
      "Authors": [
        "Annie Liu @ Stony Brook University",
        "Scott Stoller @ Stony Brook University",
        "Bo Lin @ Stony Brook University"
      ],
      "Affiliations": [
        "Stony Brook University",
        "Stony Brook University",
        "Stony Brook University"
      ],
      "Abstract": "This tutorial gives an overview of methods and languages for programming distributed algorithms.  It includes (1) an introduction to distributed algorithms, including Paxos for distributed consensus at the core of distributed services; (2) a method for programming distributed algorithms with (a) high-level control flows that are easy to understand as in pseudo-code, and (b) precise semantics for rigorous analysis as in specification languages; (3) a language, DistAlgo, that minimally extends conventional object-oriented programming languages for such programming of distributed algorithms; and (4) demonstrations with an implementation of DistAlgo in Python.  DistAlgo has been used to easily implement distributed algorithms and services in dozens of course projects.\n",
      "Award": ""
    },
    {
      "Title": "Rust - Zero-cost safety",
      "Key": "00448033-c2d8-4540-975c-fccb33816ce3",
      "Type": "",
      "PersonsString": "Nicholas Matsakis",
      "AffiliationsString": "Mozilla Corporation",
      "Authors": [
        "Nicholas Matsakis @ Mozilla Corporation"
      ],
      "Affiliations": [
        "Mozilla Corporation"
      ],
      "Abstract": "Rust is a new programming language targeting systems-level applications. Rust offers a similar level of control over performance to C++, but guarantees type soundness, memory safety, and data-race freedom. One of Rust's distinguishing features is that, like C++, it supports stack allocation and does not require the use of a garbage collector. In this tutorial, we will cover the fundamentals of writing Rust programs and understanding how its type system works.",
      "Award": ""
    },
    {
      "Title": "One VM to Rule Them All",
      "Key": "4cd9b2f7-c296-47e3-84dc-15d7e485bdb8",
      "Type": "",
      "PersonsString": "Christian Wimmer",
      "AffiliationsString": "Oracle Labs",
      "Authors": [
        "Christian Wimmer @ Oracle Labs"
      ],
      "Affiliations": [
        "Oracle Labs"
      ],
      "Abstract": "We present Truffle, a novel open-source framework for implementing managed languages in Java. The language implementer writes an AST interpreter. It uses our framework that allows tree rewriting during AST interpretation. Tree rewrites incorporate type feedback and other profiling information into the tree, thus specializing the tree and augmenting it with run-time information. When the tree reaches a stable state, partial evaluation compiles the tree into optimized machine code. The partial evaluation is done by Graal, the just-in-time compiler of our version of the Java HotSpot VM.\n\nOracle Labs as well as external research groups have implemented a variety of programming languages on top of Truffle, including JavaScript, Ruby, R, Python, and Smalltalk. They are competitive with or even faster than the best implementations that existed before.\n\nThis tutorial is both for newcomers and existing users of Truffle. We introduce the basic concepts of Truffle and show you how to get started with your own high-performance language implementation. And we present recently added features of Truffle, for example, a language-independent object model; and the API to perform guest-language stack walking and local variable introspection without losing performance.",
      "Award": ""
    },
    {
      "Title": "Software Engineering for Mobile Development: Best Practices, Anti-patterns, Tools, and Techniques",
      "Key": "d1fc93b5-6ba2-4823-914d-d7b39b16cd9b",
      "Type": "",
      "PersonsString": "Aharon Abadi",
      "AffiliationsString": "IBM Research",
      "Authors": [
        "Aharon Abadi @ IBM Research"
      ],
      "Affiliations": [
        "IBM Research"
      ],
      "Abstract": "In recent years, there has been exponential growth in both the development and the use of mobile applications.  During the development performance, security and energy saving must to be taken into account. The goal of this tutorial is to introduce of mobile applications development using an IBM mobile development platform. As part of this tutorial, we review the challenges in mobile development, present advanced techniques for development of mobile applications according to the best practices, and present refactoring and analysis for automatic identification and fixing of anti patterns in mobile applications. ",
      "Award": ""
    },
    {
      "Title": "Batteries Included: Generative Programming with Scala and LMS",
      "Key": "cee1e2f6-c76e-4a3c-9345-039ecd71b494",
      "Type": "",
      "PersonsString": "Tiark Rompf, Nada Amin, Manohar Jonnalagedda",
      "AffiliationsString": "Purdue & Oracle Labs, EPFL, EPFL, Switzerland",
      "Authors": [
        "Tiark Rompf @ Purdue & Oracle Labs",
        "Nada Amin @ EPFL",
        "Manohar Jonnalagedda @ EPFL, Switzerland"
      ],
      "Affiliations": [
        "Purdue & Oracle Labs",
        "EPFL",
        "EPFL, Switzerland"
      ],
      "Abstract": "Most problems can be solved by adding a level of indirection. But indirection does not come for free -- it has a high cost in performance!\n\nWhen performance matters, programmers pick C over high-level alternatives. The drawbacks are well known: buggy systems, security vulnerabilities, poor programmer productivity, etc.\n\nAn alternative approach is generative programming: writing expressive high-level programs that generate fast low-level code at runtime.  While there are successful program generators for key libraries (BLAS, FFT), generative programming has remained somewhat of a black art.\n\nThis tutorial provides a step-by-step introduction to the open-source LMS (Lightweight Modular Staging) framework, which brings runtime code generation and compilation to Scala programs.\n\nAs an example of serious systems-level programming, we will build, within this 90 minute tutorial, a SQL query engine that outperforms existing database systems and consists of just about 500 lines of high-level Scala code.\n\nAlong the way, we will discuss powerful generative programming patterns such as mixed-stage (static\/dynamic) data structures and mechanically turning interpreters into compilers through staging (e.g. for SQL queries or regular expressions).",
      "Award": ""
    },
    {
      "Title": "Designing Programming Languages for People: Data-Driven Methods",
      "Key": "be093c42-4175-4d73-9a71-8711bb7c09bd",
      "Type": "",
      "PersonsString": "Stefan Hanenberg, Andreas Stefik",
      "AffiliationsString": "University of Duisburg-Essen, University of Nevada, Las Vegas ",
      "Authors": [
        "Stefan Hanenberg @ University of Duisburg-Essen",
        "Andreas Stefik @ University of Nevada, Las Vegas "
      ],
      "Affiliations": [
        "University of Duisburg-Essen",
        "University of Nevada, Las Vegas "
      ],
      "Abstract": "We will conduct an interactive tutorial describing how to evaluate the impact of language design decisions on people, focusing on objective and data-driven methods. This includes a wide variety of quantitative and qualitative empirical techniques, strategies for conducting experiments or randomized controlled trials, and case studies of what can\/cannot be tackled using such methods.  We will also discuss the evidence for or against competing design choices, showing what current beliefs in language design are confirmed, plausible, busted, or which have not been tested. Finally, participants will practice designing experimental protocols, obtaining expert feedback on the alternatives.",
      "Award": ""
    },
    {
      "Title": "QA to AQ: Shifting from Quality Assurance to Agile Quality",
      "Key": "8c590903-000a-4a35-a180-071f34b18a62",
      "Type": "",
      "PersonsString": "Joe Yoder",
      "AffiliationsString": "The Refactory, Inc.",
      "Authors": [
        "Joe Yoder @ The Refactory, Inc."
      ],
      "Affiliations": [
        "The Refactory, Inc."
      ],
      "Abstract": "Traditionally, QA is involved late in the development process, working independent from the development team. However, in agile teams, QA works more closely with the whole team on an ongoing and basis. QA in agile groups are more proactive, working to ensure quality in all facets of the development process. Because of this, Agile QA needs to know how to understand both requirements and the code, know how to write their own automated suite cases, and be involved in all aspects of the agile process. This tutorial will examine how the roles of QA shift as organizations become more agile. \n",
      "Award": ""
    },
    {
      "Title": "Hardware Design for Software Developers Using Liquid Metal",
      "Key": "27fdab3c-6725-40ec-9728-5980b54e8a55",
      "Type": "",
      "PersonsString": "Rodric Rabbah, Joshua Auerbach",
      "AffiliationsString": "IBM T.J. Watson Research Center, IBM Research",
      "Authors": [
        "Rodric Rabbah @ IBM T.J. Watson Research Center",
        "Joshua Auerbach @ IBM Research"
      ],
      "Affiliations": [
        "IBM T.J. Watson Research Center",
        "IBM Research"
      ],
      "Abstract": "The tutorial provides a practical introduction to the Liquid Metal language and toolchain, which is now publicly available from http:\/\/lime.watson.ibm.com.  Liquid Metal makes hardware design accessible to software engineers, using a language based on Java and incorporating ideas from other languages.  In contrast, previous High Level Synthesis tools use a subset of C.  The goal is of interest because specialized hardware can achieve massive parallelism and devotes more of its energy to productive computation rather than ISA interpretation.  The tutorial will introduce the language and will include a programming exercise targeting a Field Programmable Gate Array (FPGA). ",
      "Award": ""
    },
    {
      "Title": "Coccinelle for the Working Programmer",
      "Key": "a3905fe9-fb9b-4cab-8c6f-aa5da2046525",
      "Type": "",
      "PersonsString": "Julia  Lawall",
      "AffiliationsString": "LIP6",
      "Authors": [
        "Julia  Lawall @ LIP6"
      ],
      "Affiliations": [
        "LIP6"
      ],
      "Abstract": "Coccinelle is a program matching and transformation tool for C code, targeting bug finding and fixing, as well as the automation of pervasive source code evolutions. It can also be used for applications such as code understanding and calculation of software metrics, making it relevant to both software developers and software researchers.  A unique feature of Coccinelle is its combination of configurability and accessibility, relying on a patch-like notation that allows developers to specify patterns and transformations that are specific to their software project.  This interactive tutorial will give an overview of Coccinelle, in terms of examples from real software.",
      "Award": ""
    },
    {
      "Title": "Towards Language Composition",
      "Key": "115208f8-b5d0-4367-b45c-e012128151e7",
      "Type": "",
      "PersonsString": "Laurence Tratt",
      "AffiliationsString": "King's College London",
      "Authors": [
        "Laurence Tratt @ King's College London"
      ],
      "Affiliations": [
        "King's College London"
      ],
      "Abstract": "We want better programming languages, but \u201cbetter\u201d invariably ends up becoming \u201cbigger\u201d. Since we can't keep making our languages bigger, what alternatives do we have? I propose language composition as a possible solution to this long standing problem. Language composition means merging two languages and allowing them to be used together. At its most fine-grained, this could allow multiple programming languages to be used together within a single source file. However, language composition is not a new idea. It has failed in the past because editing composed programs was intolerably difficult and the resulting programs ran too slow to be usable. Without good solutions to these problems, language composition will remain an unrealised ideal. I will show how the work we are doing is beginning to address both aspects. We have built a prototype editor utilising a novel concept 'language boxes', which allows one to edit composed programs in a natural way. We are tackling the performance problem by composing together interpreters using meta-tracing, allowing us to build composed VMs with custom JITs that naturally optimise across different language's run-times. While we are much nearer the beginning of the journey than the end, our initial research has allowed us to build a simple composition of two very different languages: Python and Prolog.",
      "Award": ""
    },
    {
      "Title": "CheckCell: Data Debugging for Spreadsheets",
      "Key": "1764580c-a87a-432c-a93e-50ed39bc2962",
      "Type": "",
      "PersonsString": "Dan Barowy, Dimitar Gochev, Emery Berger",
      "AffiliationsString": "University of Massachusetts, Amherst, University of Massachusetts, Amherst, University of Massachusetts, Amherst",
      "Authors": [
        "Dan Barowy @ University of Massachusetts, Amherst",
        "Dimitar Gochev @ University of Massachusetts, Amherst",
        "Emery Berger @ University of Massachusetts, Amherst"
      ],
      "Affiliations": [
        "University of Massachusetts, Amherst",
        "University of Massachusetts, Amherst",
        "University of Massachusetts, Amherst"
      ],
      "Abstract": "Testing and static analysis can help root out bugs in programs, but not in data. This paper introduces data debugging, an approach that combines program analysis and statistical analysis to find potential data errors. Since it is impossible to know a priori whether data are erroneous or not, data debugging locates data that has an unusual impact on the computation. Such data is either very important, or wrong. Data debugging is especially useful in the context of data-intensive program- ming environments that intertwine data with programs in the form of queries or formulas. We present the first data debugging tool, CheckCell, an add-in for Microsoft Excel. CheckCell identifies cells that have an unusually high impact on the spreadsheet\u2019s computations. We show that CheckCell is both analytically and empirically fast and effective. We show that it successfully finds injected typographical errors produced by a generative model trained with data entry from 100,000 Mechanical Turk tasks. CheckCell also automatically identifies a key flaw in the infamous Reinhart and Rogoff spreadsheet.",
      "Award": ""
    },
    {
      "Title": "Statistical Debugging for Real-World Performance Problems",
      "Key": "542f0e28-9734-4f88-83c7-8ee5094dedf7",
      "Type": "",
      "PersonsString": "Linhai Song, Shan Lu",
      "AffiliationsString": "University of Wisconsin\u2013Madison, University of Chicago",
      "Authors": [
        "Linhai Song @ University of Wisconsin\u2013Madison",
        "Shan Lu @ University of Chicago"
      ],
      "Affiliations": [
        "University of Wisconsin\u2013Madison",
        "University of Chicago"
      ],
      "Abstract": "Design and implementation defects that lead to inefficient computation widely exist in software. These defects are difficult to avoid and discover. They lead to severe performance degradation and energy waste during production runs, and are becoming increasingly critical with the meager increase of single-core hardware performance and the increasing concerns about energy constraints. Effective tools that diagnose performance problems and point out the inefficiency root cause is sorely needed.\n\nThe state of the art of performance diagnosis is preliminary. Profiling can tell where computation resources are spent, but not where and why the resources are wasted. Performance-bug detectors can identify specific type of inefficient computation, but are not suited for diagnosing general performance problems. Effective failure diagnosis techniques, such as statistical debugging, have been proposed for\nfunctional bugs. However, whether they work for performance problems is still an open question.\n\nIn this paper, we first conduct an empirical study to understand how performance problems are observed and reported by real-world users. Our study shows that statistical debugging is a natural fit for diagnosing performance problems, which are often observed through comparison-based approaches and\nreported together with both good and bad inputs. We then thoroughly investigate different design points in statistical debugging, including three different predicates and two different types of statistical models, to understand which design point works the best for performance diagnosis. Finally, we study how \nsome unique nature of performance bugs allows sampling techniques to lower the overhead of run-time performance diagnosis without extending the diagnosis latency.",
      "Award": ""
    },
    {
      "Title": "Flint: Fixing Linearizability Violations",
      "Key": "7a675847-1117-4438-887f-7d6c7fea78d3",
      "Type": "",
      "PersonsString": "Peng Liu, Omer Tripp, Xiangyu Zhang",
      "AffiliationsString": "Purdue University, IBM Thomas J. Watson Research Center, Purdue University",
      "Authors": [
        "Peng Liu @ Purdue University",
        "Omer Tripp @ IBM Thomas J. Watson Research Center",
        "Xiangyu Zhang @ Purdue University"
      ],
      "Affiliations": [
        "Purdue University",
        "IBM Thomas J. Watson Research Center",
        "Purdue University"
      ],
      "Abstract": "Writing concurrent software while achieving both correctness and efficiency is a grand challenge. To facilitate this task, concurrent data structures have been introduced into the standard library of popular languages like Java and C#. Unfortunately, while the operations exposed by concurrent data structures behave atomically, compositions of these operations are not necessarily atomic. Recent studies have found many erroneous implementations of composed concurrent operations. \n\nWe address the problem of fixing nonlinearizable composed operations such that they behave atomically. We introduce Flint, an automated fixing algorithm for composed Map operations. Flint accepts as input a composed operation suffering from atomicity violations. Its output, if fixing succeeds, is a composed operation that behaves equivalently to the original operation in sequential runs and is guaranteed to be atomic. To our knowledge, Flint is the first general algorithm for fixing incorrect concurrent compositions. \n\nWe have evaluated Flint on 48 incorrect compositions from 27 popular applications, including Tomcat and MyFaces. The results are highly encouraging: Flint is able to correct 96% of the methods, and the fixed version is often the same as the fix by an expert programmer and as efficient as the original code.",
      "Award": ""
    },
    {
      "Title": "Finding Minimum Type Error Sources",
      "Key": "bd526d59-4011-4dc6-8fcd-004d8342e570",
      "Type": "",
      "PersonsString": "Zvonimir Pavlinovic, Tim King, Thomas Wies",
      "AffiliationsString": "New York University, New York University, New York University",
      "Authors": [
        "Zvonimir Pavlinovic @ New York University",
        "Tim King @ New York University",
        "Thomas Wies @ New York University"
      ],
      "Affiliations": [
        "New York University",
        "New York University",
        "New York University"
      ],
      "Abstract": "Automatic type inference is a popular feature of functional\nprogramming languages. If a program cannot be typed, the\ncompiler typically reports a single program location in its\nerror message. This location is the point where the type \ninference failed, but not necessarily the actual source of the\nerror. Other potential error sources are not even considered. \nHence, the compiler often misses the true error source,\nwhich increases debugging time for the programmer. In this\npaper, we present a general framework for automatic localization\nof type errors. Our algorithm finds all minimum error sources, \nwhere the exact definition of minimum is given\nin terms of a compiler-specific ranking criterion. Compilers\ncan use minimum error sources to produce more meaningful \nerror reports, and for automatic error correction. Our approach \nworks by reducing type inference to constraint satisfaction. \nWe then formulate the problem of computing minimum error \nsources in terms of weighted maximum satisfiability modulo \ntheories (MaxSMT). Ranking criteria are incorporated by \nassigning weights to typing constraints. The\nreduction to MaxSMT allows us to built on SMT solvers to\nsupport rich type systems. We have implemented an instance\nof our framework targeted at Hindley-Milner type systems.\nWe have evaluated our implementation on existing OCaml\nbenchmarks for type error localization and showed that our\napproach can find minimum error sources subject to useful\nranking criteria.",
      "Award": ""
    },
    {
      "Title": "Abstract Semantic Differencing via Speculative Correlation",
      "Key": "198e3291-12c0-447c-a234-31dde5c7cf02",
      "Type": "",
      "PersonsString": "Nimrod Partush, Eran Yahav",
      "AffiliationsString": "Technion, Technion",
      "Authors": [
        "Nimrod Partush @ Technion",
        "Eran Yahav @ Technion"
      ],
      "Affiliations": [
        "Technion",
        "Technion"
      ],
      "Abstract": "We address the problem of computing semantic differences between a program and a patched version of the program. Our goal is to obtain a precise characterization of the difference between program versions, or establish their equivalence. We focus on infinite-state numerical programs, and use abstract interpretation to compute an over-approximation of program differences.\n\nComputing differences and establishing equivalence under abstraction requires abstracting relationships between variables in the two programs. Towards that end, we use a correlating abstract domain to compute a sound approximation of these relationships which captures semantic difference. This approximation can be computed over any interleaving of the two programs. However, the choice of interleaving can significantly affect precision. We present a speculative search algorithm that aims to find an interleaving of the two programs with minimal abstract semantic difference. This method is unique as it allows the analysis to dynamically alternate between several interleavings.\n\nWe have implemented our approach and applied it to real-world examples including patches from Git, GNU Coreutils, as well as a few handpicked patches from the Linux kernel and the Mozilla Firefox web browser. Our evaluation shows that we compute precise approximations of semantic differences, and report few false differences.",
      "Award": ""
    },
    {
      "Title": "Validation of Memory Accesses Through Symbolic Analyses",
      "Key": "4d8130bb-a54a-4c02-afb3-67092ac54492",
      "Type": "",
      "PersonsString": "Henrique Nazar\u00e9 Santos, Izabela Karennina Travizani Maffra, Willer Fernandes Santos, Leonardo Barbosa Oliveira, Laure Gonnord, Fernando Magno Quint\u00e3o Pereira",
      "AffiliationsString": "UFMG, UFMG, UFMG, UFMG, ENS Lyon, UFMG",
      "Authors": [
        "Henrique Nazar\u00e9 Santos @ UFMG",
        "Izabela Karennina Travizani Maffra @ UFMG",
        "Willer Fernandes Santos @ UFMG",
        "Leonardo Barbosa Oliveira @ UFMG",
        "Laure Gonnord @ ENS Lyon",
        "Fernando Magno Quint\u00e3o Pereira @ UFMG"
      ],
      "Affiliations": [
        "UFMG",
        "UFMG",
        "UFMG",
        "UFMG",
        "ENS Lyon",
        "UFMG"
      ],
      "Abstract": "The C programming language does not prevent out-of-bounds memory accesses. There exist several techniques to secure C programs; however, these methods tend to slow down these programs substantially, because they populate the binary code with runtime checks. To deal with this problem, we have designed and tested two static analyses - symbolic region and range analysis - which we combine to remove the majority of these guards. In addition to the analyses themselves, we bring two other contributions. First, we describe live range splitting strategies that improve the efficiency and the precision of our analyses. Secondly, we show how to deal with integer overflows, a phenomenon that can compromise the correctness of static algorithms that validate memory accesses. We validate our claims by incorporating our findings into\nAddressSanitizer. We generate SPEC CINT 2006 code that is 17% faster and 9% more energy efficient than the code produced originally by this tool. Furthermore, our approach is 50% more effective than Pentagons, a state-of-the-art analysis to sanitize memory accesses.",
      "Award": ""
    },
    {
      "Title": "Static Analysis for Independent App Developers",
      "Key": "5bdf634d-d243-4fda-a523-5862368426eb",
      "Type": "",
      "PersonsString": "Lucas Brutschy, Pietro Ferrara, Peter  M\u00fcller",
      "AffiliationsString": "ETH Zurich, IBM Thomas J. Watson Research Center, ETH Zurich",
      "Authors": [
        "Lucas Brutschy @ ETH Zurich",
        "Pietro Ferrara @ IBM Thomas J. Watson Research Center",
        "Peter  M\u00fcller @ ETH Zurich"
      ],
      "Affiliations": [
        "ETH Zurich",
        "IBM Thomas J. Watson Research Center",
        "ETH Zurich"
      ],
      "Abstract": "Mobile app markets have lowered the barrier to market entry for\nsoftware producers. As a consequence, an increasing number of\nindependent app developers offer their products, and recent platforms\nsuch as the MIT App Inventor and Microsoft's TouchDevelop enable even\nlay programmers to develop apps and distribute them in app markets.\n\nA major challenge in this distribution model is to ensure the quality of\napps. Besides the usual sources of software errors, mobile apps are\nsusceptible to errors caused by the non-determinism of an event-based\nexecution model, a volatile environment, diverse hardware, and others.\nMany of these errors are difficult to detect during testing,\nespecially for independent app developers, who are not supported\nby test teams and elaborate test infrastructures. \n\nTo address this problem, we propose a static program analysis that\ncaptures the specifics of mobile apps and is efficient enough to\nprovide feedback during the development process. We present our\nanalysis for TouchDevelop, but most aspects apply also to other\nplatforms. Experiments involving 51,456 published TouchDevelop \nscripts show that our analysis analyzes 98% of the \nscripts in under a minute, and five seconds on average. \nManual inspection of the analysis results for a selection of all \nscripts shows that most of the alarms are real errors.",
      "Award": ""
    },
    {
      "Title": "Efficient Subcubic Alias Analysis for C",
      "Key": "60b522bf-ff1c-40da-8de8-3fb832ea9c2b",
      "Type": "",
      "PersonsString": "Qirun Zhang, Xiao Xiao, Charles Zhang, Hao Yuan, Zhendong Su",
      "AffiliationsString": "The Hong Kong University of Science and Technology, The Hong Kong University of Science and Technology, Hong Kong University of Science and Technology, BOPU Technologies, University of California, Davis",
      "Authors": [
        "Qirun Zhang @ The Hong Kong University of Science and Technology",
        "Xiao Xiao @ The Hong Kong University of Science and Technology",
        "Charles Zhang @ Hong Kong University of Science and Technology",
        "Hao Yuan @ BOPU Technologies",
        "Zhendong Su @ University of California, Davis"
      ],
      "Affiliations": [
        "The Hong Kong University of Science and Technology",
        "The Hong Kong University of Science and Technology",
        "Hong Kong University of Science and Technology",
        "BOPU Technologies",
        "University of California, Davis"
      ],
      "Abstract": "Inclusion-based alias analysis for C can be formulated as a context-free language (CFL) reachability problem. It is well known that the traditional cubic CFL-reachability algorithm does not scale well in practice. We present a highly scalable and efficient CFL-reachability-based alias analysis for C. The key novelty of our algorithm is to propagate reachability information along only original graph edges and bypass a large portion of summary edges, while the traditional CFL-reachability algorithm propagates along all summary edges. We also utilize the Four Russians' Trick - a key enabling technique in the subcubic CFL-reachability algorithm - in our alias analysis. We have implemented our subcubic alias analysis and conducted extensive experiments on  widely-used C programs from the pointer analysis literature. The results demonstrate that our alias analysis scales extremely well in practice. In particular, it can analyze the recent Linux kernel (which consists of 10M SLOC) in about 30 seconds.",
      "Award": ""
    },
    {
      "Title": "Alembic: Automatic Locality Extraction via Migration",
      "Key": "36d9a7ea-5f28-4748-bc97-1a29ee3f09a5",
      "Type": "",
      "PersonsString": "Brandon Holt, Preston Briggs, Luis Ceze, Mark Oskin",
      "AffiliationsString": "University of Washington, University of Washington, University of Washington, University of Washington",
      "Authors": [
        "Brandon Holt @ University of Washington",
        "Preston Briggs @ University of Washington",
        "Luis Ceze @ University of Washington",
        "Mark Oskin @ University of Washington"
      ],
      "Affiliations": [
        "University of Washington",
        "University of Washington",
        "University of Washington",
        "University of Washington"
      ],
      "Abstract": "Partitioned Global Address Space (PGAS) environments simplify writing parallel code for clusters because they make data movement implicit \u2014 dereferencing global pointers automatically moves data around. However, it does not free the programmer from needing to reason about locality \u2014 poor placement of data can lead to excessive and even unnecessary communication. For this reason, modern PGAS languages such as X10, Chapel, and UPC allow programmers to express data layout constraints and explicitly move computation. This places an extra burden on the programmer, and is less effective for applications with limited or data-dependent locality (e.g., graph analytics).\n\nThis paper proposes Alembic, a new static analysis that frees programmers from having to manually move computation to exploit locality in PGAS programs. It works by determining regions of code that access the same cluster node, then transforming the code to automatically migrate parts of the execution by passing around continuations to increase the proportion of accesses to local data. We implement the analysis and transformation for C++ in LLVM and show that in irregular application kernels, Alembic can achieve 82% of the hand-tuned performance (for comparison, na\u00efve compiler-generated communication achieves only 13%).",
      "Award": ""
    },
    {
      "Title": "Translating Imperative Code to MapReduce",
      "Key": "73cc54b6-0688-445d-b831-bf46496000d8",
      "Type": "",
      "PersonsString": "Cosmin Radoi, Stephen J Fink, Rodric Rabbah, Manu Sridharan",
      "AffiliationsString": "University of Illinois, IBM, IBM T.J. Watson Research Center, Samsung Research America",
      "Authors": [
        "Cosmin Radoi @ University of Illinois",
        "Stephen J Fink @ IBM",
        "Rodric Rabbah @ IBM T.J. Watson Research Center",
        "Manu Sridharan @ Samsung Research America"
      ],
      "Affiliations": [
        "University of Illinois",
        "IBM",
        "IBM T.J. Watson Research Center",
        "Samsung Research America"
      ],
      "Abstract": "We present an approach for automatic translation of sequential, imperative code\ninto a parallel MapReduce framework.\nAutomating such a translation is challenging: imperative updates must be\ntranslated into a functional MapReduce form in a manner that both preserves\nsemantics and enables parallelism.  Our approach works by first translating the\ninput code into a functional representation, with loops succinctly represented\nby fold operations.  Then, guided by rewrite rules, our system searches a space \nof equivalent programs for an effective MapReduce implementation.  The rules \ninclude a novel technique for handling irregular loop-carried dependencies using \ngroup-by operations to enable greater parallelism.\n\nWe have implemented our technique in a tool called Mold. It translates sequential \nJava code into code targeting the Apache Spark runtime.  We evaluated Mold on \nseveral real-world kernels and found that in most cases Mold generated the desired \nMapReduce program, even for codes with complex indirect updates.",
      "Award": ""
    },
    {
      "Title": "Cybertron: Pushing the Limit on I\/O Reduction in Data-Parallel Programs",
      "Key": "a58e713a-16ea-46a5-b4ea-2473a60c25a4",
      "Type": "",
      "PersonsString": "Tian Xiao, Zhenyu Guo, Hucheng Zhou, Jiaxing Zhang, Xu Zhao, Chencheng Ye, Xi Wang, Wei Lin, Wenguang Chen, Lidong Zhou",
      "AffiliationsString": "Tsinghua University \/ Microsoft Research, Microsoft Research, Microsoft Research, Microsoft Research, University of Toronto, Huazhong University of Science and Technology, MIT CSAIL, Microsoft Bing, Tsinghua University, Microsoft Research",
      "Authors": [
        "Tian Xiao @ Tsinghua University \/ Microsoft Research",
        "Zhenyu Guo @ Microsoft Research",
        "Hucheng Zhou @ Microsoft Research",
        "Jiaxing Zhang @ Microsoft Research",
        "Xu Zhao @ University of Toronto",
        "Chencheng Ye @ Huazhong University of Science and Technology",
        "Xi Wang @ MIT CSAIL",
        "Wei Lin @ Microsoft Bing",
        "Wenguang Chen @ Tsinghua University",
        "Lidong Zhou @ Microsoft Research"
      ],
      "Affiliations": [
        "Tsinghua University \/ Microsoft Research",
        "Microsoft Research",
        "Microsoft Research",
        "Microsoft Research",
        "University of Toronto",
        "Huazhong University of Science and Technology",
        "MIT CSAIL",
        "Microsoft Bing",
        "Tsinghua University",
        "Microsoft Research"
      ],
      "Abstract": "I\/O reduction has been a major focus in optimizing data-parallel programs for big-data processing. While the current state-of-the-art techniques use static program analysis to reduce I\/O, Cybertron proposes a new direction that incorporates runtime mechanisms to push the limit further on I\/O reduction. In particular, Cybertron tracks how data is used in the computation accurately at runtime to filter unused data at finer granularity dynamically, beyond what current static-analysis based mechanisms are capable of, and to facilitate a new mechanism called constraint based encoding for more efficient encoding. Cybertron has been implemented and applied to production data-parallel programs; our extensive evaluations on real programs and real data have shown its effectiveness on I\/O reduction over the existing mechanisms at reasonable CPU cost, and its improvement on end-to-end performance in various network environments.",
      "Award": ""
    },
    {
      "Title": "ASPIRE: Exploiting Asynchronous Parallelism in Iterative Algorithms using a Relaxed Consistency based DSM",
      "Key": "b554e983-c892-4ca9-b23f-1d61c52f216e",
      "Type": "",
      "PersonsString": "Keval Vora, Sai Charan Koduru, Rajiv Gupta",
      "AffiliationsString": "University of California, Riverside, University of California, Riverside, UC Riverside",
      "Authors": [
        "Keval Vora @ University of California, Riverside",
        "Sai Charan Koduru @ University of California, Riverside",
        "Rajiv Gupta @ UC Riverside"
      ],
      "Affiliations": [
        "University of California, Riverside",
        "University of California, Riverside",
        "UC Riverside"
      ],
      "Abstract": "Many vertex-centric graph algorithms can be expressed via asynchronous parallelism by relaxing certain read-after-write data dependences and thus allowing threads to compute vertex values using stale (i.e., not the most recent) values of their neighboring vertices. We observe that on distributed shared memory systems, by converting synchronous algorithms into their asynchronous counterparts, algorithms can be made tolerant to high inter-node communication latency. However, high inter-node communication latency can lead to excessive use of stale values causing an increase in the number of iterations required by the algorithm to converge. In this paper we design a relaxed memory consistency model and consistency protocol that simultaneously tolerate communication latency and minimize the use of stale values. We demonstrate that for a range of asynchronous graph algorithms, on an average, our approach outperforms algorithms based upon: prior relaxed memory models that allow stale values by at least 2.27x; and Bulk Synchronous Parallel (BSP) model by 4.2x. We also show that our approach performs well in comparison to GraphLab, a popular distributed graph processing framework.",
      "Award": ""
    },
    {
      "Title": "Using Web Corpus Statistics for Program Analysis",
      "Key": "0c6af2e2-7eb1-4811-bb3f-aadadc43e461",
      "Type": "",
      "PersonsString": "Chun-Hung Hsiao, Michael Cafarella, Satish Narayanasamy",
      "AffiliationsString": "University of Michigan, University of Michigan, University of Michigan",
      "Authors": [
        "Chun-Hung Hsiao @ University of Michigan",
        "Michael Cafarella @ University of Michigan",
        "Satish Narayanasamy @ University of Michigan"
      ],
      "Affiliations": [
        "University of Michigan",
        "University of Michigan",
        "University of Michigan"
      ],
      "Abstract": "Several program analysis tools---such as plagiarism detection and bug finding---rely on knowing a piece of code\u2019s relative semantic importance. For example, a plagiarism detector should not bother reporting two programs that have an identical simple loop counter test, but should report programs that share more distinctive code. Traditional program analysis techniques (e.g., finding data and control dependencies) are useful, but do not say how surprising or common a line of code is. Natural language processing researchers have encountered a similar problem and addressed it using an n-gram model of text frequency, derived from statistics computed over text corpora.\n\nWe propose and compute an n-gram model for programming languages, computed over a corpus of 2.8 million JavaScript programs we downloaded from the Web. In contrast to previous techniques, we describe a code n-gram as a subgraph of the program dependence graph that contains all nodes and edges reachable in n steps from the statement. We can count n-grams in a program and count the frequency of n-grams in the corpus, enabling us to compute tf-idf-style measures that capture the differing importance of different lines of code. We demonstrate the power of this approach by implementing a plagiarism detector with accuracy that beats previous techniques, and a bug-finding tool that discovered over a dozen previously unknown bugs in a collection of real deployed programs.",
      "Award": ""
    },
    {
      "Title": "EventBreak: Analyzing the Responsiveness of User Interfaces through Performance-Guided Test Generation",
      "Key": "6526c692-6486-48a9-8de1-05550b852582",
      "Type": "",
      "PersonsString": "Michael Pradel, Parker Schuh, George Necula, Koushik Sen",
      "AffiliationsString": "University of California, Berkeley, USA, University of California, Berkeley, University of California, Berkeley, University of California, Berkeley",
      "Authors": [
        "Michael Pradel @ University of California, Berkeley, USA",
        "Parker Schuh @ University of California, Berkeley",
        "George Necula @ University of California, Berkeley",
        "Koushik Sen @ University of California, Berkeley"
      ],
      "Affiliations": [
        "University of California, Berkeley, USA",
        "University of California, Berkeley",
        "University of California, Berkeley",
        "University of California, Berkeley"
      ],
      "Abstract": "Event-driven applications typically have a single thread of execution that processes event handlers in response to input events triggered by the user, the network, or other applications. Programmers must ensure that event handlers terminate after a short amount of time because otherwise, the application may become unresponsive. This paper presents EventBreak, a performance-guided test generation technique to identify and analyze event handlers whose execution time may gradually increase while using the application. The key idea is to systematically search for pairs of events where triggering one event increases the execution time of the other event. For example, this situation may happen because one event accumulates data that is processed by the other event. We implement the approach for JavaScript-based web applications and apply it to three real-world applications. EventBreak discovers events with an execution time that gradually increases in an unbounded way, which makes the application unresponsive, and events that, if triggered repeatedly, reveal a severe scalability problem, which makes the application unusable. The approach reveals two known bugs and four previously unknown responsiveness problems. Furthermore, we show that EventBreak helps in testing that event handlers avoid such problems by bounding a handler's execution time.",
      "Award": ""
    },
    {
      "Title": "Checking Correctness of TypeScript Interfaces for JavaScript Libraries",
      "Key": "8043f0b2-51f1-4ce0-b65f-b224381c84e9",
      "Type": "",
      "PersonsString": "Asger Feldthaus, Anders M\u00f8ller",
      "AffiliationsString": "Aarhus University, Aarhus University",
      "Authors": [
        "Asger Feldthaus @ Aarhus University",
        "Anders M\u00f8ller @ Aarhus University"
      ],
      "Affiliations": [
        "Aarhus University",
        "Aarhus University"
      ],
      "Abstract": "The TypeScript programming language adds optional types to JavaScript, with support for interaction with existing JavaScript libraries via interface declarations. Such declarations have been written for hundreds of libraries, but they can be difficult to write and often contain errors, which may affect the type checking and misguide code completion for the application code in IDEs.\n\nWe present a pragmatic approach to check correctness of TypeScript declaration files with respect to JavaScript library implementations. The key idea in our algorithm is that many declaration errors can be detected by an analysis of the library initialization state combined with a light-weight static analysis of library function code.\n\nOur experimental results demonstrate the effectiveness of the approach: it has found 142 errors in the declaration files of 10 libraries, with an analysis time of a few minutes per library and with a low number of false positives.\nOur analysis of how programmers use library interface declarations furthermore reveals some practical limitations of the TypeScript type system.",
      "Award": ""
    },
    {
      "Title": "Determinacy in Static Analysis for jQuery",
      "Key": "a9de3377-fadf-4f92-af75-a1e1dc9948e8",
      "Type": "",
      "PersonsString": "Esben Andreasen, Anders M\u00f8ller",
      "AffiliationsString": "Aarhus University, Aarhus University",
      "Authors": [
        "Esben Andreasen @ Aarhus University",
        "Anders M\u00f8ller @ Aarhus University"
      ],
      "Affiliations": [
        "Aarhus University",
        "Aarhus University"
      ],
      "Abstract": "Static analysis for JavaScript can potentially help programmers find errors early during development. Although much progress has been made on analysis techniques, a major obstacle is the prevalence of libraries, in particular jQuery, which apply programming patterns that have detrimental consequences on the analysis precision and performance. \n\nPrevious work on dynamic determinacy analysis has demonstrated how information about program expressions that always resolve to a fixed value in some call context may lead to significant scalability improvements of static analysis for such code. We present a static dataflow analysis for JavaScript that infers and exploits determinacy information on-the-fly, to enable analysis of some of the most complex parts of jQuery. The analysis combines selective context and path sensitivity, constant propagation, and branch pruning, based on a systematic investigation of the main causes of analysis imprecision when using a more basic analysis. \n\nThe techniques are implemented in the TAJS analysis tool and evaluated on a collection of small programs that use jQuery. Our results show that the proposed analysis techniques boost both precision and performance, specifically for inferring type information and call graphs.",
      "Award": ""
    },
    {
      "Title": "Understanding Energy Behaviors of Thread Management Constructs",
      "Key": "0ae3bc67-c4ef-4b98-801f-c49c672c4fef",
      "Type": "",
      "PersonsString": "Gustavo Pinto, Fernando Castor, Yu David Liu",
      "AffiliationsString": "Federal University of Pernambuco, UFPE, State University of New York (SUNY) Binghamton",
      "Authors": [
        "Gustavo Pinto @ Federal University of Pernambuco",
        "Fernando Castor @ UFPE",
        "Yu David Liu @ State University of New York (SUNY) Binghamton"
      ],
      "Affiliations": [
        "Federal University of Pernambuco",
        "UFPE",
        "State University of New York (SUNY) Binghamton"
      ],
      "Abstract": "Java programmers are faced with numerous choices in managing concurrent execution on multicore platforms. These choices often have different trade-offs (e.g., performance, scalability, and correctness guarantees). This paper analyzes an additional dimension, energy consumption. It presents an empirical study aiming to illuminate the relationship between the choices and settings of thread management constructs and energy consumption. We consider three important thread management constructs in concurrent programming: explicit thread creation, fixed-size thread pooling, and work stealing. We further shed light on the energy\/performance trade-off of three \"tuning knobs\" of these constructs: the number of threads, the task division strategy, and the characteristics of processed data. Through an extensive experimental space exploration over real-world Java programs, we produce a list of findings about the energy behaviors of concurrent programs, which are not always obvious. The study serves as a first step toward improving energy efficiency of concurrent programs on parallel architectures.",
      "Award": ""
    },
    {
      "Title": "Chisel: Reliability-Aware Optimization of Approximate Computational Kernels",
      "Key": "6becb54c-851f-48af-9dcf-a54eddb8f571",
      "Type": "",
      "PersonsString": "Sasa Misailovic, Michael Carbin, Sara Achour, Zichao Qi, Martin Rinard",
      "AffiliationsString": "MIT, MIT, MIT, MIT, MIT",
      "Authors": [
        "Sasa Misailovic @ MIT",
        "Michael Carbin @ MIT",
        "Sara Achour @ MIT",
        "Zichao Qi @ MIT",
        "Martin Rinard @ MIT"
      ],
      "Affiliations": [
        "MIT",
        "MIT",
        "MIT",
        "MIT",
        "MIT"
      ],
      "Abstract": "Emerging approximate hardware platforms provide operations that, in return for reduced energy consumption, may occasionally produce an incorrect result. We present and evaluate Chisel, a system for reliability-aware optimization of approximate computational kernels that run on such approximate hardware platforms. Given a reliability specification, which identifies a lower bound on the reliability of the result that the kernel computation produces, Chisel automatically determines which kernel operations may execute unreliably and which must execute reliably for the kernel to satisfy its reliability specification.\n\nWe evaluate Chisel on five applications from the image processing, scientific computing, and financial analysis domains. The experimental results show that our implemented optimization algorithm enables Chisel to successfully optimize our set of benchmark kernels to obtain energy savings from 8.7% to 19.8% compared to the fully reliable kernel implementations while preserving important reliability guarantees.",
      "Award": ""
    },
    {
      "Title": "An Experimental Survey of Energy Management Across the Stack",
      "Key": "7c472f9f-601e-41ad-85f4-2af85e52d0c8",
      "Type": "",
      "PersonsString": "Melanie Kambadur, Martha A. Kim",
      "AffiliationsString": "Columbia University, Columbia University",
      "Authors": [
        "Melanie Kambadur @ Columbia University",
        "Martha A. Kim @ Columbia University"
      ],
      "Affiliations": [
        "Columbia University",
        "Columbia University"
      ],
      "Abstract": "Modern demand for energy-efficient computation has spurred research at all levels of the stack, from devices to microarchitecture, operating systems, compilers, and languages. Unfortunately, this breadth has resulted in a disjointed space, with technologies at different levels of the system stack rarely compared, let alone coordinated.\n\nThis work begins to remedy the problem, conducting an experimental survey of the present state of energy management across the stack. Focusing on settings that are exposed to software, we measure the total energy, average power, and execution time of 41 benchmark applications in 220 configurations, across a total of 200,000 program executions.\n\nSome of the more important findings of the survey include that effective parallelization and compiler optimizations have the potential to save far more energy than Linux\u2019s frequency tuning algorithms; that certain non-complementary energy strategies can undercut each other\u2019s savings by half when combined; and that while the power impacts of most strategies remain constant across applications, the runtime impacts vary, resulting in inconsistent energy impacts.",
      "Award": ""
    },
    {
      "Title": "Continuously Measuring Critical Section Pressure with the Free-Lunch Profiler",
      "Key": "ff16d90c-0018-4ed3-8c22-ba9489589a2d",
      "Type": "",
      "PersonsString": "Florian David, Ga\u00ebl Thomas, Julia  Lawall, Gilles Muller",
      "AffiliationsString": "LIP6-UPMC\/INRIA, LIP6-UPMC\/INRIA, LIP6, LIP6-INRIA\/UPMC",
      "Authors": [
        "Florian David @ LIP6-UPMC\/INRIA",
        "Ga\u00ebl Thomas @ LIP6-UPMC\/INRIA",
        "Julia  Lawall @ LIP6",
        "Gilles Muller @ LIP6-INRIA\/UPMC"
      ],
      "Affiliations": [
        "LIP6-UPMC\/INRIA",
        "LIP6-UPMC\/INRIA",
        "LIP6",
        "LIP6-INRIA\/UPMC"
      ],
      "Abstract": "Today, Java is regularly used to implement large multi-threaded server-class applications that use locks to protect access to shared data. However, understanding the impact of locks on the performance of a system is complex, and thus the use of locks can impede the progress of threads on configurations that were not anticipated by the developer, during specific phases of the execution. In this paper, we propose Free Lunch, a new lock profiler for Java application servers, specifically designed to identify, in-vivo, phases where the progress of the threads is impeded by a lock. Free Lunch is designed around a new metric, critical section pressure (CSP), which directly correlates the progress of the threads to each of the locks. Using Free Lunch, we have identified phases of high CSP, which were hidden with other lock profilers, in the distributed Cassandra NoSQL database and in several applications from the DaCapo 9.12, the SPECjvm2008 and the SPECjbb2005 benchmark suites. Our evaluation of Free Lunch shows that its overhead is never greater than 6%, making it suitable for in-vivo use.",
      "Award": ""
    },
    {
      "Title": "Automated Migration of Build Scripts using Dynamic Analysis and Search-Based Refactoring",
      "Key": "004d5905-a47a-43aa-b4f1-f03b67e27c12",
      "Type": "",
      "PersonsString": "Milos Gligoric, Wolfram Schulte, Chandra Prasad, Danny van Velzen, Iman Narasamdya, Benjamin Livshits",
      "AffiliationsString": "University of Illinois at Urbana-Champaign, Microsoft, Microsoft, Microsoft, Microsoft, Microsoft Research",
      "Authors": [
        "Milos Gligoric @ University of Illinois at Urbana-Champaign",
        "Wolfram Schulte @ Microsoft",
        "Chandra Prasad @ Microsoft",
        "Danny van Velzen @ Microsoft",
        "Iman Narasamdya @ Microsoft",
        "Benjamin Livshits @ Microsoft Research"
      ],
      "Affiliations": [
        "University of Illinois at Urbana-Champaign",
        "Microsoft",
        "Microsoft",
        "Microsoft",
        "Microsoft",
        "Microsoft Research"
      ],
      "Abstract": "The efficiency of a build system is an important enabler\nof the productivity of software developers. As a result,\ndeveloper teams have been adopting build systems that\nallow them to maximize build parallelization. However,\nmigrating the existing legacy build scripts to new build\nsystems is tedious and error-prone. Yet, there has been\nno prior work that automate migration of build scripts.\n\nThis paper proposes the first approach for migrating\nlegacy build scripts to new build systems. Our approach\nworks in two phases. In the first phase, from a set of\nbuild execution traces, we synthesize build scripts that\naccurately capture the intent of the original build.\nHowever, the synthesized build scripts are typically long and\nhard to maintain. In the second phase, we apply refactorings\nthat raise the level of abstraction of the synthesized\nscripts (e.g., extracting common code). As the\napplication order of refactorings may lead to different\nbuild scripts, we use a search-based approach that explores\nvarious refactoring sequences to identify the best\n(e.g., shortest) build script. We optimize search-based\nrefactoring with state matching and partial-order reduction\nto explore more sequences in the same amount of\ntime. We implemented the proposed two-phase migration\napproach in a tool, called Metamorphosis, which\nhas recently been used within Microsoft.",
      "Award": ""
    },
    {
      "Title": "Adaptive LL(*) Parsing: The Power of Dynamic Analysis",
      "Key": "47ca1d6a-bdf4-4d09-8976-3dc1787f9f56",
      "Type": "",
      "PersonsString": "Terence Parr, Sam Harwell, Kathleen Fisher",
      "AffiliationsString": "University of San Francisco, University of Texas at Austin, Tufts University",
      "Authors": [
        "Terence Parr @ University of San Francisco",
        "Sam Harwell @ University of Texas at Austin",
        "Kathleen Fisher @ Tufts University"
      ],
      "Affiliations": [
        "University of San Francisco",
        "University of Texas at Austin",
        "Tufts University"
      ],
      "Abstract": "Despite the advances made by modern parsing strategies such as PEG, LL(*), GLR, and GLL, parsing is not a solved problem. Existing approaches suffer from a number of weaknesses, including difficulties supporting side-effecting embedded actions, slow and\/or unpredictable performance, and counterintuitive matching strategies. This paper introduces the ALL(*) parsing strategy that combines the simplicity, efficiency, and predictability of conventional top-down LL(k) parsers with the power of a GLR-like mechanism to make parsing decisions. The critical innovation is to move grammar analysis to parse-time, which lets ALL(*) handle any non-left-recursive context-free grammar. ALL(*) is O(n^4) in theory but consistently performs linearly on grammars used in practice, outperforming general strategies such as GLL and GLR by orders of magnitude. ANTLR 4 generates ALL(*) parsers and supports direct left-recursion through grammar rewriting. Widespread ANTLR 4 use (5000 downloads\/month in 2013) provides evidence that ALL(*) is effective for a wide variety of applications.",
      "Award": ""
    },
    {
      "Title": "Staged Parser Combinators for Efficient Data Processing",
      "Key": "6e7e137d-6768-4da1-baa7-dca5ac63f0b0",
      "Type": "",
      "PersonsString": "Manohar Jonnalagedda, Thierry Coppey, Sandro Stucki, Tiark Rompf, Martin Odersky",
      "AffiliationsString": "EPFL, Switzerland, EPFL, Switzerland; Google, EPFL, Switzerland, Purdue & Oracle Labs, Ecole Polytechnique Federale de Lausanne",
      "Authors": [
        "Manohar Jonnalagedda @ EPFL, Switzerland",
        "Thierry Coppey @ EPFL, Switzerland; Google",
        "Sandro Stucki @ EPFL, Switzerland",
        "Tiark Rompf @ Purdue & Oracle Labs",
        "Martin Odersky @ Ecole Polytechnique Federale de Lausanne"
      ],
      "Affiliations": [
        "EPFL, Switzerland",
        "EPFL, Switzerland; Google",
        "EPFL, Switzerland",
        "Purdue & Oracle Labs",
        "Ecole Polytechnique Federale de Lausanne"
      ],
      "Abstract": "Parsers are ubiquitous in computing: many applications de-\npend on fast decoding of data. Parser combinators are an in-\ntuitive tool for writing parsers: tight integration with the host\nlanguage enables grammar specifications to be interleaved\nwith processing of parse results. Unfortunately, parser com-\nbinators are slow due to the high overhead on the abstraction\nmechanisms that enable composition.\nWe present a technique for eliminating such overhead. We\nuse staging, a form of runtime code generation, to dissoci-\nate input parsing from parser composition, and eliminate in-\ntermediate data structures and computations associated with\nparser composition at staging time. A key challenge is to\nmaintain support for input dependent grammars, which have\nno clear stage distinction.\nOur approach applies to top-down recursive-descent\nparsers as well as bottom-up nondeterministic parsers with\nkey applications in dynamic programming on sequences,\nwhere we auto-generate code for parallel hardware. We\nachieve performance comparable to specialized, hand-written\nparsers.",
      "Award": ""
    },
    {
      "Title": "Mix10: Compiling MATLAB to X10 for High Performance",
      "Key": "fb751d09-b4d6-4305-83ca-4a49e8261fcb",
      "Type": "",
      "PersonsString": "Vineet Kumar, Laurie Hendren",
      "AffiliationsString": "undefined, McGill University",
      "Authors": [
        "Vineet Kumar @ undefined",
        "Laurie Hendren @ McGill University"
      ],
      "Affiliations": [
        "undefined",
        "McGill University"
      ],
      "Abstract": "MATLAB is a popular dynamic array-based language commonly used by students, scientists and engineers who appreciate the interactive development style, the rich set of array operators, the extensive builtin library, and the fact that they do not have to declare static types. Even though these users like to program in MATLAB, their computations are often very compute-intensive and are better suited for emerging high performance computing systems. This paper reports on MIX10, a source-to-source compiler that automatically translates MATLAB programs to X10, a language designed for \"Performance and Productivity at Scale\"; thus, helping scientific programmers make better use of high performance computing systems.\n\nThere is a large semantic gap between the array-based dynamically-typed nature of MATLAB and the object-oriented, statically-typed, and high-level array abstractions of X10. This paper addresses the major challenges that must be overcome to produce sequential X10 code that is competitive with state-of-the-art static compilers for MATLAB which target more conventional imperative languages such as C and Fortran. Given that efficient basis, the paper then provides a translation for the MATLAB parfor construct that leverages the powerful concurrency constructs in X10.\n\nThe MIX10 compiler has been implemented using the McLab compiler tools, is open source, and is available both for compiler researchers and end-user MATLAB programmers. We have used the implementation to perform many empirical measurements on a set of 17 MATLAB benchmarks. We show that our best MIX10- generated code is significantly faster than the de facto Mathworks\u2019 MATLAB system, and that our results are competitive with state-of-the-art static compilers that target C and Fortran. We also show the importance of finding the correct approach to representing the arrays in the generated X10 code, and the necessity of an 'IntegerOkay' analysis that determines which double variables can be safely represented as integers. Finally, we show that our X10-based handling of the MATLAB parfor greatly outperforms the de facto MATLAB implementation.",
      "Award": ""
    },
    {
      "Title": "Call Sequence Prediction through Probabilistic Calling Automata",
      "Key": "4779e334-dc6e-4180-b509-d608d2c2adec",
      "Type": "",
      "PersonsString": "Zhijia Zhao, Bo Wu, Mingzhou Zhou, Yufei Ding, Jianhua Sun, Xipeng Shen, Youfeng Wu",
      "AffiliationsString": "College of William and Mary, College of William and Mary, College of William and Mary, College of William and Mary, College of William and Mary, North Carolina State University, Intel Corporation",
      "Authors": [
        "Zhijia Zhao @ College of William and Mary",
        "Bo Wu @ College of William and Mary",
        "Mingzhou Zhou @ College of William and Mary",
        "Yufei Ding @ College of William and Mary",
        "Jianhua Sun @ College of William and Mary",
        "Xipeng Shen @ North Carolina State University",
        "Youfeng Wu @ Intel Corporation"
      ],
      "Affiliations": [
        "College of William and Mary",
        "College of William and Mary",
        "College of William and Mary",
        "College of William and Mary",
        "College of William and Mary",
        "North Carolina State University",
        "Intel Corporation"
      ],
      "Abstract": "Predicting a sequence of upcoming function calls is important for optimizing programs written in modern managed languages (e.g., Java, Javascript, C#.) Existing function call predictions are mainly built on statistical patterns, suitable for predicting a single call but not a sequence of calls.  This paper presents a new way to enable call sequence prediction, which exploits program structures through Probabilistic Calling Automata (PCA), a new program representation that captures both the inherent ensuing relations among function calls, and the probabilistic nature of execution paths.  It shows that PCA-based prediction outperforms existing predictions, yielding substantial speedup when being applied to guide Just-In-Time compilation. By enabling accurate, efficient call sequence prediction for the first time, PCA-based predictors open up many new opportunities for dynamic program optimizations.",
      "Award": ""
    },
    {
      "Title": "Space-Efficient Multi-Versioning for Input-Adaptive Feedback-Driven Program Optimizations",
      "Key": "6f68905b-84ae-4785-ad99-f3fb891465b1",
      "Type": "",
      "PersonsString": "Mingzhou Zhou, Xipeng Shen, Yaoqing Gao, Graham Yiu",
      "AffiliationsString": "College of William and Mary, North Carolina State University, IBM Toronto Labs, IBM Toronto Labs",
      "Authors": [
        "Mingzhou Zhou @ College of William and Mary",
        "Xipeng Shen @ North Carolina State University",
        "Yaoqing Gao @ IBM Toronto Labs",
        "Graham Yiu @ IBM Toronto Labs"
      ],
      "Affiliations": [
        "College of William and Mary",
        "North Carolina State University",
        "IBM Toronto Labs",
        "IBM Toronto Labs"
      ],
      "Abstract": "Function versioning is an approach to addressing input-sensitivity of\nprogram optimizations. A major side effect of it is notable code size\nincrease, which has been hindering its broad applications to large\ncode bases and space-stringent environments. In this paper, we\ninitiate a systematic exploration into the problem, providing answers\nto some fundamental questions: Given a space constraint, to which\nfunction we should apply versioning? How many versions of a function\nshould we include in the final executable? Is the optimal selection\nfeasible to do in polynomial time?  This study proves selecting the\nbest set of versions under a space constraint is NP-complete and\nproposes a heuristic algorithm named CHoGS which yields near optimal\nresults in quadratic time. We implement the algorithm and conduct\nexperiments through the IBM XL compilers. We observe significant\nperformance enhancement with only slight code size increase; the\nresults from CHoGS show factors of higher space efficiency than those\nfrom traditional hotness-based methods.",
      "Award": ""
    },
    {
      "Title": "The HipHop Virtual Machine",
      "Key": "cc917f76-f43e-4fb7-a9eb-bfa82cbe6305",
      "Type": "",
      "PersonsString": "Keith Adams, Jason Evans, Bertrand Maher, Guilherme Ottoni, Drew Paroski, Brett Simmers, Edwin Smith, Owen Yamauchi",
      "AffiliationsString": "Facebook, Facebook, Facebook, Facebook, Facebook, Facebook, Facebook, Facebook",
      "Authors": [
        "Keith Adams @ Facebook",
        "Jason Evans @ Facebook",
        "Bertrand Maher @ Facebook",
        "Guilherme Ottoni @ Facebook",
        "Drew Paroski @ Facebook",
        "Brett Simmers @ Facebook",
        "Edwin Smith @ Facebook",
        "Owen Yamauchi @ Facebook"
      ],
      "Affiliations": [
        "Facebook",
        "Facebook",
        "Facebook",
        "Facebook",
        "Facebook",
        "Facebook",
        "Facebook",
        "Facebook"
      ],
      "Abstract": "The HipHop Virtual Machine (HHVM) is a JIT compiler and runtime for PHP.\nWhile PHP values are dynamically typed, real programs often have \nlatent types that are useful for optimization once discovered. Some types\ncan be proven through static analysis, but limitations in the ahead-of-time\napproach leave some types to be discovered at run time. Although many values\nhave latent types, PHP programs can also contain polymorphic variables and\nexpressions, which must be handled without catastrophic slowdown.\n\nHHVM discovers latent types by structuring its JIT around the concept of a\ntracelet. A tracelet is approximately a basic block specialized for a\nparticular set of run time types for its input values. Tracelets allow HHVM to\nexactly and efficiently learn the types used by the program, while using a\nsimple compiler. We find HHVM provides high levels of performance, without\nsacrificing compatibility or interactivity.",
      "Award": ""
    },
    {
      "Title": "Accelerating Iterators in Optimizing AST Interpreters",
      "Key": "cfb6ace2-b655-42fd-a532-d14084bfaa1d",
      "Type": "",
      "PersonsString": "Wei Zhang, Per Larsen, Stefan Brunthaler, Michael Franz",
      "AffiliationsString": "University of California, Irvine, University of California, Irvine, University of California, Irvine, University of California, Irvine",
      "Authors": [
        "Wei Zhang @ University of California, Irvine",
        "Per Larsen @ University of California, Irvine",
        "Stefan Brunthaler @ University of California, Irvine",
        "Michael Franz @ University of California, Irvine"
      ],
      "Affiliations": [
        "University of California, Irvine",
        "University of California, Irvine",
        "University of California, Irvine",
        "University of California, Irvine"
      ],
      "Abstract": "Generators offer an elegant way to express iterators.\nHowever, their performance has always been their Achilles heel and has prevented widespread adoption.\nWe present techniques to efficiently implement and optimize generators.\n\nWe have implemented our optimizations in ZipPy, a modern, light-weight AST interpreter based Python 3 implementation targeting the Java virtual machine.\nOur implementation builds on a framework that optimizes AST interpreters using just-in-time compilation.\nIn such a system, it is crucial that AST optimizations do not prevent subsequent optimizations.\nOur system was carefully designed to avoid this problem.\nWe report an average speedup of 3.58X for generator-bound programs.\nAs a result, using generators no longer has downsides and programmers are free to enjoy their benefits.",
      "Award": ""
    },
    {
      "Title": "Compiler Verification Meets Cross-Language Linking via Data Abstraction",
      "Key": "14e516e0-27d6-4bb6-a306-3c0908ec1b94",
      "Type": "",
      "PersonsString": "Peng Wang, Santiago Cuellar, Adam Chlipala",
      "AffiliationsString": "MIT CSAIL, Princeton, MIT CSAIL",
      "Authors": [
        "Peng Wang @ MIT CSAIL",
        "Santiago Cuellar @ Princeton",
        "Adam Chlipala @ MIT CSAIL"
      ],
      "Affiliations": [
        "MIT CSAIL",
        "Princeton",
        "MIT CSAIL"
      ],
      "Abstract": "Many real programs are written in multiple different programming languages, and supporting this pattern creates challenges for formal compiler verification.  We describe our Coq verification of a compiler for a high-level language, such that the compiler correctness theorem allows us to derive partial-correctness Hoare-logic theorems for programs built by linking the assembly code output by our compiler and assembly code produced by other means.  Our compiler supports such tricky features as storable cross-language function pointers, without giving up the usual benefits of being able to verify different compiler phases (including, in our case, two classic optimizations) independently.  The key technical innovation is a mixed operational and axiomatic semantics for the source language, with a built-in notion of abstract data types, such that compiled code interfaces with other languages only through axiomatically specified methods that mutate encapsulated private data, represented in whatever formats are most natural for those languages.",
      "Award": ""
    },
    {
      "Title": "Bounded Exhaustive Test Input Generation from Hybrid Invariants",
      "Key": "1610dc8b-9c5f-4bed-8e57-701c40b1a850",
      "Type": "",
      "PersonsString": "Nicol\u00e1s Rosner, Valeria Bengolea, Pablo Ponzio, Shadi Abdul Khalek, Nazareno Aguirre, Marcelo F. Frias, Sarfraz Khurshid",
      "AffiliationsString": "Dept. of Computer Science FCEyN, University of Buenos Aires, Dept. of Computer Science FCEFQyN, University of Rio Cuarto, Dept. of Computer Science FCEFQyN, University of Rio Cuarto, Google, Dept. of Computer Science FCEFQyN, University of Rio Cuarto, Dept. of Software Engineering Instituto Tecnol\u00f3gico de Buenos Aires, University of Texas at Austin",
      "Authors": [
        "Nicol\u00e1s Rosner @ Dept. of Computer Science FCEyN, University of Buenos Aires",
        "Valeria Bengolea @ Dept. of Computer Science FCEFQyN, University of Rio Cuarto",
        "Pablo Ponzio @ Dept. of Computer Science FCEFQyN, University of Rio Cuarto",
        "Shadi Abdul Khalek @ Google",
        "Nazareno Aguirre @ Dept. of Computer Science FCEFQyN, University of Rio Cuarto",
        "Marcelo F. Frias @ Dept. of Software Engineering Instituto Tecnol\u00f3gico de Buenos Aires",
        "Sarfraz Khurshid @ University of Texas at Austin"
      ],
      "Affiliations": [
        "Dept. of Computer Science FCEyN, University of Buenos Aires",
        "Dept. of Computer Science FCEFQyN, University of Rio Cuarto",
        "Dept. of Computer Science FCEFQyN, University of Rio Cuarto",
        "Google",
        "Dept. of Computer Science FCEFQyN, University of Rio Cuarto",
        "Dept. of Software Engineering Instituto Tecnol\u00f3gico de Buenos Aires",
        "University of Texas at Austin"
      ],
      "Abstract": "We present a novel technique for producing bounded exhaustive test suites from hybrid invariants, i.e., invariants that are expressed imperatively, declaratively, or as a combination of declarative and imperative predicates. Hybrid specifications are processed using known mechanisms for the imperative and declarative parts, but combined in a way that enables us to exploit information from the declarative side, such as \\emph{tight bounds} computed from the declarative specification, to improve the search both on the imperative and declarative sides. Moreover, our technique automatically evaluates all different possible ways of processing the imperative side, and the alternative setting (imperative or declarative) for each part of the invariant available both declaratively and imperatively, in order to decide the most convenient invariant configuration with respect to efficiency in test generation. This is achieved by transcoping, i.e., by assessing the efficiency of the different alternatives on small scopes (where generation times are negligible) and then extrapolating the results to larger scopes.\n\nWe also show experiments involving collection classes that support the effectiveness of our technique, by demonstrating that \\emph{(i)} bounded exhaustive suites can be computed from hybrid invariants significantly more efficiently than doing so using state-of-the-art purely imperative and purely declarative approaches, and \\emph{(ii)} our technique is able to automatically determine efficient hybrid invariants, in the sense that they lead to an efficient computation of bounded exhaustive suites, using transcoping.",
      "Award": ""
    },
    {
      "Title": "Natural Proofs for Asynchronous Programs using Almost-Synchronous Invariants",
      "Key": "49faf9d9-bd2f-4166-8645-b8cbeec1d4b1",
      "Type": "",
      "PersonsString": "Ankush Desai, Pranav Garg, P. Madhusudan",
      "AffiliationsString": "University of California, Berkeley, University of Illinois at Urbana-Champaign, University of Illinois at Urbana-Champaign",
      "Authors": [
        "Ankush Desai @ University of California, Berkeley",
        "Pranav Garg @ University of Illinois at Urbana-Champaign",
        "P. Madhusudan @ University of Illinois at Urbana-Champaign"
      ],
      "Affiliations": [
        "University of California, Berkeley",
        "University of Illinois at Urbana-Champaign",
        "University of Illinois at Urbana-Champaign"
      ],
      "Abstract": "We consider the problem of provably verifying that an asynchronous message-passing\nsystem satisfies its local assertions. We present a novel reduction scheme\nfor asynchronous event-driven programs that finds almost-synchronous invariants --\ninvariants consisting of global states where message buffers are close to empty.\nThe reduction finds almost-synchronous invariants and simultaneously argues that\nthey cover all local states. We show that asynchronous programs often have\nalmost-synchronous invariants and that we can exploit this to build natural proofs\nthat they are correct. We implement our reduction strategy and show that it is\nmore effective in proving programs correct as well as more efficient in finding\nbugs in several programs, compared to current search strategies which almost always diverge.\nThe high point of our experiments show that our technique can prove the Windows Phone\nUSB Driver written in P correct for the receptiveness property,\nwhich was hitherto not provable using state-of-the-art model-checkers.",
      "Award": ""
    },
    {
      "Title": "GPS: Navigating Weak Memory with Ghosts, Protocols, and Separation",
      "Key": "fd1298f1-3f87-4bc7-a95d-5b5f99b53a85",
      "Type": "",
      "PersonsString": "Aaron Turon, Viktor Vafeiadis, Derek Dreyer",
      "AffiliationsString": "MPI-SWS, MPI-SWS, MPI-SWS",
      "Authors": [
        "Aaron Turon @ MPI-SWS",
        "Viktor Vafeiadis @ MPI-SWS",
        "Derek Dreyer @ MPI-SWS"
      ],
      "Affiliations": [
        "MPI-SWS",
        "MPI-SWS",
        "MPI-SWS"
      ],
      "Abstract": "Weak memory models formalize the inconsistent behaviors that one can\nexpect to observe in multithreaded programs running on modern\nhardware.  In so doing, however, they complicate the already-difficult\ntask of reasoning about correctness of concurrent code.  Worse, they\nrender impotent the sophisticated formal methods that have been\ndeveloped to tame concurrency, which almost universally assume a\nstrong (i.e. sequentially consistent) memory model.\n\nThis paper introduces GPS, the first program logic to provide a\nfull-fledged suite of modern verification techniques---including ghost\nstate, protocols, and separation logic---for high-level, structured\nreasoning about weak memory.  We demonstrate the effectiveness of GPS\nby applying it to challenging examples drawn from the Linux kernel as\nwell as lock-free data structures.  We also define the semantics of\nGPS and prove in Coq that it is sound with respect to the axiomatic\nC11 weak memory model.",
      "Award": ""
    },
    {
      "Title": "Atlas: Leveraging Locks for Non-volatile Memory Consistency",
      "Key": "4d83525e-7740-4652-adb1-dd1f6a018676",
      "Type": "",
      "PersonsString": "Dhruva Chakrabarti, Hans-J. Boehm, Kumud Bhandari",
      "AffiliationsString": "HP Labs, Google, Rice University",
      "Authors": [
        "Dhruva Chakrabarti @ HP Labs",
        "Hans-J. Boehm @ Google",
        "Kumud Bhandari @ Rice University"
      ],
      "Affiliations": [
        "HP Labs",
        "Google",
        "Rice University"
      ],
      "Abstract": "Non-volatile main memory, such as memristors or phase\nchange memory, can revolutionize the way programs persist\ndata. In-memory objects can themselves be persistent without\nthe need for a separate persistent data storage format.\nHowever, the challenge is to ensure that such data remains\nconsistent if a failure occurs during execution.\n\nIn this paper, we present our system, called Atlas, which\nadds durability semantics to lock-based code, typically allowing\nus to automatically maintain a globally consistent\nstate even in the presence of failures. We identify failure-atomic\nsections of code based on existing critical sections\nand describe a log-based implementation that can be used\nto recover a consistent state after a failure. We discuss several\nsubtle semantic issues and implementation tradeoffs. We\nconfirm the ability to rapidly flush caches as a core implementation\nbottleneck and suggest partial solutions. Experimental\nresults confirm the practicality of our approach and\nprovide insight into the overheads of such a system.",
      "Award": ""
    },
    {
      "Title": "Multithreaded Test Synthesis for Deadlock Detection",
      "Key": "59e62b5f-77a0-4beb-b776-a49cb032c0da",
      "Type": "",
      "PersonsString": "Malavika Samak, Murali Krishna Ramanathan",
      "AffiliationsString": "Indian Institute of Science, Bangalore, Indian Institute of Science, Bangalore",
      "Authors": [
        "Malavika Samak @ Indian Institute of Science, Bangalore",
        "Murali Krishna Ramanathan @ Indian Institute of Science, Bangalore"
      ],
      "Affiliations": [
        "Indian Institute of Science, Bangalore",
        "Indian Institute of Science, Bangalore"
      ],
      "Abstract": "Designing and implementing thread-safe multithreaded libraries can be a daunting task as developers of these libraries need to ensure that their implementations are free from concurrency bugs including deadlocks. The usual practice involves employing software testing and\/or dynamic analysis to detect deadlocks. Their effectiveness is dependent on well-designed multithreaded test cases. Unsurprisingly, developing multithreaded tests is easily an order of magnitude harder than developing single threaded tests for obvious reasons.\n\nIn this paper, we address the problem of automatically synthesizing multithreaded tests that can induce deadlocks. The key insight to our approach is that a subset of the properties observed when a deadlock manifests in a concurrent execution can also be observed in a single threaded execution. We design a novel, automatic, scalable and directed approach that identifies these properties and synthesizes a multithreaded test that realizes these properties simultaneously revealing a potential deadlock. The input to our approach is only the library implementation under consideration and the output is a set of deadlock revealing multithreaded tests.\n\nWe have implemented our approach as part of our tool, named OMEN, and applied it on many multithreaded Java libraries. OMEN synthesizes multithreaded tests for all these libraries that include classes that are documented as thread-safe in COLT (a popular high performance scientific computing library) where it enables detection of 35 real deadlocks. Moreover, our experimental results show that randomized approaches for detecting deadlocks are ineffective. We also conducted a user study and found that software testing\/dynamic analysis on multithreaded tests developed by the participants did not reveal any deadlocks either. Because the input to OMEN is the library implementation alone, it can be seamlessly integrated into the software development process.",
      "Award": ""
    },
    {
      "Title": "Symbolic Execution of Multithreaded Programs from Arbitrary Program Contexts",
      "Key": "72169736-6f5d-4ac0-8906-6f90ff86bd3e",
      "Type": "",
      "PersonsString": "Tom Bergan, Dan Grossman, Luis Ceze",
      "AffiliationsString": "University of Washington, University of Washington, University of Washington",
      "Authors": [
        "Tom Bergan @ University of Washington",
        "Dan Grossman @ University of Washington",
        "Luis Ceze @ University of Washington"
      ],
      "Affiliations": [
        "University of Washington",
        "University of Washington",
        "University of Washington"
      ],
      "Abstract": "We describe an algorithm to perform symbolic execution of a\n  multithreaded program starting from an arbitrary program context.\n  We argue that this can enable more efficient symbolic exploration of\n  deep code paths in multithreaded programs by allowing the symbolic\n  engine to jump directly to program contexts of interest.\n\n  The key challenge is modeling the initial context with reasonable\n  precision---an overly approximate model leads to exploration of many\n  infeasible paths during symbolic execution, while a very precise\n  model would be so expensive to compute that computing it would\n  defeat the purpose of jumping directly to the initial context in the\n  first place.  We propose a \\emph{context-specific dataflow analysis}\n  that approximates the initial context cheaply, but precisely enough\n  to avoid some common causes of infeasible-path explosion.  This\n  model is necessarily approximate---it may leave portions of the\n  memory state unconstrained, leaving our symbolic execution unable to\n  answer simple questions such as ``which thread holds lock A?''.  For\n  such cases, we describe a novel algorithm for evaluating\n  \\emph{symbolic synchronization} during symbolic execution.  Our\n  symbolic execution semantics are sound and complete up to the limits\n  of the underlying SMT solver.  We describe initial experiments on an\n  implementation in Cloud9.",
      "Award": ""
    },
    {
      "Title": "Fast Splittable Pseudorandom Number Generators",
      "Key": "bd7435e4-09c5-429e-ac39-e394257b2765",
      "Type": "",
      "PersonsString": "Guy L. Steele Jr., Doug Lea, Christine H. Flood",
      "AffiliationsString": "Oracle Labs, State University of New York (SUNY) Oswego, Red Hat",
      "Authors": [
        "Guy L. Steele Jr. @ Oracle Labs",
        "Doug Lea @ State University of New York (SUNY) Oswego",
        "Christine H. Flood @ Red Hat"
      ],
      "Affiliations": [
        "Oracle Labs",
        "State University of New York (SUNY) Oswego",
        "Red Hat"
      ],
      "Abstract": "We describe a new algorithm SPLITMIX for an object-oriented and splittable pseudorandom number generator (PRNG) that is quite fast: 9 64-bit arithmetic\/logical operations per 64 bits generated. A conventional linear PRNG object provides a generate method that returns one pseudorandom value and updates the state of the PRNG, but a splittable PRNG object also has a second operation, split, that replaces the original PRNG object with two (seemingly) independent PRNG objects, by creating and returning a new such object and updating the state of the original object. Splittable PRNG objects make it easy to organize the use of pseudorandom numbers in multithreaded programs structured using fork-join parallelism. No locking or synchronization is required (other than the usual memory fence immediately after object creation). Because the generate method has no loops or conditionals, it is suitable for SIMD or GPU implementation.\n\nWe derive SPLITMIX from the DOTMIX algorithm of Leiserson, Schardl, and Sukha by making a series of program transformations and engineering improvements. The end result is an object-oriented version of the purely functional API used in the Haskell library for over a decade, but SPLITMIX is faster and produces pseudorandom sequences of higher quality; it is also far superior in quality and speed to java.util.Random, and has been included in Java JDK8 as the class java.util.SplittableRandom. \n\nWe have tested the pseudorandom sequences produced by SPLITMIX using two standard statistical test suites (DieHarder and TestU01) and they appear to be adequate for \u201ceveryday\u201d use, such as in Monte Carlo algorithms and randomized data structures where speed is important.",
      "Award": ""
    },
    {
      "Title": "Fast Conservative Garbage Collection",
      "Key": "422f5c51-fe98-4546-bf2d-b4a55ac2c9c9",
      "Type": "",
      "PersonsString": "Rifat Shahriyar, Steve Blackburn, Kathryn S McKinley",
      "AffiliationsString": "Australian National University, Australian National University , Microsoft Research",
      "Authors": [
        "Rifat Shahriyar @ Australian National University",
        "Steve Blackburn @ Australian National University ",
        "Kathryn S McKinley @ Microsoft Research"
      ],
      "Affiliations": [
        "Australian National University",
        "Australian National University ",
        "Microsoft Research"
      ],
      "Abstract": "Garbage collectors for managed languages are exact or conservative. An exact collector identifies references precisely and may move referents and update references. A conservative collector is constrained by ambiguous references in two ways. (1) Since they may be pointers, the collectors must retain referents. (2) Since they may be values, the collectors cannot modify them, pinning their referents. This paper is the first to show that retaining dead objects and pinning objects affects remarkably few heap objects: for Java benchmarks, < 0.01% are falsely retained and 0.03% are pinned. \n\nThe larger effect is collector design. Prior conservative collectors either (1) use mark-sweep and forgo moving all objects, or (2) use mostly copying and pin entire pages. This paper shows this overhead is substantial: 12% and 45% respectively, compared to generational collection in a Java VM. We introduce high performance conservative Immix and reference counting (RC). Immix is a mark-region collector that combines fine line-grain pinning and opportunistic copying of unambiguous referents. Deferred RC simply needs an object map to deliver the first conservative RC in the literature. We implement six exact collectors and their conservative counterparts. Conservative Immix variants and RC come within 2 to 3% of their exact counterparts. In particular, conservative RC Immix is slightly faster than a well-tuned exact generational collector. For managed languages, these findings show conservative collection is compatible with high performance.",
      "Award": ""
    },
    {
      "Title": "Rubah: DSU for Java on a stock JVM",
      "Key": "6c46a589-fdcc-4ee5-8b8b-48681bc38613",
      "Type": "",
      "PersonsString": "Lu\u00eds Pina, Lu\u00eds Veiga, Michael Hicks",
      "AffiliationsString": "Technical University of Lisbon \/ INESC-ID, INESC-ID \/ Instituto Superior T\u00e9cnico, Universidade de Lisboa, University of Maryland, College Park",
      "Authors": [
        "Lu\u00eds Pina @ Technical University of Lisbon \/ INESC-ID",
        "Lu\u00eds Veiga @ INESC-ID \/ Instituto Superior T\u00e9cnico, Universidade de Lisboa",
        "Michael Hicks @ University of Maryland, College Park"
      ],
      "Affiliations": [
        "Technical University of Lisbon \/ INESC-ID",
        "INESC-ID \/ Instituto Superior T\u00e9cnico, Universidade de Lisboa",
        "University of Maryland, College Park"
      ],
      "Abstract": "This paper presents Rubah, the first dynamic software up- dating system for Java that: is portable, implemented via libraries and bytecode rewriting on top of a standard JVM; is efficient, imposing essentially no overhead on normal, steady-state execution; is flexible, allowing nearly arbitrary changes to classes between updates; and is non-disruptive, employing either a novel eager algorithm that transforms the program state with multiple threads, or a novel lazy algorithm that transforms objects as they are demanded, post- update. Requiring little programmer effort, Rubah has been used to dynamically update five long-running applications: the H2 database, the Voldemort key-value store, the Jake2 implementation of the Quake 2 shooter game, the CrossFTP server, and the JavaEmailServer.",
      "Award": ""
    },
    {
      "Title": "Tardis: Affordable Time-Travel Debugging in Managed Runtimes",
      "Key": "80a134c8-b853-4c3e-9fb1-374ba33751f6",
      "Type": "",
      "PersonsString": "Earl Barr, Mark Marron",
      "AffiliationsString": "University College London, Microsoft Research",
      "Authors": [
        "Earl Barr @ University College London",
        "Mark Marron @ Microsoft Research"
      ],
      "Affiliations": [
        "University College London",
        "Microsoft Research"
      ],
      "Abstract": "Developers who set a breakpoint a few statements too late or who are trying to diagnose a subtle bug from a single core dump often wish for a time-traveling debugger.  The ability to rewind time to see the exact sequence of statements and program values leading to an error has great intuitive appeal but, due to large time and space overheads, time-traveling debuggers have seen limited adoption.\n\nA managed runtime, such as the Java JVM or a JavaScript engine, has already paid much of the cost of providing core features --- type safety, memory management, and virtual IO --- that can be reused to implement a low overhead time-traveling debugger.  We leverage this insight to design and build affordable time-traveling debuggers for managed languages.  Tardis realizes our design: it provides affordable time-travel with an average overhead of only 7% during normal execution, a rate of 0.6 MB\/s of history logging, and a worst-case 0.68s time-travel latency on our benchmark applications.  Tardis can also debug optimized code using time-travel to reconstruct state.  This capability, coupled with its low overhead, makes Tardis suitable for use as the default debugger for managed languages, promising to bring time-traveling debugging into the mainstream and transform the practice of debugging.",
      "Award": ""
    },
    {
      "Title": "Phosphor: Illuminating Dynamic Data Flow in Commodity JVMs",
      "Key": "c7616948-f669-42cb-825f-02e1a92a1617",
      "Type": "",
      "PersonsString": "Jonathan Bell, Gail Kaiser",
      "AffiliationsString": "Columbia University, Columbia University, New York",
      "Authors": [
        "Jonathan Bell @ Columbia University",
        "Gail Kaiser @ Columbia University, New York"
      ],
      "Affiliations": [
        "Columbia University",
        "Columbia University, New York"
      ],
      "Abstract": "Dynamic taint analysis is a well-known information flow analysis problem with many possible applications. Taint tracking allows for analysis of application data flow by assigning labels to inputs, and then propagating those labels through data flow. Taint tracking systems traditionally compromise among performance, precision, accuracy, and portability. Performance can be critical, as these systems are typically intended to be deployed with software, and hence must have low overhead. To be deployed in security-conscious settings, taint tracking must also be accurate and precise. Dynamic taint tracking must be portable in order to be easily deployed and adopted for real world purposes, without requiring recompilation of the operating system or language interpreter, and without requiring access to application source code.\n\nWe present Phosphor, a dynamic taint tracking system for the Java Virtual Machine (JVM) that simultaneously achieves our goals of performance, accuracy, precision, and portability. Moreover, to our knowledge, it is the first portable general purpose taint tracking system for the JVM. We evaluated Phosphor's performance on two commonly used JVM languages (Java and Scala), on two versions of two commonly used JVMs (Oracle's HotSpot and OpenJDK's IcedTea) and on Android's Dalvik Virtual Machine, finding its performance to be impressive: as low as 3% (53% on average), using the DaCapo macro benchmark suite. This paper describes the approach that Phosphor uses to achieve portable taint tracking in the JVM.",
      "Award": ""
    },
    {
      "Title": "Rate Types for Stream Programs",
      "Key": "1d2948a3-ba06-4a04-86a6-c9c3281fee82",
      "Type": "",
      "PersonsString": "Thomas W. Bartenstein, Yu David Liu",
      "AffiliationsString": "SUNY Binghamton, State University of New York (SUNY) Binghamton",
      "Authors": [
        "Thomas W. Bartenstein @ SUNY Binghamton",
        "Yu David Liu @ State University of New York (SUNY) Binghamton"
      ],
      "Affiliations": [
        "SUNY Binghamton",
        "State University of New York (SUNY) Binghamton"
      ],
      "Abstract": "We introduce RATE TYPES, a novel type system to reason about and optimize data-intensive programs. Built around stream languages, RATE TYPES performs static quantitative reasoning about stream rates \u2014 the frequency of data items in a stream being consumed, processed, and produced. Despite the fact that streams are fundamentally dynamic, we find two essential concepts of stream rate control \u2014 throughput ratio and natural rate \u2014 are intimately related to the program structure itself and can be effectively reasoned about by a type system. RATE TYPES is proven to correspond with a time-aware and parallelism-aware operational semantics. The strong correspondence result tolerates arbitrary schedules, and does not require any synchronization between stream filters. We further implement RATE TYPES, demonstrating its effectiveness in predicting stream data rates in real-world stream programs.",
      "Award": ""
    },
    {
      "Title": "Foundations of Path-Dependent Types",
      "Key": "403c28aa-da32-44ac-95d7-65bba607c798",
      "Type": "",
      "PersonsString": "Nada Amin, Tiark Rompf, Martin Odersky",
      "AffiliationsString": "EPFL, Purdue & Oracle Labs, Ecole Polytechnique Federale de Lausanne",
      "Authors": [
        "Nada Amin @ EPFL",
        "Tiark Rompf @ Purdue & Oracle Labs",
        "Martin Odersky @ Ecole Polytechnique Federale de Lausanne"
      ],
      "Affiliations": [
        "EPFL",
        "Purdue & Oracle Labs",
        "Ecole Polytechnique Federale de Lausanne"
      ],
      "Abstract": "A scalable programming language is one in which the same concepts can\ndescribe small as well as large parts. Towards this goal, Scala\nunifies concepts from object and module systems. An essential\ningredient of this unification is the concept of objects with type members, \nwhich can be referenced through path-dependent types. Unfortunately,\npath-dependent types are not well-understood, and have been a\nroadblock in grounding the Scala type system on firm theory.\n\nWe study several calculi for path-dependent types. We present muDOT\nwhich captures the essence -- DOT stands for Dependent Object Types.\nWe explore the design space bottom-up, teasing apart inherent from\naccidental complexities, while fully mechanizing our models at each\nstep. Even in this simple setting, many interesting patterns arise\nfrom the interaction of structural and nominal features.\n\nWhereas our simple calculus enjoys many desirable and intuitive properties, \nwe demonstrate that the theory gets much more complicated once we\nadd another Scala feature, type refinement, or extend the subtyping \nrelation to a lattice. We discuss possible remedies and trade-offs in\nmodeling type systems for Scala-like languages.",
      "Award": ""
    },
    {
      "Title": "Refactoring Java Generics by Inferring Wildcards, In Practice",
      "Key": "c5fa6b6a-bbea-4a0c-9097-27b460f30b6d",
      "Type": "",
      "PersonsString": "John Altidor, Yannis Smaragdakis",
      "AffiliationsString": "University of Massachusetts, University of Athens",
      "Authors": [
        "John Altidor @ University of Massachusetts",
        "Yannis Smaragdakis @ University of Athens"
      ],
      "Affiliations": [
        "University of Massachusetts",
        "University of Athens"
      ],
      "Abstract": "Wildcard annotations can improve the generality of Java generic libraries, but require heavy manual effort. We present an algorithm for refactoring and inferring more general type instantiations of Java generics using wildcards. Compared to past approaches, our work is practical and immediately applicable: we assume no changes to the Java type system, while taking into account all its intricacies. Our system allows users to select declarations (variables, method parameters, return types, etc.) to generalize and considers declarations not declared in available source code. It then per- forms an inter-procedural flow analysis and a method body analysis, in order to generalize type signatures. We evaluate our technique on six Java generic libraries. We find that 30% of available declarations of variant type signatures can be generalized\u2014i.e., relaxed with more general wildcard types. On average, 228 other declarations need to be updated when a declaration is generalized, showing that this refactoring would be too tedious and error-prone to perform manually.",
      "Award": ""
    },
    {
      "Title": "Confined Gradual Typing",
      "Key": "e47e9b4e-eee4-4f6f-86ff-5b49beb624a3",
      "Type": "",
      "PersonsString": "Esteban Allende, Johan Fabry, Ronald Garcia, \u00c9ric Tanter",
      "AffiliationsString": "undefined, University of Chile, University of British Columbia, University of Chile",
      "Authors": [
        "Esteban Allende @ undefined",
        "Johan Fabry @ University of Chile",
        "Ronald Garcia @ University of British Columbia",
        "\u00c9ric Tanter @ University of Chile"
      ],
      "Affiliations": [
        "undefined",
        "University of Chile",
        "University of British Columbia",
        "University of Chile"
      ],
      "Abstract": "Gradual typing combines static and dynamic typing flexibly and safely in a single programming language.  To do so, gradually typed languages implicitly insert casts where needed, to ensure at runtime that typing assumptions are not violated by untyped code. However, the implicit nature of cast insertion, especially on higher-order values, can jeopardize reliability and efficiency: higher-order casts can fail at any time, and are costly to execute.  We propose Confined Gradual Typing to provide programmers with explicit means to restrict the flexibility of gradual typing to selectively regain reliability and efficiency guarantees.  We introduce two new type qualifiers that allow programmers to control the flow of values between the typed and the untyped worlds. We formally develop two variants of Confined Gradual Typing that capture different flexibility\/guarantee tradeoffs. We report on the implementation of Confined Gradual Typing in Gradualtalk, a gradually-typed Smalltalk, which confirms the performance advantage of avoiding unwanted higher-order casts and the low overhead of the approach.",
      "Award": ""
    },
    {
      "Title": "Smten with Satisfiability-Based Search",
      "Key": "246f63ef-371d-45e3-bb9a-2a9112de4dc7",
      "Type": "",
      "PersonsString": "Richard Uhler, Nirav Dave",
      "AffiliationsString": "MIT-CSAIL, SRI International",
      "Authors": [
        "Richard Uhler @ MIT-CSAIL",
        "Nirav Dave @ SRI International"
      ],
      "Affiliations": [
        "MIT-CSAIL",
        "SRI International"
      ],
      "Abstract": "Satisfiability (SAT) and Satisfiability Modulo Theories (SMT) have been leveraged in solving a wide variety of important and challenging problems, including automatic test generation, model checking, and program synthesis.\nFor these applications to scale to larger problem instances, developers cannot solely rely on the sophistication of SAT and SMT solvers to efficiently solve their queries; they must also optimize their own\norchestration and construction of queries. We present Smten, a high-level language for orchestrating\nand constructing satisfiability-based search queries. We show that applications developed using Smten require\nsignificantly fewer lines of code and less developer effort to achieve results comparable to standard SMT-based tools.",
      "Award": ""
    },
    {
      "Title": "StreamJIT: A Commensal Compiler for High-Performance Stream Programming",
      "Key": "45e94842-38d4-4e2e-92d6-6b68d10b0192",
      "Type": "",
      "PersonsString": "Jeffrey Bosboom, Sumanaruban Rajadurai, Weng-Fai Wong, Saman Amarasinghe",
      "AffiliationsString": "MIT CSAIL, National University of Singapore, National University of Singapore, MIT",
      "Authors": [
        "Jeffrey Bosboom @ MIT CSAIL",
        "Sumanaruban Rajadurai @ National University of Singapore",
        "Weng-Fai Wong @ National University of Singapore",
        "Saman Amarasinghe @ MIT"
      ],
      "Affiliations": [
        "MIT CSAIL",
        "National University of Singapore",
        "National University of Singapore",
        "MIT"
      ],
      "Abstract": "There are many domain libraries, but despite the performance benefits of compilation, domain-specific languages are comparatively rare due to the high cost of implementing an optimizing compiler.  We propose commensal compilation, a new strategy for compiling embedded domain-specific languages by reusing the massive investment in modern language virtual machine platforms.  Commensal compilers use the host language's front-end, use an autotuner instead of optimization heuristics, and use host platform APIs that enable back-end optimizations by the host platform JIT.  The cost of implementing a commensal compiler is only the cost of implementing the domain-specific optimizations.  We demonstrate the concept by implementing a commensal compiler for the stream programming language StreamJIT atop the Java platform.  Our compiler achieves performance comparable to StreamIt's native code (via GCC) compiler with considerably less implementation effort.",
      "Award": ""
    },
    {
      "Title": "SurveyMan: Programming and Automatically Debugging Surveys",
      "Key": "958848f5-98a9-441f-99d6-14fa86062208",
      "Type": "",
      "PersonsString": "Emma Tosch, Emery Berger",
      "AffiliationsString": "University of Massachusetts, Amherst, University of Massachusetts, Amherst",
      "Authors": [
        "Emma Tosch @ University of Massachusetts, Amherst",
        "Emery Berger @ University of Massachusetts, Amherst"
      ],
      "Affiliations": [
        "University of Massachusetts, Amherst",
        "University of Massachusetts, Amherst"
      ],
      "Abstract": "Surveys can be viewed as programs, complete with logic, control flow, and bugs. Word choice or the order in which questions are asked can unintentionally bias responses. Vague, confusing, or intrusive questions can cause respondents to abandon a survey. Surveys can also have runtime errors: inattentive respondents can taint results. This effect is especially problematic when deploying surveys in uncontrolled settings, such as on the web or via crowdsourcing platforms. Because the results of surveys drive business decisions and inform scientific conclusions, it is crucial to make sure they are correct.\n\nWe present SurveyMan, a system for designing, deploying, and automatically debugging surveys. Survey authors write their surveys in a lightweight domain-specific language aimed at end users. SurveyMan statically analyzes the survey to provide feedback to survey authors before deployment. It then compiles the survey into JavaScript and deploys it either to the web or a crowdsourcing platform. SurveyMan's dynamic analyses automatically find survey bugs, and control for the quality of responses. We evaluate SurveyMan's algorithms analytically and empirically, demonstrating its effectiveness with case studies of social science surveys conducted via Amazon\u2019s Mechanical Turk.",
      "Award": ""
    },
    {
      "Title": "Region-based memory management for GPU programming languages: Enabling rich data structures on a spartan host",
      "Key": "dc6cf40d-3043-4d30-8f22-c2ee6df861c4",
      "Type": "",
      "PersonsString": "Eric Holk, Ryan Newton, Jeremy Siek, Andrew Lumsdaine",
      "AffiliationsString": "Indiana University, Indiana University, undefined, Indiana University",
      "Authors": [
        "Eric Holk @ Indiana University",
        "Ryan Newton @ Indiana University",
        "Jeremy Siek @ undefined",
        "Andrew Lumsdaine @ Indiana University"
      ],
      "Affiliations": [
        "Indiana University",
        "Indiana University",
        "undefined",
        "Indiana University"
      ],
      "Abstract": "Graphics processing units (GPUs) can effectively accelerate many applications, but their applicability has been largely limited to problems whose solutions can be expressed neatly in terms of linear algebra. Indeed, most GPU programming languages limit the user to simple data structures--typically only multidimensional rectangular arrays of scalar values. Many algorithms are more naturally expressed using higher level language features, such as algebraic data types (ADTs) and first class procedures, yet building these structures in a manner suitable for a GPU remains a challenge. We present a region-based memory management approach that enables rich data structures in Harlan, a language for data parallel computing. Regions enable rich data structures by providing a uniform representation for pointers on both the CPU and GPU and by providing a means of transferring entire data structures between CPU and GPU memory. We demonstrate Harlan's increased expressiveness on several example programs and show that Harlan performs well on more traditional data-parallel problems.",
      "Award": ""
    },
    {
      "Title": "i3QL: Language-Integrated Live Data Views",
      "Key": "173125dd-da2e-4ef3-b352-54125a13fdeb",
      "Type": "",
      "PersonsString": "Ralf Mitschke, Sebastian Erdweg, Mirko Kohler, Mira Mezini, Guido Salvaneschi",
      "AffiliationsString": "Technical University of Darmstadt, TU Darmstadt, Technical University of Darmstadt, Technical University of Darmstadt, TU Darmstadt",
      "Authors": [
        "Ralf Mitschke @ Technical University of Darmstadt",
        "Sebastian Erdweg @ TU Darmstadt",
        "Mirko Kohler @ Technical University of Darmstadt",
        "Mira Mezini @ Technical University of Darmstadt",
        "Guido Salvaneschi @ TU Darmstadt"
      ],
      "Affiliations": [
        "Technical University of Darmstadt",
        "TU Darmstadt",
        "Technical University of Darmstadt",
        "Technical University of Darmstadt",
        "TU Darmstadt"
      ],
      "Abstract": "An incremental computation updates its result based on a change to its input, which is often an order of magnitude faster than a recomputation from scratch. In particular, incrementalization can make expensive computations feasible for settings that require short feedback cycles, such as interactive systems, IDEs, or (soft) real-time systems.\n\nThis paper presents i3QL, a general-purpose programming language for specifying incremental computations. i3QL provides a declarative SQL-like syntax and is based on incremental versions of operators from relational algebra, enriched with support for general recursion. We integrated i3QL into Scala as a library, which enables programmers to use regular Scala code for non-incremental subcomputations of an i3QL query and to easily integrate incremental computations into larger software projects. To improve performance, i3QL optimizes user-defined queries by applying algebraic laws and partial evaluation. We describe the design and implementation of i3QL and its optimizations, demonstrate its applicability, and evaluate its performance.",
      "Award": ""
    },
    {
      "Title": "Distributed REScala: An Update Algorithm for Distributed Reactive Programming",
      "Key": "1ccd7bac-3d08-4869-8bb4-d4fc42ff693d",
      "Type": "",
      "PersonsString": "Joscha Drechsler, Guido Salvaneschi, Ragnar Mogk, Mira Mezini",
      "AffiliationsString": "Technische Universit\u00e4t Darmstadt, TU Darmstadt, Technische Universit\u00e4t Darmstadt, Technical University of Darmstadt",
      "Authors": [
        "Joscha Drechsler @ Technische Universit\u00e4t Darmstadt",
        "Guido Salvaneschi @ TU Darmstadt",
        "Ragnar Mogk @ Technische Universit\u00e4t Darmstadt",
        "Mira Mezini @ Technical University of Darmstadt"
      ],
      "Affiliations": [
        "Technische Universit\u00e4t Darmstadt",
        "TU Darmstadt",
        "Technische Universit\u00e4t Darmstadt",
        "Technical University of Darmstadt"
      ],
      "Abstract": "Reactive programming improves the design of reactive applications by relocating the logic for managing dependencies between dependent values away from the application logic to the language implementation. Many distributed applications are reactive. Yet, existing change propagation algorithms are not suitable in a distributed setting. \n\nWe propose Distributed REScala, a reactive language with a change propagation algorithm that works without centralized knowledge about the topology of the dependency structure among reactive values and avoids unnecessary propagation of changes, while retaining safety guarantees (glitch freedom). Distributed REScala enables distributed reactive programming, bringing the benefits of reactive programming to distributed applications. We demonstrate the enabled design improvements by a case study. We also empirically evaluate the performance of our algorithm in comparison to other algorithms in a simulated distributed setting.",
      "Award": ""
    },
    {
      "Title": "Late Data Layout: Unifying Data Representation Transformations",
      "Key": "2efffe37-a424-4fd3-be98-6d71ddd10b27",
      "Type": "",
      "PersonsString": "Vlad Ureche, Eugene Burmako, Martin Odersky",
      "AffiliationsString": "EPFL, EPFL, Ecole Polytechnique Federale de Lausanne",
      "Authors": [
        "Vlad Ureche @ EPFL",
        "Eugene Burmako @ EPFL",
        "Martin Odersky @ Ecole Polytechnique Federale de Lausanne"
      ],
      "Affiliations": [
        "EPFL",
        "EPFL",
        "Ecole Polytechnique Federale de Lausanne"
      ],
      "Abstract": "Values need to be represented differently when interacting with certain language features. For example, an integer needs to take an object-like representation when interacting with erased generics, although, for performance reasons, it normally uses the direct representation. In order to simplify the work of programmers, languages like ML and Scala expose the high-level concept (the integer) and let the compiler handle representation and conversion.\n\nThis pattern appears in multiple language features such as value classes, specialization and multi-stage programming mechanisms: they all expose a concept which they later refine into multiple representations. Yet, their implementations are ad-hoc and entangle the core mechanism with assumptions about the alternative representation and the implementation of generics, thus losing sight of the general principle.\n\nIn this paper we present an elegant and minimalistic type-driven generalization that subsumes and improves the state-of-the-art representation transformations. In doing so, we make two key observations: (1) annotated types conveniently capture the semantics of using alternative representations and (2) local type inference can be used to automatically, reliably and optimally introduce the necessary conversions.\n\nWe validated our approach by implementing three language features in the Scala compiler: value classes, specialization via miniboxing and a simplified multi-stage programming mechanism. An encouraging result was that we were able to reimplement and extend value class functionality in the Scala compiler with the equivalent of two man-weeks of work, without reusing any code from the previous implementation.",
      "Award": ""
    },
    {
      "Title": "From Object Algebras to Attribute Grammars",
      "Key": "5cdacda8-d3e8-42a8-88f5-c11b73ae637d",
      "Type": "",
      "PersonsString": "Tillmann Rendel, Jonathan Brachth\u00e4user, Klaus Ostermann",
      "AffiliationsString": "University of Marburg, University of Marburg, University of Marburg",
      "Authors": [
        "Tillmann Rendel @ University of Marburg",
        "Jonathan Brachth\u00e4user @ University of Marburg",
        "Klaus Ostermann @ University of Marburg"
      ],
      "Affiliations": [
        "University of Marburg",
        "University of Marburg",
        "University of Marburg"
      ],
      "Abstract": "Oliveira and Cook (2012) and Oliveira et al. (2013) have\nrecently introduced object algebras as a program structur-\ning technique to improve the modularity and extensibility\nof programs. We analyze the relationship between object al-\ngebras and attribute grammars (AGs), a formalism to aug-\nment context-free grammars with attributes. We present an\nan extension of the object algebra technique with which the\nfull class of L-attributed grammars \u2013 an important class of\nAGs that corresponds to one-pass compilers \u2013 can be en-\ncoded in Scala. The encoding is modular (attributes can be\ndefined and type-checked separately), scalable (the size of\nthe encoding is linear in the size of the AG specification) and\ncompositional (each AG artefact is represented as a seman-\ntic object of the host language). To validate these claims, we\nhave formalized the encoding and we have re-implemented\na one-pass compiler for a subset of C with our technique. We\nalso discuss how advanced features of modern AG systems,\nsuch as higher-order and parameterized attributes, reference\nattributes, and forwarding can be supported.",
      "Award": ""
    }
  ],
  "People": [
    {
      "Name": "Crista Lopes",
      "Key": "Crista Lopes @ University of California, Irvine",
      "Id": "842h43fj3354p2g1143nh63488888888",
      "Affiliation": "University of California, Irvine"
    },
    {
      "Name": "Eelco Visser",
      "Key": "Eelco Visser @ Delft University of Technology",
      "Id": "61ow63fg23j3354p2jy3338888888888",
      "Affiliation": "Delft University of Technology"
    },
    {
      "Name": "Andrew Black",
      "Key": "Andrew Black @ Portland State University",
      "Id": "734g11fi441my2mx4347888888888888",
      "Affiliation": "Portland State University"
    },
    {
      "Name": "Dennis Mancl",
      "Key": "Dennis Mancl @ Alcatel-Lucent",
      "Id": "y14426aqx4y3alal3yx613ep6y146888",
      "Affiliation": "Alcatel-Lucent"
    },
    {
      "Name": "Patrick Eugster",
      "Key": "Patrick Eugster @ Purdue University",
      "Id": "761nw33ofx33j3354888888888888888",
      "Affiliation": "Purdue University"
    },
    {
      "Name": "Jonathan Bell",
      "Key": "Jonathan Bell @ Columbia University",
      "Id": "9141g2nfu411j3354888888888888888",
      "Affiliation": "Columbia University"
    },
    {
      "Name": "Jeremy Gibbons",
      "Key": "Jeremy Gibbons @ University of Oxford, UK",
      "Id": "736g124fj3354p2i44ojx88888888888",
      "Affiliation": "University of Oxford, UK"
    },
    {
      "Name": "Bernd Bruegge",
      "Key": "Bernd Bruegge @ Technische Universit\u00e4t M\u00fcnchen",
      "Id": "64mv31mfv1331j33548h712888888888",
      "Affiliation": "Technische Universit\u00e4t M\u00fcnchen"
    },
    {
      "Name": "William Cook",
      "Key": "William Cook @ UT Austin",
      "Id": "72332x3am443alatsal6662488888888",
      "Affiliation": "UT Austin"
    },
    {
      "Name": "Carlos Jensen",
      "Key": "Carlos Jensen @ Oregon State University ",
      "Id": "545h23ofx14j23j3354p888888888888",
      "Affiliation": "Oregon State University "
    },
    {
      "Name": "Kathleen Fisher",
      "Key": "Kathleen Fisher @ Tufts University",
      "Id": "7422g41ofy3ox4347888888888888888",
      "Affiliation": "Tufts University"
    },
    {
      "Name": "Kathi Fisler",
      "Key": "Kathi Fisler @ Worcester Polytechnic Institute",
      "Id": "74nt43fj4y63i37y31h4463888888888",
      "Affiliation": "Worcester Polytechnic Institute"
    },
    {
      "Name": "Robert Hirschfeld",
      "Key": "Robert Hirschfeld @ Hasso-Plattner-Institute, Potsdam",
      "Id": "zy6h3312mfs6qw253j4463cw6x688888",
      "Affiliation": "Hasso-Plattner-Institute, Potsdam"
    },
    {
      "Name": "Joseph N. Ruskiewicz",
      "Key": "Joseph N. Ruskiewicz @ undefined",
      "Id": "246142aqfas6632172y8ala64y11241y",
      "Affiliation": "undefined"
    },
    {
      "Name": "Gary Leavens",
      "Key": "Gary Leavens @  University of Central Florida",
      "Id": "66hy34fax4347oms52nu413888888888",
      "Affiliation": " University of Central Florida"
    },
    {
      "Name": "Lukasz Ziarek",
      "Key": "Lukasz Ziarek @ State University of New York (SUNY) Buffalo",
      "Id": "z17k13nfy2mx4347omupy4bssbv11688",
      "Affiliation": "State University of New York (SUNY) Buffalo"
    },
    {
      "Name": "Tony Hosking",
      "Key": "Tony Hosking @ Purdue University",
      "Id": "6448ao463241alar65y61at427156268",
      "Affiliation": "Purdue University"
    },
    {
      "Name": "Laurence Tratt",
      "Key": "Laurence Tratt @ King's College London",
      "Id": "762yj26fh3oou31mw248888888888888",
      "Affiliation": "King's College London"
    },
    {
      "Name": "Matt Dwyer",
      "Key": "Matt Dwyer @ University of Nebraska",
      "Id": "76g73fj3354p2iy24388888888888888",
      "Affiliation": "University of Nebraska"
    },
    {
      "Name": "Stephanie Balzer",
      "Key": "Stephanie Balzer @ Carnegie Mellon University",
      "Id": "z2y3mr63fg222mu34j33548888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Matthias Hauswirth",
      "Key": "Matthias Hauswirth @ University of Lugano",
      "Id": "7622h3634fj3354p2h41688888888888",
      "Affiliation": "University of Lugano"
    },
    {
      "Name": "Jonathan Edwards",
      "Key": "Jonathan Edwards @ MIT, USA",
      "Id": "244x62x4any7x5y6alaqoseatsl88888",
      "Affiliation": "MIT, USA"
    },
    {
      "Name": "Kevin Sullivan",
      "Key": "Kevin Sullivan @ University of Virginia",
      "Id": "74oy341fj3354p2j3233888888888888",
      "Affiliation": "University of Virginia"
    },
    {
      "Name": "Jan Vitek",
      "Key": "Jan Vitek @ Purdue",
      "Id": "2x4at2613alar65y6188888888888888",
      "Affiliation": "Purdue"
    },
    {
      "Name": "Reid Holmes",
      "Key": "Reid Holmes @ University of Waterloo",
      "Id": "81h32ofx4347omv34488888888888888",
      "Affiliation": "University of Waterloo"
    },
    {
      "Name": "Du Li",
      "Key": "Du Li @ Carnegie Mellon University",
      "Id": "9hnfs411h23ox4347888888888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Todd Millstein",
      "Key": "Todd Millstein @ University of California, Los Angeles",
      "Id": "zyh2433fj3354p2g1143nh5f22388888",
      "Affiliation": "University of California, Los Angeles"
    },
    {
      "Name": "David Archer",
      "Key": "David Archer @ Galois",
      "Id": "yx72yal5y215alaox342688888888888",
      "Affiliation": "Galois"
    },
    {
      "Name": "Darya Kurilova",
      "Key": "Darya Kurilova @ Carnegie Mellon University",
      "Id": "56lx333fg222mu34j335488888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "K R Jayaram",
      "Key": "K R Jayaram @ IBM Research, USA",
      "Id": "3asapx8x5x3alaomqas161x5y2eatsl8",
      "Affiliation": "IBM Research, USA"
    },
    {
      "Name": "Craig Anslow",
      "Key": "Craig Anslow @ University of Calgary",
      "Id": "81mt46fj3354p2g1y688888888888888",
      "Affiliation": "University of Calgary"
    },
    {
      "Name": "Annabel Satin",
      "Key": "Annabel Satin @ undefined",
      "Id": "x44xx13asx624ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Nick Sumner",
      "Key": "Nick Sumner @ Simon Fraser University",
      "Id": "81j52ofw4ov23j335488888888888888",
      "Affiliation": "Simon Fraser University"
    },
    {
      "Name": "Floreal Morandat",
      "Key": "Floreal Morandat @ Enseirb-Matmeca",
      "Id": "84ynw222fg412k22x888888888888888",
      "Affiliation": "Enseirb-Matmeca"
    },
    {
      "Name": "James Noble",
      "Key": "James Noble @ Victoria University of Wellington",
      "Id": "62ow1mfw341j3354p2j2225688888888",
      "Affiliation": "Victoria University of Wellington"
    },
    {
      "Name": "Robby Findler",
      "Key": "Robby Findler @ Northwestern University",
      "Id": "zxpt22ofw64334j33548888888888888",
      "Affiliation": "Northwestern University"
    },
    {
      "Name": "Shriram Krishnamurthi",
      "Key": "Shriram Krishnamurthi @ Brown University",
      "Id": "932nw43164nfv6ox4347888888888888",
      "Affiliation": "Brown University"
    },
    {
      "Name": "Sam Guyer",
      "Key": "Sam Guyer @ Tufts University",
      "Id": "6x3ao6815alas6166at4271562688888",
      "Affiliation": "Tufts University"
    },
    {
      "Name": "Thomas LaToza",
      "Key": "Thomas LaToza @ University of California, Irvine",
      "Id": "undefined42hv6lfx4347oms2241cw4288888888",
      "Affiliation": "University of California, Irvine"
    },
    {
      "Name": "Isil Dillig",
      "Key": "Isil Dillig @ University of Texas, Austin",
      "Id": "undefined2g22mfx4347omv3rf64688888888888",
      "Affiliation": "University of Texas, Austin"
    },
    {
      "Name": "Jonathan Corley",
      "Key": "Jonathan Corley @ University of Alabama",
      "Id": "9141g42pfx4347omtx13888888888888",
      "Affiliation": "University of Alabama"
    },
    {
      "Name": "Brian Eddy",
      "Key": "Brian Eddy @ undefined",
      "Id": "x52x4anyy8ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Alysson Milanez",
      "Key": "Alysson Milanez @ UFCG, Brazil",
      "Id": "x386644aq23x418alatnmoeam5x82388",
      "Affiliation": "UFCG, Brazil"
    },
    {
      "Name": "Tiago Massoni",
      "Key": "Tiago Massoni @ UFCG",
      "Id": "62x14aqx66442alatnmo888888888888",
      "Affiliation": "UFCG"
    },
    {
      "Name": "Rohit Gheyi",
      "Key": "Rohit Gheyi @ UFCG, Brazil",
      "Id": "54226ao2182alatnmoeam5x823888888",
      "Affiliation": "UFCG, Brazil"
    },
    {
      "Name": "Tai Nguyen",
      "Key": "Tai Nguyen @ Washington State University",
      "Id": "8nv72fj2225oy2mx4347888888888888",
      "Affiliation": "Washington State University"
    },
    {
      "Name": "Xinghui Zhao",
      "Key": "Xinghui Zhao @ University of Washington",
      "Id": "z24nx2fj3354p2j22256888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Peter Elmers",
      "Key": "Peter Elmers @ Rice University",
      "Id": "41615an33156alas2y1at42715626888",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Hongyu Li",
      "Key": "Hongyu Li @ Rice University",
      "Id": "244186ap2alas2y1at42715626888888",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Shams Imam",
      "Key": "Shams Imam @ Rice University",
      "Id": "62x36ao3x3alas2y1at4271562688888",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Vivek Sarkar",
      "Key": "Vivek Sarkar @ Rice University",
      "Id": "72713asx53x5alas2y1at42715626888",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Kuldeep Kumar",
      "Key": "Kuldeep Kumar @ National University of Singapore",
      "Id": "z21ox1oft441j3354p2j3y4388888888",
      "Affiliation": "National University of Singapore"
    },
    {
      "Name": "Stan Jarzabek",
      "Key": "Stan Jarzabek @ National University of Singapore",
      "Id": "z1h23ynft441j3354p2j3y4388888888",
      "Affiliation": "National University of Singapore"
    },
    {
      "Name": "Shiyi Wei",
      "Key": "Shiyi Wei @ Virginia Tech",
      "Id": "62282at12alat251242xas1y28888888",
      "Affiliation": "Virginia Tech"
    },
    {
      "Name": "Barbara Ryder",
      "Key": "Barbara Ryder @ Virginia Tech",
      "Id": "xx5xx5xas8y15alat251242xas1y2888",
      "Affiliation": "Virginia Tech"
    },
    {
      "Name": "Steven D. Fraser",
      "Key": "Steven D. Fraser @ Independent Consultant",
      "Id": "z32gcv23fh222y5g4641788888888888",
      "Affiliation": "Independent Consultant"
    },
    {
      "Name": "Djenana Campara",
      "Key": "Djenana Campara @ KDM Analytics",
      "Id": "y214x4xamx34x5xalapnqal4x3862y68",
      "Affiliation": "KDM Analytics"
    },
    {
      "Name": "Michael Fanning",
      "Key": "Michael Fanning @ Microsoft",
      "Id": "32y2x13anx44241alaq2y54641688888",
      "Affiliation": "Microsoft"
    },
    {
      "Name": "Gary McGraw",
      "Key": "Gary McGraw @ Cigital",
      "Id": "1x58aqyo5x7alam2126x388888888888",
      "Affiliation": "Cigital"
    },
    {
      "Name": "Kevin Sullivan",
      "Key": "Kevin Sullivan @ University of Virginia",
      "Id": "74oy341fj3354p2j3233888888888888",
      "Affiliation": "University of Virginia"
    },
    {
      "Name": "Brett Boston",
      "Key": "Brett Boston @ University of Washington",
      "Id": "83pu64fj3354p2j22256888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Santiago Gonzalez",
      "Key": "Santiago Gonzalez @ Colorado School of Mines",
      "Id": "8513g432qfu322j14n2h338888888888",
      "Affiliation": "Colorado School of Mines"
    },
    {
      "Name": "Armando Solar-Lezama",
      "Key": "Armando Solar-Lezama @ MIT",
      "Id": "x53x4y4as43x5ep18x3xalaqos888888",
      "Affiliation": "MIT"
    },
    {
      "Name": "Devin Coughlin",
      "Key": "Devin Coughlin @ University of Colorado Boulder",
      "Id": "64ou423fj3354p2g34xou4y788888888",
      "Affiliation": "University of Colorado Boulder"
    },
    {
      "Name": "Lindsay Neubauer",
      "Key": "Lindsay Neubauer @ Columbia University",
      "Id": "822pu333fg351lx43478888888888888",
      "Affiliation": "Columbia University"
    },
    {
      "Name": "Brian Eddy",
      "Key": "Brian Eddy @ undefined",
      "Id": "x52x4anyy8ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Dylan Bates",
      "Key": "Dylan Bates @ Coker College",
      "Id": "y83x4amx616alam4315am43311188888",
      "Affiliation": "Coker College"
    },
    {
      "Name": "Pascal Wittmann",
      "Key": "Pascal Wittmann @ TU Darmstadt",
      "Id": "4x6yx3at2663x44alastanx5366xy688",
      "Affiliation": "TU Darmstadt"
    },
    {
      "Name": "Joscha Drechsler",
      "Key": "Joscha Drechsler @ Technische Universit\u00e4t Darmstadt",
      "Id": "93yg3143fjy341mx4348ps46x7888888",
      "Affiliation": "Technische Universit\u00e4t Darmstadt"
    },
    {
      "Name": "Ayush Narayan",
      "Key": "Ayush Narayan @ Rice University",
      "Id": "x8662aqx5x8x4alas2y1at4271562688",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Martin Velez",
      "Key": "Martin Velez @ University of California, Davis",
      "Id": "763j24fj3354p2g1143ng34888888888",
      "Affiliation": "University of California, Davis"
    },
    {
      "Name": "Ward Cunningham",
      "Key": "Ward Cunningham @ New Relic",
      "Id": "7x5yam6442412x3alaq17as132y88888",
      "Affiliation": "New Relic"
    },
    {
      "Name": "Gary McGraw",
      "Key": "Gary McGraw @ Cigital",
      "Id": "1x58aqyo5x7alam2126x388888888888",
      "Affiliation": "Cigital"
    },
    {
      "Name": "Steven D. Fraser",
      "Key": "Steven D. Fraser @ Independent Consultant",
      "Id": "z32gcv23fh222y5g4641788888888888",
      "Affiliation": "Independent Consultant"
    },
    {
      "Name": "Dennis Mancl",
      "Key": "Dennis Mancl @ Alcatel-Lucent",
      "Id": "y14426aqx4y3alal3yx613ep6y146888",
      "Affiliation": "Alcatel-Lucent"
    },
    {
      "Name": "Aki Namioka",
      "Key": "Aki Namioka @ Marchex",
      "Id": "x32aqx3243xalaqx5y21788888888888",
      "Affiliation": "Marchex"
    },
    {
      "Name": "Roberto Salama",
      "Key": "Roberto Salama @ Millennium Partners",
      "Id": "zy6ov11fh2244nu62588888888888888",
      "Affiliation": "Millennium Partners"
    },
    {
      "Name": "Allen Wirfs-Brock",
      "Key": "Allen Wirfs-Brock @ Mozilla Corporation",
      "Id": "72ox3rv2nfw53lu54236888888888888",
      "Affiliation": "Mozilla Corporation"
    },
    {
      "Name": "Peter Norvig",
      "Key": "Peter Norvig @ Google",
      "Id": "41615aq45721alao4413188888888888",
      "Affiliation": "Google"
    },
    {
      "Name": "Mathieu Acher",
      "Key": "Mathieu Acher @ University of Rennes",
      "Id": "741ps1ofx4347omv4388888888888888",
      "Affiliation": "University of Rennes"
    },
    {
      "Name": "Benoit Combemale",
      "Key": "Benoit Combemale @ University of Rennes",
      "Id": "644g4y12fj3354p2j227888888888888",
      "Affiliation": "University of Rennes"
    },
    {
      "Name": "Philippe Collet",
      "Key": "Philippe Collet @ University of Nice",
      "Id": "9232g32pfx4347omvy88888888888888",
      "Affiliation": "University of Nice"
    },
    {
      "Name": "Stephen Kell",
      "Key": "Stephen Kell @ University of Cambridge",
      "Id": "z21ou3fj3354p2g12118888888888888",
      "Affiliation": "University of Cambridge"
    },
    {
      "Name": "Andreas Stefik",
      "Key": "Andreas Stefik @ University of Nevada, Las Vegas ",
      "Id": "73yoy12fj3354p2i3xnh2j12q8888888",
      "Affiliation": "University of Nevada, Las Vegas "
    },
    {
      "Name": "Stefan Hanenberg",
      "Key": "Stefan Hanenberg @ University of Duisburg-Essen",
      "Id": "z11h12y3fj3354p2g426pv3688888888",
      "Affiliation": "University of Duisburg-Essen"
    },
    {
      "Name": "Richard P. Gabriel",
      "Key": "Richard P. Gabriel @ IBM Research, USA",
      "Id": "912mlgx32fhoj3y2pjp8888888888888",
      "Affiliation": "IBM Research, USA"
    },
    {
      "Name": "Eric Forsberg",
      "Key": "Eric Forsberg @ Mentor Graphics Corporation",
      "Id": "81g423mfu54g231ou542368888888888",
      "Affiliation": "Mentor Graphics Corporation"
    },
    {
      "Name": "Alex Groce",
      "Key": "Alex Groce @ Oregon State University",
      "Id": "74g4yfi33oy2mx434788888888888888",
      "Affiliation": "Oregon State University"
    },
    {
      "Name": "Mohammad Amin Alipour",
      "Key": "Mohammad Amin Alipour @ Oregon State University",
      "Id": "undefinedy3xf3ot35ofx14j23j3354888888888",
      "Affiliation": "Oregon State University"
    },
    {
      "Name": "Rahul Gopinath",
      "Key": "Rahul Gopinath @ Oregon State University",
      "Id": "84nv314fi33oy2mx4347888888888888",
      "Affiliation": "Oregon State University"
    },
    {
      "Name": "Gail Murphy",
      "Key": "Gail Murphy @ University of British Columbia",
      "Id": "62h63pfx4347omv44nu4118888888888",
      "Affiliation": "University of British Columbia"
    },
    {
      "Name": "Bret Victor",
      "Key": "Bret Victor @ undefined",
      "Id": "x516at2y645ala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Marcel Taeumel",
      "Key": "Marcel Taeumel @ Hasso Plattner Institute",
      "Id": "722jy52fh25i162ov646488888888888",
      "Affiliation": "Hasso Plattner Institute"
    },
    {
      "Name": "Michael Perscheid",
      "Key": "Michael Perscheid @ Hasso Plattner Institute",
      "Id": "81ynv511mfs6ow253h44638888888888",
      "Affiliation": "Hasso Plattner Institute"
    },
    {
      "Name": "Bastian Steinert",
      "Key": "Bastian Steinert @ Hasso Plattner Institute",
      "Id": "561oy126fh25i162ov64648888888888",
      "Affiliation": "Hasso Plattner Institute"
    },
    {
      "Name": "Jens Lincke",
      "Key": "Jens Lincke @ Hasso Plattner Institute",
      "Id": "74h31mfs6ow253h44638888888888888",
      "Affiliation": "Hasso Plattner Institute"
    },
    {
      "Name": "Robert Hirschfeld",
      "Key": "Robert Hirschfeld @ Hasso-Plattner-Institute, Potsdam",
      "Id": "zy6h3312mfs6qw253j4463cw6x688888",
      "Affiliation": "Hasso-Plattner-Institute, Potsdam"
    },
    {
      "Name": "Eric Walkingshaw",
      "Key": "Eric Walkingshaw @ University of Marburg",
      "Id": "81j12233fj3354p2h233888888888888",
      "Affiliation": "University of Marburg"
    },
    {
      "Name": "Christian K\u00e4stner",
      "Key": "Christian K\u00e4stner @ Carnegie Mellon University",
      "Id": "6361o162ofs411h23ox4347888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Martin Erwig",
      "Key": "Martin Erwig @ Oregon State University",
      "Id": "763g62fi33oy2mx43478888888888888",
      "Affiliation": "Oregon State University"
    },
    {
      "Name": "Sven Apel",
      "Key": "Sven Apel @ University of Passau",
      "Id": "6714al413alat427156268a41arx66x6",
      "Affiliation": "University of Passau"
    },
    {
      "Name": "Eric  Bodden",
      "Key": "Eric  Bodden @ Fraunhofer SIT and TU Darmstadt",
      "Id": "81auy2fg2531oqj1msg2423888888888",
      "Affiliation": "Fraunhofer SIT and TU Darmstadt"
    },
    {
      "Name": "Svetoslav Karaivanov",
      "Key": "Svetoslav Karaivanov @ ETH Zurich",
      "Id": "z351pt2415fgqk615888888888888888",
      "Affiliation": "ETH Zurich"
    },
    {
      "Name": "Veselin Raychev",
      "Key": "Veselin Raychev @ ETH Zurich",
      "Id": "7161324asx8y217alansoav652y28888",
      "Affiliation": "ETH Zurich"
    },
    {
      "Name": "Martin Vechev",
      "Key": "Martin Vechev @ ETH Zurich",
      "Id": "3x5624at1y217alansoav652y2888888",
      "Affiliation": "ETH Zurich"
    },
    {
      "Name": "St\u00e9phane Conversy",
      "Key": "St\u00e9phane Conversy @ University of Toulouse - ENAC",
      "Id": "z7y2g435pfx4347omx453cgow8888888",
      "Affiliation": "University of Toulouse - ENAC"
    },
    {
      "Name": "Brian Spencer Dillon",
      "Key": "Brian Spencer Dillon @ undefined",
      "Id": "x52x4as414y15an23344ala64y11241y",
      "Affiliation": "undefined"
    },
    {
      "Name": "Flavio Medeiros",
      "Key": "Flavio Medeiros @ undefined",
      "Id": "13x724aq1y12546ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Sean McDirmid",
      "Key": "Sean McDirmid @ Microsoft Research",
      "Id": "91hs33mfv252pv321888888888888888",
      "Affiliation": "Microsoft Research"
    },
    {
      "Name": "Jonathan Edwards",
      "Key": "Jonathan Edwards @ MIT, USA",
      "Id": "244x62x4any7x5y6alaqoseatsl88888",
      "Affiliation": "MIT, USA"
    },
    {
      "Name": "David H. Lorenz",
      "Key": "David H. Lorenz @ Open University and Technion IIT",
      "Id": "54mjh42qfw2j3354p1mv134hq8888888",
      "Affiliation": "Open University and Technion IIT"
    },
    {
      "Name": "Boaz Rosenan",
      "Key": "Boaz Rosenan @ University of Haifa",
      "Id": "73j521fj3354p2h1y888888888888888",
      "Affiliation": "University of Haifa"
    },
    {
      "Name": "Wouter Swierstra",
      "Key": "Wouter Swierstra @ University of Utrecht",
      "Id": "z63j4362fj3354p2j6y4888888888888",
      "Affiliation": "University of Utrecht"
    },
    {
      "Name": "Andres L\u00f6h",
      "Key": "Andres L\u00f6h @ Well-Typed LLP",
      "Id": "x4y516apz2alat133es841yappr88888",
      "Affiliation": "Well-Typed LLP"
    },
    {
      "Name": "Hesam Samimi",
      "Key": "Hesam Samimi @ SAP Labs",
      "Id": "216x3asx3232alaslrapxx6888888888",
      "Affiliation": "SAP Labs"
    },
    {
      "Name": "Chris Deaton",
      "Key": "Chris Deaton @ Cycorp",
      "Id": "y2526an1x644alam8y45488888888888",
      "Affiliation": "Cycorp"
    },
    {
      "Name": "Yoshiki Ohshima",
      "Key": "Yoshiki Ohshima @ Viewpoints Research Institute",
      "Id": "z32nv33lfw4436j3y2nv646488888888",
      "Affiliation": "Viewpoints Research Institute"
    },
    {
      "Name": "Alessandro Warth",
      "Key": "Alessandro Warth @ SAP Labs",
      "Id": "x3166x4y54atx562alaslrapxx688888",
      "Affiliation": "SAP Labs"
    },
    {
      "Name": "Todd Millstein",
      "Key": "Todd Millstein @ University of California, Los Angeles",
      "Id": "zyh2433fj3354p2g1143nh5f22388888",
      "Affiliation": "University of California, Los Angeles"
    },
    {
      "Name": "Michael Coblenz",
      "Key": "Michael Coblenz @ Carnegie Mellon University",
      "Id": "81ynu12qfs411h23ox43478888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Jonathan Aldrich",
      "Key": "Jonathan Aldrich @ Carnegie Mellon University",
      "Id": "9141f231fg222mu34j33548888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Brad Myers",
      "Key": "Brad Myers @ Carnegie Mellon University",
      "Id": "8xh45fg222mu34j33548888888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Joshua Sunshine",
      "Key": "Joshua Sunshine @ Carnegie Mellon University",
      "Id": "933j533mfs411h23ox43478888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Jonathan Aldrich",
      "Key": "Jonathan Aldrich @ Carnegie Mellon University",
      "Id": "9141f231fg222mu34j33548888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Joshua Sunshine",
      "Key": "Joshua Sunshine @ Carnegie Mellon University",
      "Id": "933j533mfs411h23ox43478888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Darya Kurilova",
      "Key": "Darya Kurilova @ Carnegie Mellon University",
      "Id": "56lx333fg222mu34j335488888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Alex Potanin",
      "Key": "Alex Potanin @ Victoria University of Wellington",
      "Id": "74i513fj153lx4347omw333488888888",
      "Affiliation": "Victoria University of Wellington"
    },
    {
      "Name": "Jonathan Aldrich",
      "Key": "Jonathan Aldrich @ Carnegie Mellon University",
      "Id": "9141f231fg222mu34j33548888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Juraj Kubelka",
      "Key": "Juraj Kubelka @ University of Chile",
      "Id": "z2nxy3lfx4347omt2488888888888888",
      "Affiliation": "University of Chile"
    },
    {
      "Name": "Alexandre Bergel",
      "Key": "Alexandre Bergel @ undefined",
      "Id": "x317x4y51am15113ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Romain Robbes",
      "Key": "Romain Robbes @ undefined",
      "Id": "543x24as4xx16ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Roxane Koitz",
      "Key": "Roxane Koitz @ Graz University of Technology",
      "Id": "z32h37fg2qx4347omv14348888888888",
      "Affiliation": "Graz University of Technology"
    },
    {
      "Name": "Wolfgang Slany",
      "Key": "Wolfgang Slany @ Institute of Software Technology, Graz University of Technology\t",
      "Id": "zyrxti54srx4sw33lwr445ro24q88888",
      "Affiliation": "Institute of Software Technology, Graz University of Technology\t"
    },
    {
      "Name": "Jean Michel Rouly",
      "Key": "Jean Michel Rouly @ George Mason University",
      "Id": "71h11nx4pft41h24j335488888888888",
      "Affiliation": "George Mason University"
    },
    {
      "Name": "Jonathan Orbeck",
      "Key": "Jonathan Orbeck @ University of Alabama",
      "Id": "9141i2ynfx4347omtx13888888888888",
      "Affiliation": "University of Alabama"
    },
    {
      "Name": "Eugene Syriani",
      "Key": "Eugene Syriani @ University of Oslo",
      "Id": "912j613fj3354p2i4688888888888888",
      "Affiliation": "University of Oslo"
    },
    {
      "Name": "Christian Doerner",
      "Key": "Christian Doerner @ Senacor Technologies AG",
      "Id": "6361ou32ofv12ov14323fx8888888888",
      "Affiliation": "Senacor Technologies AG"
    },
    {
      "Name": "Andrew Faulring",
      "Key": "Andrew Faulring @ Carnegie Mellon University\t",
      "Id": "734g343mfs411h23ox4347l888888888",
      "Affiliation": "Carnegie Mellon University\t"
    },
    {
      "Name": "Brad Myers",
      "Key": "Brad Myers @ Carnegie Mellon University",
      "Id": "8xh45fg222mu34j33548888888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Gabri\u00ebl Konat",
      "Key": "Gabri\u00ebl Konat @ Delft University of Technology",
      "Id": "626nw1pfs2px4347omv1434888888888",
      "Affiliation": "Delft University of Technology"
    },
    {
      "Name": "Vlad Vergu",
      "Key": "Vlad Vergu @ TU Delft",
      "Id": "73xyat1516alastan131688888888888",
      "Affiliation": "TU Delft"
    },
    {
      "Name": "Guido Wachsmuth",
      "Key": "Guido Wachsmuth @ Delft University of Technology",
      "Id": "undefined1ov146nfs2px4347omv143488888888",
      "Affiliation": "Delft University of Technology"
    },
    {
      "Name": "Eelco Visser",
      "Key": "Eelco Visser @ Delft University of Technology",
      "Id": "61ow63fg23j3354p2jy3338888888888",
      "Affiliation": "Delft University of Technology"
    },
    {
      "Name": "Kevin Baldor",
      "Key": "Kevin Baldor @ undefined",
      "Id": "31724amx3y45ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Jianwei Niu",
      "Key": "Jianwei Niu @ undefined",
      "Id": "22x4712aq26ala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Chenglong Wang",
      "Key": "Chenglong Wang @ undefined",
      "Id": "y21413441atx41ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Cyrus Omar",
      "Key": "Cyrus Omar @ undefined",
      "Id": "y8566ar3x5ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Jonathan Aldrich",
      "Key": "Jonathan Aldrich @ Carnegie Mellon University",
      "Id": "9141f231fg222mu34j33548888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Tomas Tauber",
      "Key": "Tomas Tauber @ undefined",
      "Id": "643x6asx6x15ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Matthias Grimmer",
      "Key": "Matthias Grimmer @ undefined",
      "Id": "3x6622x6ao523315ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Jeremy Gibbons",
      "Key": "Jeremy Gibbons @ University of Oxford, UK",
      "Id": "736g124fj3354p2i44ojx88888888888",
      "Affiliation": "University of Oxford, UK"
    },
    {
      "Name": "Paolo G. Giarrusso",
      "Key": "Paolo G. Giarrusso @ undefined",
      "Id": "4x434aofao2x556664ala64y11241y88",
      "Affiliation": "undefined"
    },
    {
      "Name": "Klaus Ostermann",
      "Key": "Klaus Ostermann @ University of Marburg",
      "Id": "83ox341ofx4347omt264888888888888",
      "Affiliation": "University of Marburg"
    },
    {
      "Name": "Tillmann Rendel",
      "Key": "Tillmann Rendel @ University of Marburg",
      "Id": "undefined314j2ynfx4347omt264888888888888",
      "Affiliation": "University of Marburg"
    },
    {
      "Name": "Eric Walkingshaw",
      "Key": "Eric Walkingshaw @ University of Marburg",
      "Id": "81j12233fj3354p2h233888888888888",
      "Affiliation": "University of Marburg"
    },
    {
      "Name": "William Jernigan",
      "Key": "William Jernigan @ Oregon State University",
      "Id": "z31nt421fi33oy2mx434788888888888",
      "Affiliation": "Oregon State University"
    },
    {
      "Name": "Dhaon  Akshat",
      "Key": "Dhaon  Akshat @ undefined",
      "Id": "y2x44aal362x6ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Rem Collier",
      "Key": "Rem Collier @ undefined",
      "Id": "513am433215ala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Alessandro Ricci",
      "Key": "Alessandro Ricci @ University of Bologna, Italy",
      "Id": "73224j11fj3354p2g331cw1888888888",
      "Affiliation": "University of Bologna, Italy"
    },
    {
      "Name": "Phillip  Kuang",
      "Key": "Phillip  Kuang @ undefined",
      "Id": "4223324aap6x41ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "John  Field",
      "Key": "John  Field @ undefined",
      "Id": "2424aan213yala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Carlos Varela",
      "Key": "Carlos Varela @ Rensselaer Polytechnic Institute, US",
      "Id": "545j22lfv4313i37y31h4463cs888888",
      "Affiliation": "Rensselaer Polytechnic Institute, US"
    },
    {
      "Name": "David  Harel",
      "Key": "David  Harel @ undefined",
      "Id": "yx72yaaox513ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Guy  Katz",
      "Key": "Guy  Katz @ undefined",
      "Id": "168aapx68ala64y11241y88888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Nicholas Matsakis",
      "Key": "Nicholas Matsakis @ Mozilla Corporation",
      "Id": "8132h222ofw53lu54236888888888888",
      "Affiliation": "Mozilla Corporation"
    },
    {
      "Name": "David Herman",
      "Key": "David Herman @ undefined",
      "Id": "yx72yao153x4ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Dmitry Lomov",
      "Key": "Dmitry Lomov @ undefined",
      "Id": "y32658ap4347ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Oscar Calla\u00fa",
      "Key": "Oscar Calla\u00fa @ University of Chile",
      "Id": "zxos34fj3354p2g22888888888888888",
      "Affiliation": "University of Chile"
    },
    {
      "Name": "Romain Robbes",
      "Key": "Romain Robbes @ undefined",
      "Id": "543x24as4xx16ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "\u00c9ric Tanter",
      "Key": "\u00c9ric Tanter @ University of Chile",
      "Id": "z1j13ofx4347omt24888888888888888",
      "Affiliation": "University of Chile"
    },
    {
      "Name": "David R\u00f6thlisberger",
      "Key": "David R\u00f6thlisberger @ undefined",
      "Id": "yx72yasz62326x15115ala64y11241y8",
      "Affiliation": "undefined"
    },
    {
      "Name": "Alexandre Bergel",
      "Key": "Alexandre Bergel @ undefined",
      "Id": "x317x4y51am15113ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Bastian Steinert",
      "Key": "Bastian Steinert @ Hasso Plattner Institute",
      "Id": "561oy126fh25i162ov64648888888888",
      "Affiliation": "Hasso Plattner Institute"
    },
    {
      "Name": "Lauritz Thamsen",
      "Key": "Lauritz Thamsen @ undefined",
      "Id": "3x65268as2x3614ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Tim Felgentreff",
      "Key": "Tim Felgentreff @ Hasso-Plattner-Institute, Potsdam",
      "Id": "undefinednt2261mfs6qw253j4463cw6x6888888",
      "Affiliation": "Hasso-Plattner-Institute, Potsdam"
    },
    {
      "Name": "Robert Hirschfeld",
      "Key": "Robert Hirschfeld @ Hasso-Plattner-Institute, Potsdam",
      "Id": "zy6h3312mfs6qw253j4463cw6x688888",
      "Affiliation": "Hasso-Plattner-Institute, Potsdam"
    },
    {
      "Name": "Dustin Rhodes",
      "Key": "Dustin Rhodes @ undefined",
      "Id": "y66624as24y16ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Tim Disney",
      "Key": "Tim Disney @ undefined",
      "Id": "623an26418ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Cormac Flanagan",
      "Key": "Cormac Flanagan @ UC Santa Cruz",
      "Id": "y453xyan3x4x1x4alatmasx46xam5688",
      "Affiliation": "UC Santa Cruz"
    },
    {
      "Name": "Bernd Bruegge",
      "Key": "Bernd Bruegge @ Technische Universit\u00e4t M\u00fcnchen",
      "Id": "64mv31mfv1331j33548h712888888888",
      "Affiliation": "Technische Universit\u00e4t M\u00fcnchen"
    },
    {
      "Name": "Nikolai Tillmann",
      "Key": "Nikolai Tillmann @ Microsoft Research",
      "Id": "831nw314fh1453j3y258888888888888",
      "Affiliation": "Microsoft Research"
    },
    {
      "Name": "Lourival Vieira Neto",
      "Key": "Lourival Vieira Neto @ The NetBSD Foundation",
      "Id": "9641j13lu5fj1i3pgv5x448888888888",
      "Affiliation": "The NetBSD Foundation"
    },
    {
      "Name": "Roberto Ierusalimschy",
      "Key": "Roberto Ierusalimschy @ PUC-Rio",
      "Id": "54x1564ao1566x3236y28alartmes248",
      "Affiliation": "PUC-Rio"
    },
    {
      "Name": "Ana L\u00facia de Moura",
      "Key": "Ana L\u00facia de Moura @ undefined",
      "Id": "x4xapzy2xay1aq465xala64y11241y88",
      "Affiliation": "undefined"
    },
    {
      "Name": "Marc Balmer",
      "Key": "Marc Balmer @ undefined",
      "Id": "3x5yamx3315ala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Stefan Hanenberg",
      "Key": "Stefan Hanenberg @ University of Duisburg-Essen",
      "Id": "z11h12y3fj3354p2g426pv3688888888",
      "Affiliation": "University of Duisburg-Essen"
    },
    {
      "Name": "Ganesha  Upadhyaya",
      "Key": "Ganesha  Upadhyaya @ undefined",
      "Id": "1x4162xaat4xy28x8xala64y11241y88",
      "Affiliation": "undefined"
    },
    {
      "Name": "Hridesh Rajan",
      "Key": "Hridesh Rajan @ undefined",
      "Id": "252y162asx2x4ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Dominik  Charousset",
      "Key": "Dominik  Charousset @ undefined",
      "Id": "y432423aam2x5466616ala64y11241y8",
      "Affiliation": "undefined"
    },
    {
      "Name": "Raphael  Hiesgen",
      "Key": "Raphael  Hiesgen @ undefined",
      "Id": "5x42x13aao216114ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Thomas  Schmidt",
      "Key": "Thomas  Schmidt @ undefined",
      "Id": "6243x6aasy232y6ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Brynjar  Magnusson",
      "Key": "Brynjar  Magnusson @ undefined",
      "Id": "x5842x5aaqx1466644ala64y11241y88",
      "Affiliation": "undefined"
    },
    {
      "Name": "Ehsan Khamespanah",
      "Key": "Ehsan Khamespanah @ undefined",
      "Id": "126x4ap2x3164x4x2ala64y11241y888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Marjan Sirjani",
      "Key": "Marjan Sirjani @ undefined",
      "Id": "3x52x4as252x42ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Ramtin  Khosravi",
      "Key": "Ramtin  Khosravi @ undefined",
      "Id": "5x3624aap2465x72ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Ehsan Khamespanah",
      "Key": "Ehsan Khamespanah @ undefined",
      "Id": "126x4ap2x3164x4x2ala64y11241y888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Ramtin  Khosravi",
      "Key": "Ramtin  Khosravi @ undefined",
      "Id": "5x3624aap2465x72ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Marjan Sirjani",
      "Key": "Marjan Sirjani @ undefined",
      "Id": "3x52x4as252x42ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Helena Kotthaus",
      "Key": "Helena Kotthaus @ Department of Computer Science 12, TU Dortmund University",
      "Id": "91o43dw32tm44p11dhk54o4458888888",
      "Affiliation": "Department of Computer Science 12, TU Dortmund University"
    },
    {
      "Name": "Ingo Korb",
      "Key": "Ingo Korb @ undefined",
      "Id": "2414ap45xala64y11241y88888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Michael Engel",
      "Key": "Michael Engel @ undefined",
      "Id": "32y2x13an4113ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Peter Marwedel",
      "Key": "Peter Marwedel @ undefined",
      "Id": "41615aqx571y13ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Bert Freudenberg",
      "Key": "Bert Freudenberg @ undefined",
      "Id": "x156an516y14x151ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Dan Ingalls",
      "Key": "Dan Ingalls @ undefined",
      "Id": "yx4ao41x336ala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Tim Felgentreff",
      "Key": "Tim Felgentreff @ Hasso-Plattner-Institute, Potsdam",
      "Id": "undefinednt2261mfs6qw253j4463cw6x6888888",
      "Affiliation": "Hasso-Plattner-Institute, Potsdam"
    },
    {
      "Name": "Tobias Pape",
      "Key": "Tobias Pape @ Hasso-Plattner-Institute, Potsdam",
      "Id": "z12i2mfs6qw253j4463cw6x688888888",
      "Affiliation": "Hasso-Plattner-Institute, Potsdam"
    },
    {
      "Name": "Robert Hirschfeld",
      "Key": "Robert Hirschfeld @ Hasso-Plattner-Institute, Potsdam",
      "Id": "zy6h3312mfs6qw253j4463cw6x688888",
      "Affiliation": "Hasso-Plattner-Institute, Potsdam"
    },
    {
      "Name": "Martin Aigner",
      "Key": "Martin Aigner @ University of Salzburg",
      "Id": "763f22ofx4347omv6338888888888888",
      "Affiliation": "University of Salzburg"
    },
    {
      "Name": "Thomas H\u00fctter",
      "Key": "Thomas H\u00fctter @ undefined",
      "Id": "6243x6aoz6615ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Christoph Kirsch",
      "Key": "Christoph Kirsch @ undefined",
      "Id": "y25266442ap256y2ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Alexander Miller",
      "Key": "Alexander Miller @ undefined",
      "Id": "x317x4y15aq23315ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Hannes Payer",
      "Key": "Hannes Payer @ undefined",
      "Id": "2x4416arx815ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Mario Preishuber",
      "Key": "Mario Preishuber @ undefined",
      "Id": "3x524ar512626x15ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Faiz Khan",
      "Key": "Faiz Khan @ undefined",
      "Id": "1x28ap2x4ala64y11241y88888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Vincent Foley-Bourgon",
      "Key": "Vincent Foley-Bourgon @ undefined",
      "Id": "z22pv2su63of5y124888888888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Sujay Kathrotia",
      "Key": "Sujay Kathrotia @ undefined",
      "Id": "662x8apx625462xala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Erick Lavoie",
      "Key": "Erick Lavoie @ McGill University",
      "Id": "152y3apx7421alaqyo233at427156268",
      "Affiliation": "McGill University"
    },
    {
      "Name": "Laurie Hendren",
      "Key": "Laurie Hendren @ McGill University",
      "Id": "761h232fht2nx4347888888888888888",
      "Affiliation": "McGill University"
    },
    {
      "Name": "James Skene",
      "Key": "James Skene @ Auckland University of Technology",
      "Id": "62ow2mfv112j3354p2jy333888888888",
      "Affiliation": "Auckland University of Technology"
    },
    {
      "Name": "Rapha\u00ebl Proust",
      "Key": "Rapha\u00ebl Proust @ University of Cambridge",
      "Id": "834nx56fj3354p2g1211888888888888",
      "Affiliation": "University of Cambridge"
    },
    {
      "Name": "Alan Mycroft",
      "Key": "Alan Mycroft @ University of Cambridge",
      "Id": "71h443fj3354p2g12118888888888888",
      "Affiliation": "University of Cambridge"
    },
    {
      "Name": "Boris Spasojevic",
      "Key": "Boris Spasojevic @ University of Bern, Switzerland",
      "Id": "73ox2331fj3354p2g3qj473128888888",
      "Affiliation": "University of Bern, Switzerland"
    },
    {
      "Name": "Mircea Lungu",
      "Key": "Mircea Lungu @ University of Bern, Switzerland",
      "Id": "82yh54fj3354p2g3qj47312888888888",
      "Affiliation": "University of Bern, Switzerland"
    },
    {
      "Name": "Oscar Nierstrasz",
      "Key": "Oscar Nierstrasz @ University of Bern",
      "Id": "zxov3627fj3354p2g368888888888888",
      "Affiliation": "University of Bern"
    },
    {
      "Name": "David Ungar",
      "Key": "David Ungar @ IBM Research",
      "Id": "yx72yat41x5alaomqas161x5y2888888",
      "Affiliation": "IBM Research"
    },
    {
      "Name": "Harold Ossher",
      "Key": "Harold Ossher @ IBM Research",
      "Id": "2x543yar66215alaomqas161x5y28888",
      "Affiliation": "IBM Research"
    },
    {
      "Name": "Doug Kimelman",
      "Key": "Doug Kimelman @ IBM Research",
      "Id": "y461ap23133x4alaomqas161x5y28888",
      "Affiliation": "IBM Research"
    },
    {
      "Name": "Zhongxian Gu",
      "Key": "Zhongxian Gu @ UC Davis",
      "Id": "8244172x4ao6alatmanx726888888888",
      "Affiliation": "UC Davis"
    },
    {
      "Name": "Drew Schleck",
      "Key": "Drew Schleck @ UC Davis",
      "Id": "y517asy231y3alatmanx726888888888",
      "Affiliation": "UC Davis"
    },
    {
      "Name": "Earl Barr",
      "Key": "Earl Barr @ University College London",
      "Id": "64g2ofx4347g321h4268888888888888",
      "Affiliation": "University College London"
    },
    {
      "Name": "Zhendong Su",
      "Key": "Zhendong Su @ University of California, Davis",
      "Id": "z222jpfx4347oms2241cs47888888888",
      "Affiliation": "University of California, Davis"
    },
    {
      "Name": "Bob Reynders",
      "Key": "Bob Reynders @ iMinds - Distrinet, KU Leuven",
      "Id": "7lv6y5fnv2oct632rhju628888888888",
      "Affiliation": "iMinds - Distrinet, KU Leuven"
    },
    {
      "Name": "Dominique Devriese",
      "Key": "Dominique Devriese @ iMinds - Distrinet, KU Leuven",
      "Id": "8336ms613fnv2oct632rhju628888888",
      "Affiliation": "iMinds - Distrinet, KU Leuven"
    },
    {
      "Name": "Frank Piessens",
      "Key": "Frank Piessens @ iMinds - Distrinet, KU Leuven",
      "Id": "91nv334fnv2oct632rhju62888888888",
      "Affiliation": "iMinds - Distrinet, KU Leuven"
    },
    {
      "Name": "Eelco Visser",
      "Key": "Eelco Visser @ Delft University of Technology",
      "Id": "61ow63fg23j3354p2jy3338888888888",
      "Affiliation": "Delft University of Technology"
    },
    {
      "Name": "Guido Wachsmuth",
      "Key": "Guido Wachsmuth @ Delft University of Technology",
      "Id": "undefined1ov146nfs2px4347omv143488888888",
      "Affiliation": "Delft University of Technology"
    },
    {
      "Name": "Andrew Tolmach",
      "Key": "Andrew Tolmach @ Portland State University",
      "Id": "734j311fi441my2mx434788888888888",
      "Affiliation": "Portland State University"
    },
    {
      "Name": "Pierre Neron",
      "Key": "Pierre Neron @ TU Delft",
      "Id": "421551aq1544alastan1316888888888",
      "Affiliation": "TU Delft"
    },
    {
      "Name": "Vlad Vergu",
      "Key": "Vlad Vergu @ TU Delft",
      "Id": "73xyat1516alastan131688888888888",
      "Affiliation": "TU Delft"
    },
    {
      "Name": "Augusto Passalaqua",
      "Key": "Augusto Passalaqua @ TU Delft",
      "Id": "x616664arx66x3x56xalastan1316888",
      "Affiliation": "TU Delft"
    },
    {
      "Name": "Gabri\u00ebl Konat",
      "Key": "Gabri\u00ebl Konat @ Delft University of Technology",
      "Id": "626nw1pfs2px4347omv1434888888888",
      "Affiliation": "Delft University of Technology"
    },
    {
      "Name": "Laure Philips",
      "Key": "Laure Philips @ Software Languages Lab",
      "Id": "76mv23ofx333h14y3hx8888888888888",
      "Affiliation": "Software Languages Lab"
    },
    {
      "Name": "Coen De Roover",
      "Key": "Coen De Roover @ Software Languages Lab, Software Engineering Laboratory",
      "Id": "9no5sj34n12svh34m223n13688888888",
      "Affiliation": "Software Languages Lab, Software Engineering Laboratory"
    },
    {
      "Name": "Tom Van Cutsem",
      "Key": "Tom Van Cutsem @ Alcatel-Lucent Bell Labs",
      "Id": "znvov62ff122k32ps3hx788888888888",
      "Affiliation": "Alcatel-Lucent Bell Labs"
    },
    {
      "Name": "Wolfgang  De Meuter",
      "Key": "Wolfgang  De Meuter @ Vrije Universiteit Brussel",
      "Id": "z2y2ash33ofy2mx43434g66288888888",
      "Affiliation": "Vrije Universiteit Brussel"
    },
    {
      "Name": "Yann Orlarey",
      "Key": "Yann Orlarey @ undefined",
      "Id": "8x44ar53x518ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Dominique Fober",
      "Key": "Dominique Fober @ undefined",
      "Id": "y43242561an4x15ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "St\u00e9phane Letz",
      "Key": "St\u00e9phane Letz @ undefined",
      "Id": "66z42x41ap168ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Albert Gr\u00e4f",
      "Key": "Albert Gr\u00e4f @ undefined",
      "Id": "x3x156ao5z1ala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Pierre Jouvelot",
      "Key": "Pierre Jouvelot @ undefined",
      "Id": "421551ap4671346ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Josh Bloch",
      "Key": "Josh Bloch @ undefined",
      "Id": "2462am34y2ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Christopher Hall",
      "Key": "Christopher Hall @ undefined",
      "Id": "y2526644215aox33ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Yadran Eterovic",
      "Key": "Yadran Eterovic @ Pontificia Universidad Catlica de Chile",
      "Id": "931g344lfw5111j3351xg22xmmt24888",
      "Affiliation": "Pontificia Universidad Catlica de Chile"
    },
    {
      "Name": "Craig Anslow",
      "Key": "Craig Anslow @ University of Calgary",
      "Id": "81mt46fj3354p2g1y688888888888888",
      "Affiliation": "University of Calgary"
    },
    {
      "Name": "Frank Maurer",
      "Key": "Frank Maurer @ undefined",
      "Id": "15x43aqx6515ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Gul Agha",
      "Key": "Gul Agha @ University of Illinois at Urbana-Champaign",
      "Id": "undefinednsyfj3354p2h333o2j21ot122688888",
      "Affiliation": "University of Illinois at Urbana-Champaign"
    },
    {
      "Name": "Shams Imam",
      "Key": "Shams Imam @ Rice University",
      "Id": "62x36ao3x3alas2y1at4271562688888",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Vivek Sarkar",
      "Key": "Vivek Sarkar @ Rice University",
      "Id": "72713asx53x5alas2y1at42715626888",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Ulysse Beaugnon",
      "Key": "Ulysse Beaugnon @ undefined",
      "Id": "638661am1x61444ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Riyadh Baghdadi",
      "Key": "Riyadh Baghdadi @ undefined",
      "Id": "528xy2amx12yxy2ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Mohammed Javed Absar",
      "Key": "Mohammed Javed Absar @ undefined",
      "Id": "342x331yapx71yalx6x5ala64y11241y",
      "Affiliation": "undefined"
    },
    {
      "Name": "Adam Betts",
      "Key": "Adam Betts @ undefined",
      "Id": "xyx3am1666ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Albert Cohen",
      "Key": "Albert Cohen @ INRIA",
      "Id": "x3x156am4214alaoqsol888888888888",
      "Affiliation": "INRIA"
    },
    {
      "Name": "Alastair Donaldson",
      "Key": "Alastair Donaldson @ undefined",
      "Id": "x3x66x25an44x3y644ala64y11241y88",
      "Affiliation": "undefined"
    },
    {
      "Name": "Tobias Grosser",
      "Key": "Tobias Grosser @ undefined",
      "Id": "64x2x6ao546615ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Sven van Haastregt",
      "Key": "Sven van Haastregt @ undefined",
      "Id": "6714a7x4aoxx665116ala64y11241y88",
      "Affiliation": "undefined"
    },
    {
      "Name": "Yabin Hu",
      "Key": "Yabin Hu @ undefined",
      "Id": "8xx24ao6ala64y11241y888888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Jeroen Ketema",
      "Key": "Jeroen Ketema @ undefined",
      "Id": "215414ap1613xala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Alexey Kravets",
      "Key": "Alexey Kravets @ undefined",
      "Id": "x31718ap5x7166ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Anton Lokmotov",
      "Key": "Anton Lokmotov @ undefined",
      "Id": "x4644ap4334647ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Sven Verdoolaege",
      "Key": "Sven Verdoolaege @ undefined",
      "Id": "6714at15y443x111ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "David Mohr",
      "Key": "David Mohr @ undefined",
      "Id": "yx72yaq425ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Darko Stefanovic",
      "Key": "Darko Stefanovic @ undefined",
      "Id": "yx534as611x4472yala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Matthew Fernandez",
      "Key": "Matthew Fernandez @ undefined",
      "Id": "3x66217an154x4y18ala64y11241y888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Rebekah Leslie-Hurd",
      "Key": "Rebekah Leslie-Hurd @ undefined",
      "Id": "51x13x2ap16321eo65yala64y11241y8",
      "Affiliation": "undefined"
    },
    {
      "Name": "Mehdi Bagherzadeh",
      "Key": "Mehdi Bagherzadeh @ Iowa State University",
      "Id": "81nr133ynfv3j23j3354888888888888",
      "Affiliation": "Iowa State University"
    },
    {
      "Name": "Hridesh Rajan",
      "Key": "Hridesh Rajan @ undefined",
      "Id": "252y162asx2x4ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Luc Bl\u00e4ser",
      "Key": "Luc Bl\u00e4ser @ undefined",
      "Id": "36yam3z615ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Shams Imam",
      "Key": "Shams Imam @ Rice University",
      "Id": "62x36ao3x3alas2y1at4271562688888",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Vivek Sarkar",
      "Key": "Vivek Sarkar @ Rice University",
      "Id": "72713asx53x5alas2y1at42715626888",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Xinghui Zhao",
      "Key": "Xinghui Zhao @ University of Washington",
      "Id": "z24nx2fj3354p2j22256888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Hua  Zhang",
      "Key": "Hua  Zhang @ undefined",
      "Id": "26xaav2x41ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Nadeem Jamali",
      "Key": "Nadeem Jamali @ undefined",
      "Id": "4xy113apx3x32ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Jakub Gemrot",
      "Key": "Jakub Gemrot @ Faculty of Mathematics and Physics, Charles University in Prague",
      "Id": "9sw5du5un212rr12lu3q445sp2688888",
      "Affiliation": "Faculty of Mathematics and Physics, Charles University in Prague"
    },
    {
      "Name": "Martin \u010cern\u00fd",
      "Key": "Martin \u010cern\u00fd @ Faculty of Mathematics and Physics, Charles University in Prague",
      "Id": "z4t6du5un212rr12lu3q445sp2688888",
      "Affiliation": "Faculty of Mathematics and Physics, Charles University in Prague"
    },
    {
      "Name": "Cyril Brom",
      "Key": "Cyril Brom @ Faculty of Mathematics and Physics, Charles University in Prague",
      "Id": "zrxnm3urx22s1o5tm2sy44tp25888888",
      "Affiliation": "Faculty of Mathematics and Physics, Charles University in Prague"
    },
    {
      "Name": "Roxane Koitz",
      "Key": "Roxane Koitz @ Graz University of Technology",
      "Id": "z32h37fg2qx4347omv14348888888888",
      "Affiliation": "Graz University of Technology"
    },
    {
      "Name": "Wolfgang Slany",
      "Key": "Wolfgang Slany @ Institute of Software Technology, Graz University of Technology\t",
      "Id": "zyrxti54srx4sw33lwr445ro24q88888",
      "Affiliation": "Institute of Software Technology, Graz University of Technology\t"
    },
    {
      "Name": "Austin Cory Bart",
      "Key": "Austin Cory Bart @ Virginia Tech",
      "Id": "x66624am458amx56alat251242xas1y2",
      "Affiliation": "Virginia Tech"
    },
    {
      "Name": "Jason Riddle",
      "Key": "Jason Riddle @ Virginia Tech",
      "Id": "2x644as2yy31alat251242xas1y28888",
      "Affiliation": "Virginia Tech"
    },
    {
      "Name": "Omar Saleem",
      "Key": "Omar Saleem @ Virginia Tech",
      "Id": "43x5asx3113alat251242xas1y288888",
      "Affiliation": "Virginia Tech"
    },
    {
      "Name": "Bushra Chowdhury",
      "Key": "Bushra Chowdhury @ Virginia Tech",
      "Id": "x6625xam247y2658alat251242xas1y2",
      "Affiliation": "Virginia Tech"
    },
    {
      "Name": "Eli Tilevich",
      "Key": "Eli Tilevich @ Virginia Tech",
      "Id": "132as23172y2alat251242xas1y28888",
      "Affiliation": "Virginia Tech"
    },
    {
      "Name": "Cliff Shaffer",
      "Key": "Cliff Shaffer @ Virginia Tech",
      "Id": "y3211as2x1115alat251242xas1y2888",
      "Affiliation": "Virginia Tech"
    },
    {
      "Name": "Dennis Kafura",
      "Key": "Dennis Kafura @ Virginia Tech",
      "Id": "y14426apx165xalat251242xas1y2888",
      "Affiliation": "Virginia Tech"
    },
    {
      "Name": "Michael Lee",
      "Key": "Michael Lee @ University of Washington",
      "Id": "81ynumfx4347omv33348888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Caitlin Sadowski",
      "Key": "Caitlin Sadowski @ Google",
      "Id": "yx26324asxy47632alao441318888888",
      "Affiliation": "Google"
    },
    {
      "Name": "Jaeheon  Yi",
      "Key": "Jaeheon  Yi @ Google",
      "Id": "2x12144aau2alao44131888888888888",
      "Affiliation": "Google"
    },
    {
      "Name": "Joel Galenson",
      "Key": "Joel Galenson @ University of California, Berkeley",
      "Id": "92g125ofx4347oms2241cs4248888888",
      "Affiliation": "University of California, Berkeley"
    },
    {
      "Name": "Cindy Rubio-Gonzalez",
      "Key": "Cindy Rubio-Gonzalez @ University of California, Berkeley",
      "Id": "72py1qv614fj3354p2g1143ng3228888",
      "Affiliation": "University of California, Berkeley"
    },
    {
      "Name": "Sarah Chasins",
      "Key": "Sarah Chasins @ University of California, Berkeley",
      "Id": "82nt23ofx4347oms2241cs4248888888",
      "Affiliation": "University of California, Berkeley"
    },
    {
      "Name": "Liang Gong",
      "Key": "Liang Gong @ University of California, Berkeley",
      "Id": "81mv2fj3354p2g1143ng322888888888",
      "Affiliation": "University of California, Berkeley"
    },
    {
      "Name": "Adam Carter",
      "Key": "Adam Carter @ Washington State University",
      "Id": "51g23ofv3334j23j3354888888888888",
      "Affiliation": "Washington State University"
    },
    {
      "Name": "Christopher Hundhausen",
      "Key": "Christopher Hundhausen @ Washington State University",
      "Id": "63641ow2y62fj2225oy2mx4347888888",
      "Affiliation": "Washington State University"
    },
    {
      "Name": "Michael Vitousek",
      "Key": "Michael Vitousek @ undefined",
      "Id": "32y2x13at2646613ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Andrew Kent",
      "Key": "Andrew Kent @ undefined",
      "Id": "x4y517ap146ala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Jeremy Siek",
      "Key": "Jeremy Siek @ undefined",
      "Id": "215138as213ala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Jim Baker",
      "Key": "Jim Baker @ undefined",
      "Id": "223amx315ala64y11241y88888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "J. Ian Johnson",
      "Key": "J. Ian Johnson @ Northeastern University",
      "Id": "vh1h344fi44y63ox4347888888888888",
      "Affiliation": "Northeastern University"
    },
    {
      "Name": "David Van Horn",
      "Key": "David Van Horn @ undefined",
      "Id": "yx72yatx4ao454ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Tim Disney",
      "Key": "Tim Disney @ undefined",
      "Id": "623an26418ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Nathan Faubion",
      "Key": "Nathan Faubion @ undefined",
      "Id": "4x62x4anx6x244ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "David Herman",
      "Key": "David Herman @ undefined",
      "Id": "yx72yao153x4ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Cormac Flanagan",
      "Key": "Cormac Flanagan @ UC Santa Cruz",
      "Id": "y453xyan3x4x1x4alatmasx46xam5688",
      "Affiliation": "UC Santa Cruz"
    },
    {
      "Name": "T. Stephen  Strickland",
      "Key": "T. Stephen  Strickland @ Brown University",
      "Id": "xj332ay3112fg45j3354888888888888",
      "Affiliation": "Brown University"
    },
    {
      "Name": "Brianna M. Ren",
      "Key": "Brianna M. Ren @ undefined",
      "Id": "x52x44xaqfas14ala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Jeffrey S. Foster",
      "Key": "Jeffrey S. Foster @ undefined",
      "Id": "2111518asfan46615ala64y11241y888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Brian Eddy",
      "Key": "Brian Eddy @ undefined",
      "Id": "x52x4anyy8ala64y11241y8888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Frank  Schlimbach",
      "Key": "Frank  Schlimbach @ undefined",
      "Id": "15x43aasy2323xxy2ala64y11241y888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Takanobu  Baba",
      "Key": "Takanobu  Baba @ undefined",
      "Id": "6x3x44x6aamxxxala64y11241y888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Zhen Li",
      "Key": "Zhen Li @ undefined",
      "Id": "8214ap2ala64y11241y8888888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Boyana Norris",
      "Key": "Boyana Norris @ undefined",
      "Id": "x48x4xaq45526ala64y11241y8888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Michael Pradel",
      "Key": "Michael Pradel @ University of California, Berkeley, USA",
      "Id": "81ynxx2fj3354p2g1143ng322sjp8888",
      "Affiliation": "University of California, Berkeley, USA"
    },
    {
      "Name": "Fernando Castor",
      "Key": "Fernando Castor @ UFPE",
      "Id": "1154x4y4amx6645alatnrn8888888888",
      "Affiliation": "UFPE"
    },
    {
      "Name": "Christina Peterson",
      "Key": "Christina Peterson @ undefined",
      "Id": "y2526624xar1615644ala64y11241y88",
      "Affiliation": "undefined"
    },
    {
      "Name": "Miguel  Areias ",
      "Key": "Miguel  Areias  @ undefined",
      "Id": "321613aal512x6aala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Christopher Earl",
      "Key": "Christopher Earl @ undefined",
      "Id": "y2526644215anx53ala64y11241y8888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Robert Dietrich",
      "Key": "Robert Dietrich @ undefined",
      "Id": "54x156an21652y2ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Jeff Carver",
      "Key": "Jeff Carver @ University of Alabama",
      "Id": "71g23ofx4347omtx1388888888888888",
      "Affiliation": "University of Alabama"
    },
    {
      "Name": "Olaf Neugebauer",
      "Key": "Olaf Neugebauer @ undefined",
      "Id": "43x1aq1611xx615ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Harold Ossher",
      "Key": "Harold Ossher @ IBM Research",
      "Id": "2x543yar66215alaomqas161x5y28888",
      "Affiliation": "IBM Research"
    },
    {
      "Name": "David Ungar",
      "Key": "David Ungar @ IBM Research",
      "Id": "yx72yat41x5alaomqas161x5y2888888",
      "Affiliation": "IBM Research"
    },
    {
      "Name": "Doug Kimelman",
      "Key": "Doug Kimelman @ IBM Research",
      "Id": "y461ap23133x4alaomqas161x5y28888",
      "Affiliation": "IBM Research"
    },
    {
      "Name": "Jonathan Aldrich",
      "Key": "Jonathan Aldrich @ Carnegie Mellon University",
      "Id": "9141f231fg222mu34j33548888888888",
      "Affiliation": "Carnegie Mellon University"
    },
    {
      "Name": "Tim Wood",
      "Key": "Tim Wood @ Imperial College",
      "Id": "623at44yalao34152x3am43311188888",
      "Affiliation": "Imperial College"
    },
    {
      "Name": "Sophia Drossopoulou",
      "Key": "Sophia Drossopoulou @ Imperial College London",
      "Id": "z31g46453pfv231g321h426888888888",
      "Affiliation": "Imperial College London"
    },
    {
      "Name": "John  Boyland",
      "Key": "John  Boyland @ University of Wisconsin, Milwaukee",
      "Id": "93au51mfx4347omx344qh23418888888",
      "Affiliation": "University of Wisconsin, Milwaukee"
    },
    {
      "Name": "William Cook",
      "Key": "William Cook @ UT Austin",
      "Id": "72332x3am443alatsal6662488888888",
      "Affiliation": "UT Austin"
    },
    {
      "Name": "Crista Lopes",
      "Key": "Crista Lopes @ University of California, Irvine",
      "Id": "842h43fj3354p2g1143nh63488888888",
      "Affiliation": "University of California, Irvine"
    },
    {
      "Name": "Annie Liu",
      "Key": "Annie Liu @ Stony Brook University",
      "Id": "73mvpfy4pv4nx4347888888888888888",
      "Affiliation": "Stony Brook University"
    },
    {
      "Name": "Scott Stoller",
      "Key": "Scott Stoller @ Stony Brook University",
      "Id": "85py32ofy4pv4nx43478888888888888",
      "Affiliation": "Stony Brook University"
    },
    {
      "Name": "Bo Lin",
      "Key": "Bo Lin @ Stony Brook University",
      "Id": "x4ap24alas6448am5443at4271562688",
      "Affiliation": "Stony Brook University"
    },
    {
      "Name": "Nicholas Matsakis",
      "Key": "Nicholas Matsakis @ Mozilla Corporation",
      "Id": "8132h222ofw53lu54236888888888888",
      "Affiliation": "Mozilla Corporation"
    },
    {
      "Name": "Christian Wimmer",
      "Key": "Christian Wimmer @ Oracle Labs",
      "Id": "y252662x4at23315alar5xy31apxx688",
      "Affiliation": "Oracle Labs"
    },
    {
      "Name": "Aharon Abadi",
      "Key": "Aharon Abadi @ IBM Research",
      "Id": "x2x544alxxy2alaomqas161x5y288888",
      "Affiliation": "IBM Research"
    },
    {
      "Name": "Tiark Rompf",
      "Key": "Tiark Rompf @ Purdue & Oracle Labs",
      "Id": "undefined2nx4mfx33bi21mt2888888888888888",
      "Affiliation": "Purdue & Oracle Labs"
    },
    {
      "Name": "Nada Amin",
      "Key": "Nada Amin @ EPFL",
      "Id": "4xyxal324alanrnp8888888888888888",
      "Affiliation": "EPFL"
    },
    {
      "Name": "Manohar Jonnalagedda",
      "Key": "Manohar Jonnalagedda @ EPFL, Switzerland",
      "Id": "74yov41yyxfgpkj47312888888888888",
      "Affiliation": "EPFL, Switzerland"
    },
    {
      "Name": "Stefan Hanenberg",
      "Key": "Stefan Hanenberg @ University of Duisburg-Essen",
      "Id": "z11h12y3fj3354p2g426pv3688888888",
      "Affiliation": "University of Duisburg-Essen"
    },
    {
      "Name": "Andreas Stefik",
      "Key": "Andreas Stefik @ University of Nevada, Las Vegas ",
      "Id": "73yoy12fj3354p2i3xnh2j12q8888888",
      "Affiliation": "University of Nevada, Las Vegas "
    },
    {
      "Name": "Joe Yoder",
      "Key": "Joe Yoder @ The Refactory, Inc.",
      "Id": "241au4y15alas21as11xy6458eao4yf8",
      "Affiliation": "The Refactory, Inc."
    },
    {
      "Name": "Rodric Rabbah",
      "Key": "Rodric Rabbah @ IBM T.J. Watson Research Center",
      "Id": "z31jxxnfnhlkj25ov321g23788888888",
      "Affiliation": "IBM T.J. Watson Research Center"
    },
    {
      "Name": "Joshua Auerbach",
      "Key": "Joshua Auerbach @ IBM Research",
      "Id": "24626xal615xxy2alaomqas161x5y288",
      "Affiliation": "IBM Research"
    },
    {
      "Name": "Julia  Lawall",
      "Key": "Julia  Lawall @ LIP6",
      "Id": "2632xaapx7x33alaporh888888888888",
      "Affiliation": "LIP6"
    },
    {
      "Name": "Laurence Tratt",
      "Key": "Laurence Tratt @ King's College London",
      "Id": "762yj26fh3oou31mw248888888888888",
      "Affiliation": "King's College London"
    },
    {
      "Name": "Dan Barowy",
      "Key": "Dan Barowy @ University of Massachusetts, Amherst",
      "Id": "5or47fj3354p2h221636ct1578888888",
      "Affiliation": "University of Massachusetts, Amherst"
    },
    {
      "Name": "Dimitar Gochev",
      "Key": "Dimitar Gochev @ University of Massachusetts, Amherst",
      "Id": "732ov13fj3354p2h221636ct15788888",
      "Affiliation": "University of Massachusetts, Amherst"
    },
    {
      "Name": "Emery Berger",
      "Key": "Emery Berger @ University of Massachusetts, Amherst",
      "Id": "83ps33fj3354p2h221636ct157888888",
      "Affiliation": "University of Massachusetts, Amherst"
    },
    {
      "Name": "Linhai Song",
      "Key": "Linhai Song @ University of Wisconsin\u2013Madison",
      "Id": "831j4mfx4347omx3447t156888888888",
      "Affiliation": "University of Wisconsin\u2013Madison"
    },
    {
      "Name": "Shan Lu",
      "Key": "Shan Lu @ University of Chicago",
      "Id": "62x4ap6alat427156268a41am22yx148",
      "Affiliation": "University of Chicago"
    },
    {
      "Name": "Peng Liu",
      "Key": "Peng Liu @ Purdue University",
      "Id": "4141ap26alar65y61at4271562688888",
      "Affiliation": "Purdue University"
    },
    {
      "Name": "Omer Tripp",
      "Key": "Omer Tripp @ IBM Thomas J. Watson Research Center",
      "Id": "undefined3j34fhoj31okj25ov321g2378888888",
      "Affiliation": "IBM Thomas J. Watson Research Center"
    },
    {
      "Name": "Xiangyu Zhang",
      "Key": "Xiangyu Zhang @ Purdue University",
      "Id": "z14px1mfx33j33548888888888888888",
      "Affiliation": "Purdue University"
    },
    {
      "Name": "Zvonimir Pavlinovic",
      "Key": "Zvonimir Pavlinovic @ New York University",
      "Id": "z433i3244lfupy4j3354888888888888",
      "Affiliation": "New York University"
    },
    {
      "Name": "Tim King",
      "Key": "Tim King @ New York University",
      "Id": "623ap241alaq17au453at42715626888",
      "Affiliation": "New York University"
    },
    {
      "Name": "Thomas Wies",
      "Key": "Thomas Wies @ New York University",
      "Id": "undefined42j1ofupy4j33548888888888888888",
      "Affiliation": "New York University"
    },
    {
      "Name": "Nimrod Partush",
      "Key": "Nimrod Partush @ Technion",
      "Id": "42354yarx56662alas1y242448888888",
      "Affiliation": "Technion"
    },
    {
      "Name": "Eran Yahav",
      "Key": "Eran Yahav @ Technion",
      "Id": "15x4aux2x7alas1y2424488888888888",
      "Affiliation": "Technion"
    },
    {
      "Name": "Henrique Nazar\u00e9 Santos",
      "Key": "Henrique Nazar\u00e9 Santos @ UFMG",
      "Id": "21452561aqx8x5zasx4646alatnqo888",
      "Affiliation": "UFMG"
    },
    {
      "Name": "Izabela Karennina Travizani Maffra",
      "Key": "Izabela Karennina Travizani Maffra @ UFMG",
      "Id": "zx2lt343ly351nt12fjox88888888888",
      "Affiliation": "UFMG"
    },
    {
      "Name": "Willer Fernandes Santos",
      "Key": "Willer Fernandes Santos @ UFMG",
      "Id": "723315an154x4y16asx4646alatnqo88",
      "Affiliation": "UFMG"
    },
    {
      "Name": "Leonardo Barbosa Oliveira",
      "Key": "Leonardo Barbosa Oliveira @ UFMG",
      "Id": "3144x5y4amx5x46xar327125xalatnqo",
      "Affiliation": "UFMG"
    },
    {
      "Name": "Laure Gonnord",
      "Key": "Laure Gonnord @ ENS Lyon",
      "Id": "3x651ao44445yalanqsap84488888888",
      "Affiliation": "ENS Lyon"
    },
    {
      "Name": "Fernando Magno Quint\u00e3o Pereira",
      "Key": "Fernando Magno Quint\u00e3o Pereira @ UFMG",
      "Id": "6412hy4i457i312fjox8888888888888",
      "Affiliation": "UFMG"
    },
    {
      "Name": "Lucas Brutschy",
      "Key": "Lucas Brutschy @ ETH Zurich",
      "Id": "36yx6am5666y28alansoav652y288888",
      "Affiliation": "ETH Zurich"
    },
    {
      "Name": "Pietro Ferrara",
      "Key": "Pietro Ferrara @ IBM Thomas J. Watson Research Center",
      "Id": "934g322fhoj31okj25ov321g23788888",
      "Affiliation": "IBM Thomas J. Watson Research Center"
    },
    {
      "Name": "Peter  M\u00fcller",
      "Key": "Peter  M\u00fcller @ ETH Zurich",
      "Id": "41615aaqz3315alansoav652y2888888",
      "Affiliation": "ETH Zurich"
    },
    {
      "Name": "Qirun Zhang",
      "Key": "Qirun Zhang @ The Hong Kong University of Science and Technology",
      "Id": "96ox1mfwmv2h4mx4347omv12m1mv1434",
      "Affiliation": "The Hong Kong University of Science and Technology"
    },
    {
      "Name": "Xiao Xiao",
      "Key": "Xiao Xiao @ The Hong Kong University of Science and Technology",
      "Id": "z2k1ofwmv2h4mx4347omv12m1mv14348",
      "Affiliation": "The Hong Kong University of Science and Technology"
    },
    {
      "Name": "Charles Zhang",
      "Key": "Charles Zhang @ Hong Kong University of Science and Technology",
      "Id": "622ox1mfv2h4mx4347omv12m1mv14348",
      "Affiliation": "Hong Kong University of Science and Technology"
    },
    {
      "Name": "Hao Yuan",
      "Key": "Hao Yuan @ BOPU Technologies",
      "Id": "2x4au6x4alamrrtas1y2443412168888",
      "Affiliation": "BOPU Technologies"
    },
    {
      "Name": "Zhendong Su",
      "Key": "Zhendong Su @ University of California, Davis",
      "Id": "z222jpfx4347oms2241cs47888888888",
      "Affiliation": "University of California, Davis"
    },
    {
      "Name": "Brandon Holt",
      "Key": "Brandon Holt @ University of Washington",
      "Id": "812ov4fj3354p2j22256888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Preston Briggs",
      "Key": "Preston Briggs @ University of Washington",
      "Id": "z35ov23fj3354p2j2225688888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Luis Ceze",
      "Key": "Luis Ceze @ University of Washington",
      "Id": "z4g4mfx4347omv333488888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Mark Oskin",
      "Key": "Mark Oskin @ University of Washington",
      "Id": "74i43fj3354p2j222568888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Cosmin Radoi",
      "Key": "Cosmin Radoi @ University of Illinois",
      "Id": "843jx3fj3354p2h33378888888888888",
      "Affiliation": "University of Illinois"
    },
    {
      "Name": "Stephen J Fink",
      "Key": "Stephen J Fink @ IBM",
      "Id": "6614214apan243alaomq888888888888",
      "Affiliation": "IBM"
    },
    {
      "Name": "Rodric Rabbah",
      "Key": "Rodric Rabbah @ IBM T.J. Watson Research Center",
      "Id": "z31jxxnfnhlkj25ov321g23788888888",
      "Affiliation": "IBM T.J. Watson Research Center"
    },
    {
      "Name": "Manu Sridharan",
      "Key": "Manu Sridharan @ Samsung Research America",
      "Id": "75j3121fj162j3y2nt31388888888888",
      "Affiliation": "Samsung Research America"
    },
    {
      "Name": "Tian Xiao",
      "Key": "Tian Xiao @ Tsinghua University \/ Microsoft Research",
      "Id": "undefined1k1ofy313j3354pcv252pv321888888",
      "Affiliation": "Tsinghua University \/ Microsoft Research"
    },
    {
      "Name": "Zhenyu Guo",
      "Key": "Zhenyu Guo @ Microsoft Research",
      "Id": "821486ao64alaq2y546416as161x5y28",
      "Affiliation": "Microsoft Research"
    },
    {
      "Name": "Hucheng Zhou",
      "Key": "Hucheng Zhou @ Microsoft Research",
      "Id": "undefined12mx5fh1453j3y25888888888888888",
      "Affiliation": "Microsoft Research"
    },
    {
      "Name": "Jiaxing Zhang",
      "Key": "Jiaxing Zhang @ Microsoft Research",
      "Id": "833mx1mfv252pv321888888888888888",
      "Affiliation": "Microsoft Research"
    },
    {
      "Name": "Xu Zhao",
      "Key": "Xu Zhao @ University of Toronto",
      "Id": "76av2x4alat427156268a41as4544648",
      "Affiliation": "University of Toronto"
    },
    {
      "Name": "Chencheng Ye",
      "Key": "Chencheng Ye @ Huazhong University of Science and Technology",
      "Id": "6212mwfh354mx4347omv12m1mv143488",
      "Affiliation": "Huazhong University of Science and Technology"
    },
    {
      "Name": "Xi Wang",
      "Key": "Xi Wang @ MIT CSAIL",
      "Id": "72atx41alaqosamslop8888888888888",
      "Affiliation": "MIT CSAIL"
    },
    {
      "Name": "Wei Lin",
      "Key": "Wei Lin @ Microsoft Bing",
      "Id": "712ap24alaq2y546416am24188888888",
      "Affiliation": "Microsoft Bing"
    },
    {
      "Name": "Wenguang Chen",
      "Key": "Wenguang Chen @ Tsinghua University",
      "Id": "undefined232g1ofy313j3354888888888888888",
      "Affiliation": "Tsinghua University"
    },
    {
      "Name": "Lidong Zhou",
      "Key": "Lidong Zhou @ Microsoft Research",
      "Id": "32y441av246alaq2y546416as161x5y2",
      "Affiliation": "Microsoft Research"
    },
    {
      "Name": "Keval Vora",
      "Key": "Keval Vora @ University of California, Riverside",
      "Id": "73nx2fj3354p2g1143nj434y88888888",
      "Affiliation": "University of California, Riverside"
    },
    {
      "Name": "Sai Charan Koduru",
      "Key": "Sai Charan Koduru @ University of California, Riverside",
      "Id": "8nt21h26pfx4347oms2241cw35148888",
      "Affiliation": "University of California, Riverside"
    },
    {
      "Name": "Rajiv Gupta",
      "Key": "Rajiv Gupta @ UC Riverside",
      "Id": "5x227ao646xalatmas271562y1888888",
      "Affiliation": "UC Riverside"
    },
    {
      "Name": "Chun-Hung Hsiao",
      "Key": "Chun-Hung Hsiao @ University of Michigan",
      "Id": "65j5mw1ofx4347omv121888888888888",
      "Affiliation": "University of Michigan"
    },
    {
      "Name": "Michael Cafarella",
      "Key": "Michael Cafarella @ University of Michigan",
      "Id": "81ynsy33lfx4347omv12188888888888",
      "Affiliation": "University of Michigan"
    },
    {
      "Name": "Satish Narayanasamy",
      "Key": "Satish Narayanasamy @ University of Michigan",
      "Id": "843i23121pfx4347omv1218888888888",
      "Affiliation": "University of Michigan"
    },
    {
      "Name": "Michael Pradel",
      "Key": "Michael Pradel @ University of California, Berkeley, USA",
      "Id": "81ynxx2fj3354p2g1143ng322sjp8888",
      "Affiliation": "University of California, Berkeley, USA"
    },
    {
      "Name": "Parker Schuh",
      "Key": "Parker Schuh @ University of California, Berkeley",
      "Id": "743j14fj3354p2g1143ng32288888888",
      "Affiliation": "University of California, Berkeley"
    },
    {
      "Name": "George Necula",
      "Key": "George Necula @ University of California, Berkeley",
      "Id": "741iy4lfx4347oms2241cs4248888888",
      "Affiliation": "University of California, Berkeley"
    },
    {
      "Name": "Koushik Sen",
      "Key": "Koushik Sen @ University of California, Berkeley",
      "Id": "962nvofx4347oms2241cs42488888888",
      "Affiliation": "University of California, Berkeley"
    },
    {
      "Name": "Asger Feldthaus",
      "Key": "Asger Feldthaus @ Aarhus University",
      "Id": "81ot243ofr36j3354888888888888888",
      "Affiliation": "Aarhus University"
    },
    {
      "Name": "Anders M\u00f8ller",
      "Key": "Anders M\u00f8ller @ Aarhus University",
      "Id": "7y5h62ofr36j33548888888888888888",
      "Affiliation": "Aarhus University"
    },
    {
      "Name": "Esben Andreasen",
      "Key": "Esben Andreasen @ Aarhus University",
      "Id": "9yot3y3ofr36j3354888888888888888",
      "Affiliation": "Aarhus University"
    },
    {
      "Name": "Anders M\u00f8ller",
      "Key": "Anders M\u00f8ller @ Aarhus University",
      "Id": "7y5h62ofr36j33548888888888888888",
      "Affiliation": "Aarhus University"
    },
    {
      "Name": "Gustavo Pinto",
      "Key": "Gustavo Pinto @ Federal University of Pernambuco",
      "Id": "undefined63ov5ofty2nx4347omv413288888888",
      "Affiliation": "Federal University of Pernambuco"
    },
    {
      "Name": "Fernando Castor",
      "Key": "Fernando Castor @ UFPE",
      "Id": "1154x4y4amx6645alatnrn8888888888",
      "Affiliation": "UFPE"
    },
    {
      "Name": "Yu David Liu",
      "Key": "Yu David Liu @ State University of New York (SUNY) Binghamton",
      "Id": "zg31h4fj23j3354p2i4k4nkrlg311568",
      "Affiliation": "State University of New York (SUNY) Binghamton"
    },
    {
      "Name": "Sasa Misailovic",
      "Key": "Sasa Misailovic @ MIT",
      "Id": "6x6xaq26x23472yalaqos88888888888",
      "Affiliation": "MIT"
    },
    {
      "Name": "Michael Carbin",
      "Key": "Michael Carbin @ MIT",
      "Id": "32y2x13amx5x24alaqos888888888888",
      "Affiliation": "MIT"
    },
    {
      "Name": "Sara Achour",
      "Key": "Sara Achour @ MIT",
      "Id": "6x5xaly2465alaqos888888888888888",
      "Affiliation": "MIT"
    },
    {
      "Name": "Zichao Qi",
      "Key": "Zichao Qi @ MIT",
      "Id": "82y2x4ar2alaqos88888888888888888",
      "Affiliation": "MIT"
    },
    {
      "Name": "Martin Rinard",
      "Key": "Martin Rinard @ MIT",
      "Id": "3x5624as24x5yalaqos8888888888888",
      "Affiliation": "MIT"
    },
    {
      "Name": "Melanie Kambadur",
      "Key": "Melanie Kambadur @ Columbia University",
      "Id": "813mt1x6fg351lx43478888888888888",
      "Affiliation": "Columbia University"
    },
    {
      "Name": "Martha A. Kim",
      "Key": "Martha A. Kim @ Columbia University",
      "Id": "76yfcvnfu411j3354888888888888888",
      "Affiliation": "Columbia University"
    },
    {
      "Name": "Florian David",
      "Key": "Florian David @ LIP6-UPMC\/INRIA",
      "Id": "13452x4anx72yalaporhetrqmfoqsol8",
      "Affiliation": "LIP6-UPMC\/INRIA"
    },
    {
      "Name": "Ga\u00ebl Thomas",
      "Key": "Ga\u00ebl Thomas @ LIP6-UPMC\/INRIA",
      "Id": "1xz3as243x6alaporhetrqmfoqsol888",
      "Affiliation": "LIP6-UPMC\/INRIA"
    },
    {
      "Name": "Julia  Lawall",
      "Key": "Julia  Lawall @ LIP6",
      "Id": "2632xaapx7x33alaporh888888888888",
      "Affiliation": "LIP6"
    },
    {
      "Name": "Gilles Muller",
      "Key": "Gilles Muller @ LIP6-INRIA\/UPMC",
      "Id": "123316aq63315alaporheoqsolftrqm8",
      "Affiliation": "LIP6-INRIA\/UPMC"
    },
    {
      "Name": "Milos Gligoric",
      "Key": "Milos Gligoric @ University of Illinois at Urbana-Champaign",
      "Id": "83ou241fj3354p2h333o2j21ot122688",
      "Affiliation": "University of Illinois at Urbana-Champaign"
    },
    {
      "Name": "Wolfram Schulte",
      "Key": "Wolfram Schulte @ Microsoft",
      "Id": "74315x3asy26361alaq2y54641688888",
      "Affiliation": "Microsoft"
    },
    {
      "Name": "Chandra Prasad",
      "Key": "Chandra Prasad @ Microsoft",
      "Id": "y2x4y5xar5x6xyalaq2y546416888888",
      "Affiliation": "Microsoft"
    },
    {
      "Name": "Danny van Velzen",
      "Key": "Danny van Velzen @ Microsoft",
      "Id": "yx448a7x4at13814alaq2y5464168888",
      "Affiliation": "Microsoft"
    },
    {
      "Name": "Iman Narasamdya",
      "Key": "Iman Narasamdya @ Microsoft",
      "Id": "23x4aqx5x6x3y8xalaq2y54641688888",
      "Affiliation": "Microsoft"
    },
    {
      "Name": "Benjamin Livshits",
      "Key": "Benjamin Livshits @ Microsoft Research",
      "Id": "6313h434ofv252pv3218888888888888",
      "Affiliation": "Microsoft Research"
    },
    {
      "Name": "Terence Parr",
      "Key": "Terence Parr @ University of San Francisco",
      "Id": "932mu5fj3354p2j1g224288888888888",
      "Affiliation": "University of San Francisco"
    },
    {
      "Name": "Sam Harwell",
      "Key": "Sam Harwell @ University of Texas at Austin",
      "Id": "8ns62nfx4347omv3o2f6468888888888",
      "Affiliation": "University of Texas at Austin"
    },
    {
      "Name": "Kathleen Fisher",
      "Key": "Kathleen Fisher @ Tufts University",
      "Id": "7422g41ofy3ox4347888888888888888",
      "Affiliation": "Tufts University"
    },
    {
      "Name": "Manohar Jonnalagedda",
      "Key": "Manohar Jonnalagedda @ EPFL, Switzerland",
      "Id": "74yov41yyxfgpkj47312888888888888",
      "Affiliation": "EPFL, Switzerland"
    },
    {
      "Name": "Thierry Coppey",
      "Key": "Thierry Coppey @ EPFL, Switzerland; Google",
      "Id": "undefined15pu44fgpkj47312ev3288888888888",
      "Affiliation": "EPFL, Switzerland; Google"
    },
    {
      "Name": "Sandro Stucki",
      "Key": "Sandro Stucki @ EPFL, Switzerland",
      "Id": "824j61nfpoc144414888888888888888",
      "Affiliation": "EPFL, Switzerland"
    },
    {
      "Name": "Tiark Rompf",
      "Key": "Tiark Rompf @ Purdue & Oracle Labs",
      "Id": "undefined2nx4mfx33bi21mt2888888888888888",
      "Affiliation": "Purdue & Oracle Labs"
    },
    {
      "Name": "Martin Odersky",
      "Key": "Martin Odersky @ Ecole Polytechnique Federale de Lausanne",
      "Id": "763iy55fg22i37y333gy31myh3244888",
      "Affiliation": "Ecole Polytechnique Federale de Lausanne"
    },
    {
      "Name": "Vineet Kumar",
      "Key": "Vineet Kumar @ undefined",
      "Id": "724116ap63x5ala64y11241y88888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Laurie Hendren",
      "Key": "Laurie Hendren @ McGill University",
      "Id": "761h232fht2nx4347888888888888888",
      "Affiliation": "McGill University"
    },
    {
      "Name": "Zhijia Zhao",
      "Key": "Zhijia Zhao @ College of William and Mary",
      "Id": "z21kyofu31m2j221l2h2888888888888",
      "Affiliation": "College of William and Mary"
    },
    {
      "Name": "Bo Wu",
      "Key": "Bo Wu @ College of William and Mary",
      "Id": "7jpfu31m2j221l2h2888888888888888",
      "Affiliation": "College of William and Mary"
    },
    {
      "Name": "Mingzhou Zhou",
      "Key": "Mingzhou Zhou @ College of William and Mary",
      "Id": "8255k3pfu31m2j221l2h288888888888",
      "Affiliation": "College of William and Mary"
    },
    {
      "Name": "Yufei Ding",
      "Key": "Yufei Ding @ College of William and Mary",
      "Id": "z1nt2fg321omx31n1mt6888888888888",
      "Affiliation": "College of William and Mary"
    },
    {
      "Name": "Jianhua Sun",
      "Key": "Jianhua Sun @ College of William and Mary",
      "Id": "814lyofu31m2j221l2h2888888888888",
      "Affiliation": "College of William and Mary"
    },
    {
      "Name": "Xipeng Shen",
      "Key": "Xipeng Shen @ North Carolina State University",
      "Id": "z22j1ofw6ns421j23j33548888888888",
      "Affiliation": "North Carolina State University"
    },
    {
      "Name": "Youfeng Wu",
      "Key": "Youfeng Wu @ Intel Corporation",
      "Id": "8461141at6alao4613am45445x624488",
      "Affiliation": "Intel Corporation"
    },
    {
      "Name": "Mingzhou Zhou",
      "Key": "Mingzhou Zhou @ College of William and Mary",
      "Id": "8255k3pfu31m2j221l2h288888888888",
      "Affiliation": "College of William and Mary"
    },
    {
      "Name": "Xipeng Shen",
      "Key": "Xipeng Shen @ North Carolina State University",
      "Id": "z22j1ofw6ns421j23j33548888888888",
      "Affiliation": "North Carolina State University"
    },
    {
      "Name": "Yaoqing Gao",
      "Key": "Yaoqing Gao @ IBM Toronto Labs",
      "Id": "8x45241aox4alaomqas454464apxx688",
      "Affiliation": "IBM Toronto Labs"
    },
    {
      "Name": "Graham Yiu",
      "Key": "Graham Yiu @ IBM Toronto Labs",
      "Id": "15x2x3au26alaomqas454464apxx6888",
      "Affiliation": "IBM Toronto Labs"
    },
    {
      "Name": "Keith Adams",
      "Key": "Keith Adams @ Facebook",
      "Id": "31262alyx36alanxy1x4438888888888",
      "Affiliation": "Facebook"
    },
    {
      "Name": "Jason Evans",
      "Key": "Jason Evans @ Facebook",
      "Id": "2x644an7x46alanxy1x4438888888888",
      "Affiliation": "Facebook"
    },
    {
      "Name": "Bertrand Maher",
      "Key": "Bertrand Maher @ Facebook",
      "Id": "x1565x4yaqx215alanxy1x4438888888",
      "Affiliation": "Facebook"
    },
    {
      "Name": "Guilherme Ottoni",
      "Key": "Guilherme Ottoni @ Facebook",
      "Id": "162321531ar66442alanxy1x44388888",
      "Affiliation": "Facebook"
    },
    {
      "Name": "Drew Paroski",
      "Key": "Drew Paroski @ Facebook",
      "Id": "y517arx54632alanxy1x443888888888",
      "Affiliation": "Facebook"
    },
    {
      "Name": "Brett Simmers",
      "Key": "Brett Simmers @ Facebook",
      "Id": "x5166as233156alanxy1x44388888888",
      "Affiliation": "Facebook"
    },
    {
      "Name": "Edwin Smith",
      "Key": "Edwin Smith @ Facebook",
      "Id": "1y724as3262alanxy1x4438888888888",
      "Affiliation": "Facebook"
    },
    {
      "Name": "Owen Yamauchi",
      "Key": "Owen Yamauchi @ Facebook",
      "Id": "4714aux3x6y22alanxy1x44388888888",
      "Affiliation": "Facebook"
    },
    {
      "Name": "Wei Zhang",
      "Key": "Wei Zhang @ University of California, Irvine",
      "Id": "undefinednx1mfx4347oms2241cw428888888888",
      "Affiliation": "University of California, Irvine"
    },
    {
      "Name": "Per Larsen",
      "Key": "Per Larsen @ University of California, Irvine",
      "Id": "8ot52fj3354p2g1143nh634888888888",
      "Affiliation": "University of California, Irvine"
    },
    {
      "Name": "Stefan Brunthaler",
      "Key": "Stefan Brunthaler @ University of California, Irvine",
      "Id": "z11g65y2ofx4347oms2241cw42888888",
      "Affiliation": "University of California, Irvine"
    },
    {
      "Name": "Michael Franz",
      "Key": "Michael Franz @ University of California, Irvine",
      "Id": "81ynv1qfx4347oms2241cw4288888888",
      "Affiliation": "University of California, Irvine"
    },
    {
      "Name": "Peng Wang",
      "Key": "Peng Wang @ MIT CSAIL",
      "Id": "4141atx41alaqosamslop88888888888",
      "Affiliation": "MIT CSAIL"
    },
    {
      "Name": "Santiago Cuellar",
      "Key": "Santiago Cuellar @ Princeton",
      "Id": "6x462x14am6133x5alar524y16448888",
      "Affiliation": "Princeton"
    },
    {
      "Name": "Adam Chlipala",
      "Key": "Adam Chlipala @ MIT CSAIL",
      "Id": "xyx3am2324x3xalaqosamslop8888888",
      "Affiliation": "MIT CSAIL"
    },
    {
      "Name": "Nicol\u00e1s Rosner",
      "Key": "Nicol\u00e1s Rosner @ Dept. of Computer Science FCEyN, University of Buenos Aires",
      "Id": "undefined6p4sh3lm44p11iuh445ro3n27888888",
      "Affiliation": "Dept. of Computer Science FCEyN, University of Buenos Aires"
    },
    {
      "Name": "Valeria Bengolea",
      "Key": "Valeria Bengolea @ Dept. of Computer Science FCEFQyN, University of Rio Cuarto",
      "Id": "z2l22lmvrn44o2qnvgy44uosw5888888",
      "Affiliation": "Dept. of Computer Science FCEFQyN, University of Rio Cuarto"
    },
    {
      "Name": "Pablo Ponzio",
      "Key": "Pablo Ponzio @ Dept. of Computer Science FCEFQyN, University of Rio Cuarto",
      "Id": "8sy4dwlrw6sw1mnwh445ron368888888",
      "Affiliation": "Dept. of Computer Science FCEFQyN, University of Rio Cuarto"
    },
    {
      "Name": "Shadi Abdul Khalek",
      "Key": "Shadi Abdul Khalek @ Google",
      "Id": "62xy2alxy63ap2x313alao4413188888",
      "Affiliation": "Google"
    },
    {
      "Name": "Nazareno Aguirre",
      "Key": "Nazareno Aguirre @ Dept. of Computer Science FCEFQyN, University of Rio Cuarto",
      "Id": "z2sw4lmvrn44o2qnvgy44uosw5888888",
      "Affiliation": "Dept. of Computer Science FCEFQyN, University of Rio Cuarto"
    },
    {
      "Name": "Marcelo F. Frias",
      "Key": "Marcelo F. Frias @ Dept. of Software Engineering Instituto Tecnol\u00f3gico de Buenos Aires",
      "Id": "z1og2nmvrp42n222o46p161rm3tw4888",
      "Affiliation": "Dept. of Software Engineering Instituto Tecnol\u00f3gico de Buenos Aires"
    },
    {
      "Name": "Sarfraz Khurshid",
      "Key": "Sarfraz Khurshid @ University of Texas at Austin",
      "Id": "832qu631fj3354p2j42lpv6388888888",
      "Affiliation": "University of Texas at Austin"
    },
    {
      "Name": "Ankush Desai",
      "Key": "Ankush Desai @ University of California, Berkeley",
      "Id": "743g31fj3354p2g1143ng32288888888",
      "Affiliation": "University of California, Berkeley"
    },
    {
      "Name": "Pranav Garg",
      "Key": "Pranav Garg @ University of Illinois at Urbana-Champaign",
      "Id": "z13g2mfx4347omv244lpyx1iy4128888",
      "Affiliation": "University of Illinois at Urbana-Champaign"
    },
    {
      "Name": "P. Madhusudan",
      "Key": "P. Madhusudan @ University of Illinois at Urbana-Champaign",
      "Id": "whx46xofx4347omv244lpyx1iy412888",
      "Affiliation": "University of Illinois at Urbana-Champaign"
    },
    {
      "Name": "Aaron Turon",
      "Key": "Aaron Turon @ MPI-SWS",
      "Id": "xx544as6544alaqroests88888888888",
      "Affiliation": "MPI-SWS"
    },
    {
      "Name": "Viktor Vafeiadis",
      "Key": "Viktor Vafeiadis @ MPI-SWS",
      "Id": "723645atx112xy26alaqroests888888",
      "Affiliation": "MPI-SWS"
    },
    {
      "Name": "Derek Dreyer",
      "Key": "Derek Dreyer @ MPI-SWS",
      "Id": "y1513an51815alaqroests8888888888",
      "Affiliation": "MPI-SWS"
    },
    {
      "Name": "Dhruva Chakrabarti",
      "Key": "Dhruva Chakrabarti @ HP Labs",
      "Id": "y2567xam2x35xxx562alaorapxx68888",
      "Affiliation": "HP Labs"
    },
    {
      "Name": "Hans-J. Boehm",
      "Key": "Hans-J. Boehm @ Google",
      "Id": "2x46epfam4123alao441318888888888",
      "Affiliation": "Google"
    },
    {
      "Name": "Kumud Bhandari",
      "Key": "Kumud Bhandari @ Rice University",
      "Id": "3636yam2x4yx52alas2y1at427156268",
      "Affiliation": "Rice University"
    },
    {
      "Name": "Malavika Samak",
      "Key": "Malavika Samak @ Indian Institute of Science, Bangalore",
      "Id": "7141j11fh21ov646m2j12ycr21448888",
      "Affiliation": "Indian Institute of Science, Bangalore"
    },
    {
      "Name": "Murali Krishna Ramanathan",
      "Key": "Murali Krishna Ramanathan @ Indian Institute of Science, Bangalore",
      "Id": "z1o3rx12noyo54srw1jv138888888888",
      "Affiliation": "Indian Institute of Science, Bangalore"
    },
    {
      "Name": "Tom Bergan",
      "Key": "Tom Bergan @ University of Washington",
      "Id": "zns31fj3354p2j222568888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Dan Grossman",
      "Key": "Dan Grossman @ University of Washington",
      "Id": "5ov541fj3354p2j22256888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Luis Ceze",
      "Key": "Luis Ceze @ University of Washington",
      "Id": "z4g4mfx4347omv333488888888888888",
      "Affiliation": "University of Washington"
    },
    {
      "Name": "Guy L. Steele Jr.",
      "Key": "Guy L. Steele Jr. @ Oracle Labs",
      "Id": "168apfas61131ap5falar5xy31apxx68",
      "Affiliation": "Oracle Labs"
    },
    {
      "Name": "Doug Lea",
      "Key": "Doug Lea @ State University of New York (SUNY) Oswego",
      "Id": "84hyfj23j3354p2i4k4nkrli61688888",
      "Affiliation": "State University of New York (SUNY) Oswego"
    },
    {
      "Name": "Christine H. Flood",
      "Key": "Christine H. Flood @ Red Hat",
      "Id": "y25266241aofan344yalas1yaox68888",
      "Affiliation": "Red Hat"
    },
    {
      "Name": "Rifat Shahriyar",
      "Key": "Rifat Shahriyar @ Australian National University",
      "Id": "9ypwy33ofv6221i231nx434788888888",
      "Affiliation": "Australian National University"
    },
    {
      "Name": "Steve Blackburn",
      "Key": "Steve Blackburn @ Australian National University ",
      "Id": "z3mtx16ofv6221i231nx4347q8888888",
      "Affiliation": "Australian National University "
    },
    {
      "Name": "Kathryn S McKinley",
      "Key": "Kathryn S McKinley @ Microsoft Research",
      "Id": "746ojuv34fh1453j3y25888888888888",
      "Affiliation": "Microsoft Research"
    },
    {
      "Name": "Lu\u00eds Pina",
      "Key": "Lu\u00eds Pina @ Technical University of Lisbon \/ INESC-ID",
      "Id": "z8i3lfv13xnx4347omv24chopjw88888",
      "Affiliation": "Technical University of Lisbon \/ INESC-ID"
    },
    {
      "Name": "Lu\u00eds Veiga",
      "Key": "Lu\u00eds Veiga @ INESC-ID \/ Instituto Superior T\u00e9cnico, Universidade de Lisboa",
      "Id": "zq1lkokby45q34r2sp34yqn248888888",
      "Affiliation": "INESC-ID \/ Instituto Superior T\u00e9cnico, Universidade de Lisboa"
    },
    {
      "Name": "Michael Hicks",
      "Key": "Michael Hicks @ University of Maryland, College Park",
      "Id": "81ynu1ofx4347omt612cu31mu4888888",
      "Affiliation": "University of Maryland, College Park"
    },
    {
      "Name": "Earl Barr",
      "Key": "Earl Barr @ University College London",
      "Id": "64g2ofx4347g321h4268888888888888",
      "Affiliation": "University College London"
    },
    {
      "Name": "Mark Marron",
      "Key": "Mark Marron @ Microsoft Research",
      "Id": "3x53aqx5544alaq2y546416as161x5y2",
      "Affiliation": "Microsoft Research"
    },
    {
      "Name": "Jonathan Bell",
      "Key": "Jonathan Bell @ Columbia University",
      "Id": "9141g2nfu411j3354888888888888888",
      "Affiliation": "Columbia University"
    },
    {
      "Name": "Gail Kaiser",
      "Key": "Gail Kaiser @ Columbia University, New York",
      "Id": "62h13ofu411j3354si4k458888888888",
      "Affiliation": "Columbia University, New York"
    },
    {
      "Name": "Thomas W. Bartenstein",
      "Key": "Thomas W. Bartenstein @ SUNY Binghamton",
      "Id": "undefined42jcr6261ofssg31156888888888888",
      "Affiliation": "SUNY Binghamton"
    },
    {
      "Name": "Yu David Liu",
      "Key": "Yu David Liu @ State University of New York (SUNY) Binghamton",
      "Id": "zg31h4fj23j3354p2i4k4nkrlg311568",
      "Affiliation": "State University of New York (SUNY) Binghamton"
    },
    {
      "Name": "Nada Amin",
      "Key": "Nada Amin @ EPFL",
      "Id": "4xyxal324alanrnp8888888888888888",
      "Affiliation": "EPFL"
    },
    {
      "Name": "Tiark Rompf",
      "Key": "Tiark Rompf @ Purdue & Oracle Labs",
      "Id": "undefined2nx4mfx33bi21mt2888888888888888",
      "Affiliation": "Purdue & Oracle Labs"
    },
    {
      "Name": "Martin Odersky",
      "Key": "Martin Odersky @ Ecole Polytechnique Federale de Lausanne",
      "Id": "763iy55fg22i37y333gy31myh3244888",
      "Affiliation": "Ecole Polytechnique Federale de Lausanne"
    },
    {
      "Name": "John Altidor",
      "Key": "John Altidor @ University of Massachusetts",
      "Id": "93f414fj3354p2h22163688888888888",
      "Affiliation": "University of Massachusetts"
    },
    {
      "Name": "Yannis Smaragdakis",
      "Key": "Yannis Smaragdakis @ University of Athens",
      "Id": "944j12114fj3354p2f42788888888888",
      "Affiliation": "University of Athens"
    },
    {
      "Name": "Esteban Allende",
      "Key": "Esteban Allende @ undefined",
      "Id": "1661xx4al3314y1ala64y11241y88888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Johan Fabry",
      "Key": "Johan Fabry @ University of Chile",
      "Id": "9yos2pfx4347omt24888888888888888",
      "Affiliation": "University of Chile"
    },
    {
      "Name": "Ronald Garcia",
      "Key": "Ronald Garcia @ University of British Columbia",
      "Id": "z12g21lfx4347omv44nu411888888888",
      "Affiliation": "University of British Columbia"
    },
    {
      "Name": "\u00c9ric Tanter",
      "Key": "\u00c9ric Tanter @ University of Chile",
      "Id": "z1j13ofx4347omt24888888888888888",
      "Affiliation": "University of Chile"
    },
    {
      "Name": "Richard Uhler",
      "Key": "Richard Uhler @ MIT-CSAIL",
      "Id": "52y2x5yat2315alaqosemslop8888888",
      "Affiliation": "MIT-CSAIL"
    },
    {
      "Name": "Nirav Dave",
      "Key": "Nirav Dave @ SRI International",
      "Id": "425x7anx71alassoao46154x6244x388",
      "Affiliation": "SRI International"
    },
    {
      "Name": "Jeffrey Bosboom",
      "Key": "Jeffrey Bosboom @ MIT CSAIL",
      "Id": "2111518am46x443alaqosamslop88888",
      "Affiliation": "MIT CSAIL"
    },
    {
      "Name": "Sumanaruban Rajadurai",
      "Key": "Sumanaruban Rajadurai @ National University of Singapore",
      "Id": "z116xou132nft441j3354p2j3y438888",
      "Affiliation": "National University of Singapore"
    },
    {
      "Name": "Weng-Fai Wong",
      "Key": "Weng-Fai Wong @ National University of Singapore",
      "Id": "undefined2j1j4mft441j3354p2j3y4388888888",
      "Affiliation": "National University of Singapore"
    },
    {
      "Name": "Saman Amarasinghe",
      "Key": "Saman Amarasinghe @ MIT",
      "Id": "6x3x4al3x5x624121alaqos888888888",
      "Affiliation": "MIT"
    },
    {
      "Name": "Emma Tosch",
      "Key": "Emma Tosch @ University of Massachusetts, Amherst",
      "Id": "81j51fj3354p2h221636ct1578888888",
      "Affiliation": "University of Massachusetts, Amherst"
    },
    {
      "Name": "Emery Berger",
      "Key": "Emery Berger @ University of Massachusetts, Amherst",
      "Id": "83ps33fj3354p2h221636ct157888888",
      "Affiliation": "University of Massachusetts, Amherst"
    },
    {
      "Name": "Eric Holk",
      "Key": "Eric Holk @ Indiana University",
      "Id": "152yao433alao4y2x4xat42715626888",
      "Affiliation": "Indiana University"
    },
    {
      "Name": "Ryan Newton",
      "Key": "Ryan Newton @ Indiana University",
      "Id": "58x4aq17644alao4y2x4xat427156268",
      "Affiliation": "Indiana University"
    },
    {
      "Name": "Jeremy Siek",
      "Key": "Jeremy Siek @ undefined",
      "Id": "215138as213ala64y11241y888888888",
      "Affiliation": "undefined"
    },
    {
      "Name": "Andrew Lumsdaine",
      "Key": "Andrew Lumsdaine @ Indiana University",
      "Id": "734h5312fh211j335488888888888888",
      "Affiliation": "Indiana University"
    },
    {
      "Name": "Ralf Mitschke",
      "Key": "Ralf Mitschke @ Technical University of Darmstadt",
      "Id": "82h432mfv13xnx4347oms46x78888888",
      "Affiliation": "Technical University of Darmstadt"
    },
    {
      "Name": "Sebastian Erdweg",
      "Key": "Sebastian Erdweg @ TU Darmstadt",
      "Id": "61xx662x4an5y711alastanx5366xy68",
      "Affiliation": "TU Darmstadt"
    },
    {
      "Name": "Mirko Kohler",
      "Key": "Mirko Kohler @ Technical University of Darmstadt",
      "Id": "84ow23fjy311j3354p2g242388888888",
      "Affiliation": "Technical University of Darmstadt"
    },
    {
      "Name": "Mira Mezini",
      "Key": "Mira Mezini @ Technical University of Darmstadt",
      "Id": "82h43nfv13xnx4347oms46x788888888",
      "Affiliation": "Technical University of Darmstadt"
    },
    {
      "Name": "Guido Salvaneschi",
      "Key": "Guido Salvaneschi @ TU Darmstadt",
      "Id": "162y4asx37x416y22alastanx5366xy6",
      "Affiliation": "TU Darmstadt"
    },
    {
      "Name": "Joscha Drechsler",
      "Key": "Joscha Drechsler @ Technische Universit\u00e4t Darmstadt",
      "Id": "93yg3143fjy341mx4348ps46x7888888",
      "Affiliation": "Technische Universit\u00e4t Darmstadt"
    },
    {
      "Name": "Guido Salvaneschi",
      "Key": "Guido Salvaneschi @ TU Darmstadt",
      "Id": "162y4asx37x416y22alastanx5366xy6",
      "Affiliation": "TU Darmstadt"
    },
    {
      "Name": "Ragnar Mogk",
      "Key": "Ragnar Mogk @ Technische Universit\u00e4t Darmstadt",
      "Id": "822h3nfv1331j33548g2423888888888",
      "Affiliation": "Technische Universit\u00e4t Darmstadt"
    },
    {
      "Name": "Mira Mezini",
      "Key": "Mira Mezini @ Technical University of Darmstadt",
      "Id": "82h43nfv13xnx4347oms46x788888888",
      "Affiliation": "Technical University of Darmstadt"
    },
    {
      "Name": "Vlad Ureche",
      "Key": "Vlad Ureche @ EPFL",
      "Id": "73xyat51y21alanrnp88888888888888",
      "Affiliation": "EPFL"
    },
    {
      "Name": "Eugene Burmako",
      "Key": "Eugene Burmako @ EPFL",
      "Id": "161141am653x34alanrnp88888888888",
      "Affiliation": "EPFL"
    },
    {
      "Name": "Martin Odersky",
      "Key": "Martin Odersky @ Ecole Polytechnique Federale de Lausanne",
      "Id": "763iy55fg22i37y333gy31myh3244888",
      "Affiliation": "Ecole Polytechnique Federale de Lausanne"
    },
    {
      "Name": "Tillmann Rendel",
      "Key": "Tillmann Rendel @ University of Marburg",
      "Id": "undefined314j2ynfx4347omt264888888888888",
      "Affiliation": "University of Marburg"
    },
    {
      "Name": "Jonathan Brachth\u00e4user",
      "Key": "Jonathan Brachth\u00e4user @ University of Marburg",
      "Id": "9141g21483ofx4347omt264888888888",
      "Affiliation": "University of Marburg"
    },
    {
      "Name": "Klaus Ostermann",
      "Key": "Klaus Ostermann @ University of Marburg",
      "Id": "83ox341ofx4347omt264888888888888",
      "Affiliation": "University of Marburg"
    }
  ]
}